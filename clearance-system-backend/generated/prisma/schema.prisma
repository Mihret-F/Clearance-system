generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  APPROVER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum AcademicStatus {
  ENROLLED
  GRADUATED
  WITHDRAWN
}

enum EmploymentStatus {
  ACTIVE
  ON_LEAVE
  TERMINATED
}

enum FormType {
  TERMINATION
  ID_REPLACEMENT
  TEACHER_CLEARANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  RESUBMITTED
  COMPLETED
}

enum NotificationType {
  INFO
  ACTION_REQUIRED
  SYSTEM
  EMAIL
}

enum NotificationStatus {
  SENT
  READ
  FAILED
}

enum ProgramType {
  UNDERGRADUATE
  POSTGRADUATE
  DIPLOMA
}

enum ProgramCategory {
  REGULAR
  EXTENSION
  SUMMER
  EVENING
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Permission {
  MANAGE_USERS
  REASSIGN_REQUESTS
  APPROVE_REQUESTS
  MANAGE_WORKFLOWS
}

// Supporting Models
model TerminationReason {
  id                String             @id @default(uuid())
  reason            String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clearanceRequests ClearanceRequest[] @relation("TerminationReason") // Many-to-one
}

model IdReplacementReason {
  id                String             @id @default(uuid())
  reason            String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clearanceRequests ClearanceRequest[] @relation("IdReplacementReason") // Many-to-one
}

model TeacherClearanceReason {
  id                String             @id @default(uuid())
  reason            String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clearanceRequests ClearanceRequest[] @relation("TeacherClearanceReason") // Many-to-one
}

model Document {
  id                 String           @id @default(uuid())
  clearanceRequestId String
  documentTypeId     String
  filePath           String
  uploadedAt         DateTime         @default(now())
  clearanceRequest   ClearanceRequest @relation(fields: [clearanceRequestId], references: [id])
  documentType       DocumentType     @relation(fields: [documentTypeId], references: [id])
}

model DocumentType {
  id          String     @id @default(uuid())
  name        String
  description String?
  requiredFor FormType[]
  documents   Document[]
}

model Certificate {
  id                 String           @id @default(uuid())
  clearanceRequestId String           @unique
  clearanceRequest   ClearanceRequest @relation(fields: [clearanceRequestId], references: [id])
  filePath           String
  qrCode             String
  signatures         Json?
  issuedAt           DateTime         @default(now())
}

model Notification {
  id                 String             @id @default(uuid())
  userId             String
  clearanceRequestId String?
  title              String
  message            String
  emailSubject       String?
  type               NotificationType
  status             NotificationStatus
  read               Boolean            @default(false)
  sentAt             DateTime           @default(now())
  emailSentAt        DateTime?
  user               User               @relation(fields: [userId], references: [id])
  clearanceRequest   ClearanceRequest?  @relation(fields: [clearanceRequestId], references: [id])

  @@index([userId, read, status])
  @@index([clearanceRequestId])
}

model AuditLog {
  id                 String            @id @default(uuid())
  userId             String
  clearanceRequestId String?
  adminId            String?
  action             String
  details            String
  timestamp          DateTime          @default(now())
  user               User              @relation(fields: [userId], references: [id])
  clearanceRequest   ClearanceRequest? @relation(fields: [clearanceRequestId], references: [id])
  admin              Admin?            @relation(fields: [adminId], references: [id])

  @@index([clearanceRequestId])
  @@index([adminId])
}

// Core Models
model User {
  id                 String             @id @default(uuid())
  username           String             @unique
  passwordHash       String
  firstName          String
  fatherName         String
  grandfatherName    String
  email              String?            @unique
  role               UserRole
  status             UserStatus         @default(ACTIVE)
  isFirstLogin       Boolean            @default(true)
  lastLogin          DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  loginAttempts      Int                @default(0)
  isLocked           Boolean            @default(false)
  lockedUntil        DateTime?
  lockedAt           DateTime?
  emailVerified      Boolean            @default(false)
  emailToken         String?
  emailTokenExpiry   DateTime?
  resetToken         String?
  resetTokenExpiry   DateTime?
  browserFingerprint String?
  student            Student?
  teacher            Teacher?
  approver           Approver?
  admin              Admin?
  notifications      Notification[]
  clearanceRequests  ClearanceRequest[]
  auditLogs          AuditLog[]

  @@index([email])
  @@index([role, status])
}

model Student {
  id             String         @id @default(uuid())
  userId         String         @unique
  startDate      DateTime
  programId      String
  currentYear    Int
  semester       Int
  academicStatus AcademicStatus @default(ENROLLED)
  user           User           @relation(fields: [userId], references: [id])
  program        Program        @relation(fields: [programId], references: [id])
  departmentId   String
  department     Department     @relation(fields: [departmentId], references: [id])
}

model Teacher {
  id               String           @id @default(uuid())
  userId           String           @unique
  hireDate         DateTime
  position         String
  departmentId     String
  employmentStatus EmploymentStatus
  yearsOfService   Int              @default(0)
  user             User             @relation(fields: [userId], references: [id])
  department       Department       @relation(fields: [departmentId], references: [id])
}

model Admin {
  id          String       @id @default(uuid())
  userId      String       @unique
  permissions Permission[]
  user        User         @relation(fields: [userId], references: [id])
  auditLogs   AuditLog[]
}

model Department {
  id          String     @id @default(uuid())
  name        String     @unique
  code        String     @unique
  description String?
  teachers    Teacher[]
  students    Student[]
  approvers   Approver[]
  offices     Office[]
  programs    Program[]
}

model Program {
  id                String             @id @default(uuid())
  name              String
  type              ProgramType
  category          ProgramCategory
  departmentId      String
  description       String?
  department        Department         @relation(fields: [departmentId], references: [id])
  students          Student[]
  workflowRules     WorkflowRule[]
  clearanceRequests ClearanceRequest[]

  @@index([type, category])
}

model Office {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  departmentId  String?
  department    Department?    @relation(fields: [departmentId], references: [id])
  approvers     Approver[]
  workflowSteps WorkflowStep[]
}

model Approver {
  id                String           @id @default(uuid())
  userId            String           @unique
  officeId          String
  digitalSignature  String?
  yearsOfExperience Int              @default(0)
  user              User             @relation(fields: [userId], references: [id])
  office            Office           @relation(fields: [officeId], references: [id])
  departmentId      String?
  department        Department?      @relation(fields: [departmentId], references: [id])
  approvalActions   ApprovalAction[]
}

model WorkflowRule {
  id            String         @id @default(uuid())
  formType      FormType
  programId     String?
  description   String?
  program       Program?       @relation(fields: [programId], references: [id])
  workflowSteps WorkflowStep[]

  @@unique([formType, programId])
}

model WorkflowStep {
  id             String       @id @default(uuid())
  workflowRuleId String
  stepOrder      Int
  officeId       String
  description    String?
  workflowRule   WorkflowRule @relation(fields: [workflowRuleId], references: [id])
  office         Office       @relation(fields: [officeId], references: [id])

  @@unique([workflowRuleId, stepOrder])
  @@index([workflowRuleId, stepOrder])
}

model ApprovalAction {
  id                 String           @id @default(uuid())
  clearanceRequestId String
  approverId         String
  status             ApprovalStatus   @default(PENDING)
  comment            String?
  actionDate         DateTime?
  finalizedAt        DateTime?
  actionDueBy        DateTime?
  clearanceRequest   ClearanceRequest @relation(fields: [clearanceRequestId], references: [id])
  approver           Approver         @relation(fields: [approverId], references: [id])

  @@unique([clearanceRequestId, approverId])
  @@index([clearanceRequestId])
  @@index([approverId, status])
}

model ClearanceRequest {
  id                       String                  @id @default(uuid())
  userId                   String
  formType                 FormType
  programId                String
  status                   RequestStatus           @default(PENDING)
  rejectionReason          String?
  resubmissionCount        Int                     @default(0)
  submittedAt              DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  currentStep              Int                     @default(1)
  terminationReasonId      String?
  idReplacementReasonId    String?
  teacherClearanceReasonId String?
  user                     User                    @relation(fields: [userId], references: [id])
  program                  Program                 @relation(fields: [programId], references: [id])
  terminationReason        TerminationReason?      @relation("TerminationReason", fields: [terminationReasonId], references: [id])
  idReplacementReason      IdReplacementReason?    @relation("IdReplacementReason", fields: [idReplacementReasonId], references: [id])
  teacherClearanceReason   TeacherClearanceReason? @relation("TeacherClearanceReason", fields: [teacherClearanceReasonId], references: [id])
  approvalActions          ApprovalAction[]
  documents                Document[]
  notifications            Notification[]
  certificate              Certificate?
  auditLogs                AuditLog[]

  @@index([formType, programId])
  @@index([userId, status])
  @@index([currentStep])
}
