
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model TerminationReason
 * 
 */
export type TerminationReason = $Result.DefaultSelection<Prisma.$TerminationReasonPayload>
/**
 * Model IdReplacementReason
 * 
 */
export type IdReplacementReason = $Result.DefaultSelection<Prisma.$IdReplacementReasonPayload>
/**
 * Model TeacherClearanceReason
 * 
 */
export type TeacherClearanceReason = $Result.DefaultSelection<Prisma.$TeacherClearanceReasonPayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model DocumentType
 * 
 */
export type DocumentType = $Result.DefaultSelection<Prisma.$DocumentTypePayload>
/**
 * Model Certificate
 * 
 */
export type Certificate = $Result.DefaultSelection<Prisma.$CertificatePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Program
 * 
 */
export type Program = $Result.DefaultSelection<Prisma.$ProgramPayload>
/**
 * Model Office
 * 
 */
export type Office = $Result.DefaultSelection<Prisma.$OfficePayload>
/**
 * Model Approver
 * 
 */
export type Approver = $Result.DefaultSelection<Prisma.$ApproverPayload>
/**
 * Model WorkflowRule
 * 
 */
export type WorkflowRule = $Result.DefaultSelection<Prisma.$WorkflowRulePayload>
/**
 * Model WorkflowStep
 * 
 */
export type WorkflowStep = $Result.DefaultSelection<Prisma.$WorkflowStepPayload>
/**
 * Model ApprovalAction
 * 
 */
export type ApprovalAction = $Result.DefaultSelection<Prisma.$ApprovalActionPayload>
/**
 * Model ClearanceRequest
 * 
 */
export type ClearanceRequest = $Result.DefaultSelection<Prisma.$ClearanceRequestPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  APPROVER: 'APPROVER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


export const AcademicStatus: {
  ENROLLED: 'ENROLLED',
  GRADUATED: 'GRADUATED',
  WITHDRAWN: 'WITHDRAWN'
};

export type AcademicStatus = (typeof AcademicStatus)[keyof typeof AcademicStatus]


export const EmploymentStatus: {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED'
};

export type EmploymentStatus = (typeof EmploymentStatus)[keyof typeof EmploymentStatus]


export const FormType: {
  TERMINATION: 'TERMINATION',
  ID_REPLACEMENT: 'ID_REPLACEMENT',
  TEACHER_CLEARANCE: 'TEACHER_CLEARANCE'
};

export type FormType = (typeof FormType)[keyof typeof FormType]


export const RequestStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  RESUBMITTED: 'RESUBMITTED',
  COMPLETED: 'COMPLETED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]


export const NotificationType: {
  INFO: 'INFO',
  ACTION_REQUIRED: 'ACTION_REQUIRED',
  SYSTEM: 'SYSTEM',
  EMAIL: 'EMAIL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationStatus: {
  SENT: 'SENT',
  READ: 'READ',
  FAILED: 'FAILED'
};

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus]


export const ProgramType: {
  UNDERGRADUATE: 'UNDERGRADUATE',
  POSTGRADUATE: 'POSTGRADUATE',
  DIPLOMA: 'DIPLOMA'
};

export type ProgramType = (typeof ProgramType)[keyof typeof ProgramType]


export const ProgramCategory: {
  REGULAR: 'REGULAR',
  EXTENSION: 'EXTENSION',
  SUMMER: 'SUMMER',
  EVENING: 'EVENING'
};

export type ProgramCategory = (typeof ProgramCategory)[keyof typeof ProgramCategory]


export const ApprovalStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus]


export const Permission: {
  MANAGE_USERS: 'MANAGE_USERS',
  REASSIGN_REQUESTS: 'REASSIGN_REQUESTS',
  APPROVE_REQUESTS: 'APPROVE_REQUESTS',
  MANAGE_WORKFLOWS: 'MANAGE_WORKFLOWS'
};

export type Permission = (typeof Permission)[keyof typeof Permission]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

export type AcademicStatus = $Enums.AcademicStatus

export const AcademicStatus: typeof $Enums.AcademicStatus

export type EmploymentStatus = $Enums.EmploymentStatus

export const EmploymentStatus: typeof $Enums.EmploymentStatus

export type FormType = $Enums.FormType

export const FormType: typeof $Enums.FormType

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationStatus = $Enums.NotificationStatus

export const NotificationStatus: typeof $Enums.NotificationStatus

export type ProgramType = $Enums.ProgramType

export const ProgramType: typeof $Enums.ProgramType

export type ProgramCategory = $Enums.ProgramCategory

export const ProgramCategory: typeof $Enums.ProgramCategory

export type ApprovalStatus = $Enums.ApprovalStatus

export const ApprovalStatus: typeof $Enums.ApprovalStatus

export type Permission = $Enums.Permission

export const Permission: typeof $Enums.Permission

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TerminationReasons
 * const terminationReasons = await prisma.terminationReason.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TerminationReasons
   * const terminationReasons = await prisma.terminationReason.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.terminationReason`: Exposes CRUD operations for the **TerminationReason** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TerminationReasons
    * const terminationReasons = await prisma.terminationReason.findMany()
    * ```
    */
  get terminationReason(): Prisma.TerminationReasonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.idReplacementReason`: Exposes CRUD operations for the **IdReplacementReason** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IdReplacementReasons
    * const idReplacementReasons = await prisma.idReplacementReason.findMany()
    * ```
    */
  get idReplacementReason(): Prisma.IdReplacementReasonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacherClearanceReason`: Exposes CRUD operations for the **TeacherClearanceReason** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherClearanceReasons
    * const teacherClearanceReasons = await prisma.teacherClearanceReason.findMany()
    * ```
    */
  get teacherClearanceReason(): Prisma.TeacherClearanceReasonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentType`: Exposes CRUD operations for the **DocumentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTypes
    * const documentTypes = await prisma.documentType.findMany()
    * ```
    */
  get documentType(): Prisma.DocumentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.program`: Exposes CRUD operations for the **Program** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Programs
    * const programs = await prisma.program.findMany()
    * ```
    */
  get program(): Prisma.ProgramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.office`: Exposes CRUD operations for the **Office** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offices
    * const offices = await prisma.office.findMany()
    * ```
    */
  get office(): Prisma.OfficeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approver`: Exposes CRUD operations for the **Approver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvers
    * const approvers = await prisma.approver.findMany()
    * ```
    */
  get approver(): Prisma.ApproverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowRule`: Exposes CRUD operations for the **WorkflowRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowRules
    * const workflowRules = await prisma.workflowRule.findMany()
    * ```
    */
  get workflowRule(): Prisma.WorkflowRuleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowStep`: Exposes CRUD operations for the **WorkflowStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowSteps
    * const workflowSteps = await prisma.workflowStep.findMany()
    * ```
    */
  get workflowStep(): Prisma.WorkflowStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approvalAction`: Exposes CRUD operations for the **ApprovalAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApprovalActions
    * const approvalActions = await prisma.approvalAction.findMany()
    * ```
    */
  get approvalAction(): Prisma.ApprovalActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clearanceRequest`: Exposes CRUD operations for the **ClearanceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClearanceRequests
    * const clearanceRequests = await prisma.clearanceRequest.findMany()
    * ```
    */
  get clearanceRequest(): Prisma.ClearanceRequestDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    TerminationReason: 'TerminationReason',
    IdReplacementReason: 'IdReplacementReason',
    TeacherClearanceReason: 'TeacherClearanceReason',
    Document: 'Document',
    DocumentType: 'DocumentType',
    Certificate: 'Certificate',
    Notification: 'Notification',
    AuditLog: 'AuditLog',
    User: 'User',
    Student: 'Student',
    Teacher: 'Teacher',
    Admin: 'Admin',
    Department: 'Department',
    Program: 'Program',
    Office: 'Office',
    Approver: 'Approver',
    WorkflowRule: 'WorkflowRule',
    WorkflowStep: 'WorkflowStep',
    ApprovalAction: 'ApprovalAction',
    ClearanceRequest: 'ClearanceRequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "terminationReason" | "idReplacementReason" | "teacherClearanceReason" | "document" | "documentType" | "certificate" | "notification" | "auditLog" | "user" | "student" | "teacher" | "admin" | "department" | "program" | "office" | "approver" | "workflowRule" | "workflowStep" | "approvalAction" | "clearanceRequest"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      TerminationReason: {
        payload: Prisma.$TerminationReasonPayload<ExtArgs>
        fields: Prisma.TerminationReasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TerminationReasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TerminationReasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          findFirst: {
            args: Prisma.TerminationReasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TerminationReasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          findMany: {
            args: Prisma.TerminationReasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>[]
          }
          create: {
            args: Prisma.TerminationReasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          createMany: {
            args: Prisma.TerminationReasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TerminationReasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>[]
          }
          delete: {
            args: Prisma.TerminationReasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          update: {
            args: Prisma.TerminationReasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          deleteMany: {
            args: Prisma.TerminationReasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TerminationReasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TerminationReasonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>[]
          }
          upsert: {
            args: Prisma.TerminationReasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminationReasonPayload>
          }
          aggregate: {
            args: Prisma.TerminationReasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerminationReason>
          }
          groupBy: {
            args: Prisma.TerminationReasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<TerminationReasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.TerminationReasonCountArgs<ExtArgs>
            result: $Utils.Optional<TerminationReasonCountAggregateOutputType> | number
          }
        }
      }
      IdReplacementReason: {
        payload: Prisma.$IdReplacementReasonPayload<ExtArgs>
        fields: Prisma.IdReplacementReasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IdReplacementReasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IdReplacementReasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          findFirst: {
            args: Prisma.IdReplacementReasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IdReplacementReasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          findMany: {
            args: Prisma.IdReplacementReasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>[]
          }
          create: {
            args: Prisma.IdReplacementReasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          createMany: {
            args: Prisma.IdReplacementReasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IdReplacementReasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>[]
          }
          delete: {
            args: Prisma.IdReplacementReasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          update: {
            args: Prisma.IdReplacementReasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          deleteMany: {
            args: Prisma.IdReplacementReasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IdReplacementReasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IdReplacementReasonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>[]
          }
          upsert: {
            args: Prisma.IdReplacementReasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdReplacementReasonPayload>
          }
          aggregate: {
            args: Prisma.IdReplacementReasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIdReplacementReason>
          }
          groupBy: {
            args: Prisma.IdReplacementReasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<IdReplacementReasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.IdReplacementReasonCountArgs<ExtArgs>
            result: $Utils.Optional<IdReplacementReasonCountAggregateOutputType> | number
          }
        }
      }
      TeacherClearanceReason: {
        payload: Prisma.$TeacherClearanceReasonPayload<ExtArgs>
        fields: Prisma.TeacherClearanceReasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherClearanceReasonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherClearanceReasonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          findFirst: {
            args: Prisma.TeacherClearanceReasonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherClearanceReasonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          findMany: {
            args: Prisma.TeacherClearanceReasonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>[]
          }
          create: {
            args: Prisma.TeacherClearanceReasonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          createMany: {
            args: Prisma.TeacherClearanceReasonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherClearanceReasonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>[]
          }
          delete: {
            args: Prisma.TeacherClearanceReasonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          update: {
            args: Prisma.TeacherClearanceReasonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          deleteMany: {
            args: Prisma.TeacherClearanceReasonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherClearanceReasonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherClearanceReasonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>[]
          }
          upsert: {
            args: Prisma.TeacherClearanceReasonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClearanceReasonPayload>
          }
          aggregate: {
            args: Prisma.TeacherClearanceReasonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherClearanceReason>
          }
          groupBy: {
            args: Prisma.TeacherClearanceReasonGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherClearanceReasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherClearanceReasonCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherClearanceReasonCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      DocumentType: {
        payload: Prisma.$DocumentTypePayload<ExtArgs>
        fields: Prisma.DocumentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findFirst: {
            args: Prisma.DocumentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findMany: {
            args: Prisma.DocumentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          create: {
            args: Prisma.DocumentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          createMany: {
            args: Prisma.DocumentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          delete: {
            args: Prisma.DocumentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          update: {
            args: Prisma.DocumentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          upsert: {
            args: Prisma.DocumentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          aggregate: {
            args: Prisma.DocumentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentType>
          }
          groupBy: {
            args: Prisma.DocumentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeCountAggregateOutputType> | number
          }
        }
      }
      Certificate: {
        payload: Prisma.$CertificatePayload<ExtArgs>
        fields: Prisma.CertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findFirst: {
            args: Prisma.CertificateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findMany: {
            args: Prisma.CertificateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          create: {
            args: Prisma.CertificateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          createMany: {
            args: Prisma.CertificateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          delete: {
            args: Prisma.CertificateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          update: {
            args: Prisma.CertificateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          deleteMany: {
            args: Prisma.CertificateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          upsert: {
            args: Prisma.CertificateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          aggregate: {
            args: Prisma.CertificateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificate>
          }
          groupBy: {
            args: Prisma.CertificateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Program: {
        payload: Prisma.$ProgramPayload<ExtArgs>
        fields: Prisma.ProgramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findFirst: {
            args: Prisma.ProgramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          findMany: {
            args: Prisma.ProgramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          create: {
            args: Prisma.ProgramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          createMany: {
            args: Prisma.ProgramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgramCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          delete: {
            args: Prisma.ProgramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          update: {
            args: Prisma.ProgramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          deleteMany: {
            args: Prisma.ProgramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProgramUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>[]
          }
          upsert: {
            args: Prisma.ProgramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgramPayload>
          }
          aggregate: {
            args: Prisma.ProgramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgram>
          }
          groupBy: {
            args: Prisma.ProgramGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgramGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgramCountArgs<ExtArgs>
            result: $Utils.Optional<ProgramCountAggregateOutputType> | number
          }
        }
      }
      Office: {
        payload: Prisma.$OfficePayload<ExtArgs>
        fields: Prisma.OfficeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfficeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfficeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          findFirst: {
            args: Prisma.OfficeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfficeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          findMany: {
            args: Prisma.OfficeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>[]
          }
          create: {
            args: Prisma.OfficeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          createMany: {
            args: Prisma.OfficeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OfficeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>[]
          }
          delete: {
            args: Prisma.OfficeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          update: {
            args: Prisma.OfficeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          deleteMany: {
            args: Prisma.OfficeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfficeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OfficeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>[]
          }
          upsert: {
            args: Prisma.OfficeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfficePayload>
          }
          aggregate: {
            args: Prisma.OfficeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOffice>
          }
          groupBy: {
            args: Prisma.OfficeGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfficeGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfficeCountArgs<ExtArgs>
            result: $Utils.Optional<OfficeCountAggregateOutputType> | number
          }
        }
      }
      Approver: {
        payload: Prisma.$ApproverPayload<ExtArgs>
        fields: Prisma.ApproverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApproverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApproverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          findFirst: {
            args: Prisma.ApproverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApproverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          findMany: {
            args: Prisma.ApproverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>[]
          }
          create: {
            args: Prisma.ApproverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          createMany: {
            args: Prisma.ApproverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApproverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>[]
          }
          delete: {
            args: Prisma.ApproverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          update: {
            args: Prisma.ApproverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          deleteMany: {
            args: Prisma.ApproverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApproverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApproverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>[]
          }
          upsert: {
            args: Prisma.ApproverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApproverPayload>
          }
          aggregate: {
            args: Prisma.ApproverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApprover>
          }
          groupBy: {
            args: Prisma.ApproverGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApproverGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApproverCountArgs<ExtArgs>
            result: $Utils.Optional<ApproverCountAggregateOutputType> | number
          }
        }
      }
      WorkflowRule: {
        payload: Prisma.$WorkflowRulePayload<ExtArgs>
        fields: Prisma.WorkflowRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          findFirst: {
            args: Prisma.WorkflowRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          findMany: {
            args: Prisma.WorkflowRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>[]
          }
          create: {
            args: Prisma.WorkflowRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          createMany: {
            args: Prisma.WorkflowRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>[]
          }
          delete: {
            args: Prisma.WorkflowRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          update: {
            args: Prisma.WorkflowRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowRuleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>[]
          }
          upsert: {
            args: Prisma.WorkflowRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowRulePayload>
          }
          aggregate: {
            args: Prisma.WorkflowRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowRule>
          }
          groupBy: {
            args: Prisma.WorkflowRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowRuleCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowRuleCountAggregateOutputType> | number
          }
        }
      }
      WorkflowStep: {
        payload: Prisma.$WorkflowStepPayload<ExtArgs>
        fields: Prisma.WorkflowStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          findFirst: {
            args: Prisma.WorkflowStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          findMany: {
            args: Prisma.WorkflowStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          create: {
            args: Prisma.WorkflowStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          createMany: {
            args: Prisma.WorkflowStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          delete: {
            args: Prisma.WorkflowStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          update: {
            args: Prisma.WorkflowStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>[]
          }
          upsert: {
            args: Prisma.WorkflowStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStepPayload>
          }
          aggregate: {
            args: Prisma.WorkflowStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowStep>
          }
          groupBy: {
            args: Prisma.WorkflowStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowStepCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStepCountAggregateOutputType> | number
          }
        }
      }
      ApprovalAction: {
        payload: Prisma.$ApprovalActionPayload<ExtArgs>
        fields: Prisma.ApprovalActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          findFirst: {
            args: Prisma.ApprovalActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          findMany: {
            args: Prisma.ApprovalActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>[]
          }
          create: {
            args: Prisma.ApprovalActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          createMany: {
            args: Prisma.ApprovalActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApprovalActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>[]
          }
          delete: {
            args: Prisma.ApprovalActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          update: {
            args: Prisma.ApprovalActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApprovalActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>[]
          }
          upsert: {
            args: Prisma.ApprovalActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalActionPayload>
          }
          aggregate: {
            args: Prisma.ApprovalActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApprovalAction>
          }
          groupBy: {
            args: Prisma.ApprovalActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalActionCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalActionCountAggregateOutputType> | number
          }
        }
      }
      ClearanceRequest: {
        payload: Prisma.$ClearanceRequestPayload<ExtArgs>
        fields: Prisma.ClearanceRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClearanceRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClearanceRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          findFirst: {
            args: Prisma.ClearanceRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClearanceRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          findMany: {
            args: Prisma.ClearanceRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>[]
          }
          create: {
            args: Prisma.ClearanceRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          createMany: {
            args: Prisma.ClearanceRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClearanceRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>[]
          }
          delete: {
            args: Prisma.ClearanceRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          update: {
            args: Prisma.ClearanceRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          deleteMany: {
            args: Prisma.ClearanceRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClearanceRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClearanceRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>[]
          }
          upsert: {
            args: Prisma.ClearanceRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClearanceRequestPayload>
          }
          aggregate: {
            args: Prisma.ClearanceRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClearanceRequest>
          }
          groupBy: {
            args: Prisma.ClearanceRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClearanceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClearanceRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ClearanceRequestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    terminationReason?: TerminationReasonOmit
    idReplacementReason?: IdReplacementReasonOmit
    teacherClearanceReason?: TeacherClearanceReasonOmit
    document?: DocumentOmit
    documentType?: DocumentTypeOmit
    certificate?: CertificateOmit
    notification?: NotificationOmit
    auditLog?: AuditLogOmit
    user?: UserOmit
    student?: StudentOmit
    teacher?: TeacherOmit
    admin?: AdminOmit
    department?: DepartmentOmit
    program?: ProgramOmit
    office?: OfficeOmit
    approver?: ApproverOmit
    workflowRule?: WorkflowRuleOmit
    workflowStep?: WorkflowStepOmit
    approvalAction?: ApprovalActionOmit
    clearanceRequest?: ClearanceRequestOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DocumentTypeCountOutputType
   */

  export type DocumentTypeCountOutputType = {
    documents: number
  }

  export type DocumentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | DocumentTypeCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTypeCountOutputType
     */
    select?: DocumentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    notifications: number
    clearanceRequests: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    clearanceRequests?: boolean | UserCountOutputTypeCountClearanceRequestsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClearanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClearanceRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    auditLogs: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    auditLogs?: boolean | AdminCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    teachers: number
    students: number
    approvers: number
    offices: number
    programs: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | DepartmentCountOutputTypeCountTeachersArgs
    students?: boolean | DepartmentCountOutputTypeCountStudentsArgs
    approvers?: boolean | DepartmentCountOutputTypeCountApproversArgs
    offices?: boolean | DepartmentCountOutputTypeCountOfficesArgs
    programs?: boolean | DepartmentCountOutputTypeCountProgramsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountApproversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApproverWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountOfficesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficeWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountProgramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
  }


  /**
   * Count Type ProgramCountOutputType
   */

  export type ProgramCountOutputType = {
    students: number
    workflowRules: number
    clearanceRequests: number
  }

  export type ProgramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ProgramCountOutputTypeCountStudentsArgs
    workflowRules?: boolean | ProgramCountOutputTypeCountWorkflowRulesArgs
    clearanceRequests?: boolean | ProgramCountOutputTypeCountClearanceRequestsArgs
  }

  // Custom InputTypes
  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProgramCountOutputType
     */
    select?: ProgramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountWorkflowRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowRuleWhereInput
  }

  /**
   * ProgramCountOutputType without action
   */
  export type ProgramCountOutputTypeCountClearanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClearanceRequestWhereInput
  }


  /**
   * Count Type OfficeCountOutputType
   */

  export type OfficeCountOutputType = {
    approvers: number
    workflowSteps: number
  }

  export type OfficeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvers?: boolean | OfficeCountOutputTypeCountApproversArgs
    workflowSteps?: boolean | OfficeCountOutputTypeCountWorkflowStepsArgs
  }

  // Custom InputTypes
  /**
   * OfficeCountOutputType without action
   */
  export type OfficeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficeCountOutputType
     */
    select?: OfficeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OfficeCountOutputType without action
   */
  export type OfficeCountOutputTypeCountApproversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApproverWhereInput
  }

  /**
   * OfficeCountOutputType without action
   */
  export type OfficeCountOutputTypeCountWorkflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
  }


  /**
   * Count Type ApproverCountOutputType
   */

  export type ApproverCountOutputType = {
    approvalActions: number
  }

  export type ApproverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvalActions?: boolean | ApproverCountOutputTypeCountApprovalActionsArgs
  }

  // Custom InputTypes
  /**
   * ApproverCountOutputType without action
   */
  export type ApproverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApproverCountOutputType
     */
    select?: ApproverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApproverCountOutputType without action
   */
  export type ApproverCountOutputTypeCountApprovalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalActionWhereInput
  }


  /**
   * Count Type WorkflowRuleCountOutputType
   */

  export type WorkflowRuleCountOutputType = {
    workflowSteps: number
  }

  export type WorkflowRuleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowSteps?: boolean | WorkflowRuleCountOutputTypeCountWorkflowStepsArgs
  }

  // Custom InputTypes
  /**
   * WorkflowRuleCountOutputType without action
   */
  export type WorkflowRuleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRuleCountOutputType
     */
    select?: WorkflowRuleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowRuleCountOutputType without action
   */
  export type WorkflowRuleCountOutputTypeCountWorkflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
  }


  /**
   * Count Type ClearanceRequestCountOutputType
   */

  export type ClearanceRequestCountOutputType = {
    approvalActions: number
    documents: number
    notifications: number
    auditLogs: number
  }

  export type ClearanceRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvalActions?: boolean | ClearanceRequestCountOutputTypeCountApprovalActionsArgs
    documents?: boolean | ClearanceRequestCountOutputTypeCountDocumentsArgs
    notifications?: boolean | ClearanceRequestCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | ClearanceRequestCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * ClearanceRequestCountOutputType without action
   */
  export type ClearanceRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequestCountOutputType
     */
    select?: ClearanceRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClearanceRequestCountOutputType without action
   */
  export type ClearanceRequestCountOutputTypeCountApprovalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalActionWhereInput
  }

  /**
   * ClearanceRequestCountOutputType without action
   */
  export type ClearanceRequestCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ClearanceRequestCountOutputType without action
   */
  export type ClearanceRequestCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * ClearanceRequestCountOutputType without action
   */
  export type ClearanceRequestCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model TerminationReason
   */

  export type AggregateTerminationReason = {
    _count: TerminationReasonCountAggregateOutputType | null
    _min: TerminationReasonMinAggregateOutputType | null
    _max: TerminationReasonMaxAggregateOutputType | null
  }

  export type TerminationReasonMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
    description: string | null
  }

  export type TerminationReasonMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
    description: string | null
  }

  export type TerminationReasonCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    reason: number
    description: number
    _all: number
  }


  export type TerminationReasonMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
  }

  export type TerminationReasonMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
  }

  export type TerminationReasonCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
    _all?: true
  }

  export type TerminationReasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TerminationReason to aggregate.
     */
    where?: TerminationReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TerminationReasons to fetch.
     */
    orderBy?: TerminationReasonOrderByWithRelationInput | TerminationReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TerminationReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TerminationReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TerminationReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TerminationReasons
    **/
    _count?: true | TerminationReasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerminationReasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerminationReasonMaxAggregateInputType
  }

  export type GetTerminationReasonAggregateType<T extends TerminationReasonAggregateArgs> = {
        [P in keyof T & keyof AggregateTerminationReason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerminationReason[P]>
      : GetScalarType<T[P], AggregateTerminationReason[P]>
  }




  export type TerminationReasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerminationReasonWhereInput
    orderBy?: TerminationReasonOrderByWithAggregationInput | TerminationReasonOrderByWithAggregationInput[]
    by: TerminationReasonScalarFieldEnum[] | TerminationReasonScalarFieldEnum
    having?: TerminationReasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerminationReasonCountAggregateInputType | true
    _min?: TerminationReasonMinAggregateInputType
    _max?: TerminationReasonMaxAggregateInputType
  }

  export type TerminationReasonGroupByOutputType = {
    id: string
    clearanceRequestId: string
    reason: string
    description: string | null
    _count: TerminationReasonCountAggregateOutputType | null
    _min: TerminationReasonMinAggregateOutputType | null
    _max: TerminationReasonMaxAggregateOutputType | null
  }

  type GetTerminationReasonGroupByPayload<T extends TerminationReasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TerminationReasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerminationReasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerminationReasonGroupByOutputType[P]>
            : GetScalarType<T[P], TerminationReasonGroupByOutputType[P]>
        }
      >
    >


  export type TerminationReasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terminationReason"]>

  export type TerminationReasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terminationReason"]>

  export type TerminationReasonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["terminationReason"]>

  export type TerminationReasonSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
  }

  export type TerminationReasonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "reason" | "description", ExtArgs["result"]["terminationReason"]>
  export type TerminationReasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type TerminationReasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type TerminationReasonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }

  export type $TerminationReasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TerminationReason"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      reason: string
      description: string | null
    }, ExtArgs["result"]["terminationReason"]>
    composites: {}
  }

  type TerminationReasonGetPayload<S extends boolean | null | undefined | TerminationReasonDefaultArgs> = $Result.GetResult<Prisma.$TerminationReasonPayload, S>

  type TerminationReasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TerminationReasonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TerminationReasonCountAggregateInputType | true
    }

  export interface TerminationReasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TerminationReason'], meta: { name: 'TerminationReason' } }
    /**
     * Find zero or one TerminationReason that matches the filter.
     * @param {TerminationReasonFindUniqueArgs} args - Arguments to find a TerminationReason
     * @example
     * // Get one TerminationReason
     * const terminationReason = await prisma.terminationReason.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TerminationReasonFindUniqueArgs>(args: SelectSubset<T, TerminationReasonFindUniqueArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TerminationReason that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TerminationReasonFindUniqueOrThrowArgs} args - Arguments to find a TerminationReason
     * @example
     * // Get one TerminationReason
     * const terminationReason = await prisma.terminationReason.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TerminationReasonFindUniqueOrThrowArgs>(args: SelectSubset<T, TerminationReasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TerminationReason that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonFindFirstArgs} args - Arguments to find a TerminationReason
     * @example
     * // Get one TerminationReason
     * const terminationReason = await prisma.terminationReason.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TerminationReasonFindFirstArgs>(args?: SelectSubset<T, TerminationReasonFindFirstArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TerminationReason that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonFindFirstOrThrowArgs} args - Arguments to find a TerminationReason
     * @example
     * // Get one TerminationReason
     * const terminationReason = await prisma.terminationReason.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TerminationReasonFindFirstOrThrowArgs>(args?: SelectSubset<T, TerminationReasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TerminationReasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TerminationReasons
     * const terminationReasons = await prisma.terminationReason.findMany()
     * 
     * // Get first 10 TerminationReasons
     * const terminationReasons = await prisma.terminationReason.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const terminationReasonWithIdOnly = await prisma.terminationReason.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TerminationReasonFindManyArgs>(args?: SelectSubset<T, TerminationReasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TerminationReason.
     * @param {TerminationReasonCreateArgs} args - Arguments to create a TerminationReason.
     * @example
     * // Create one TerminationReason
     * const TerminationReason = await prisma.terminationReason.create({
     *   data: {
     *     // ... data to create a TerminationReason
     *   }
     * })
     * 
     */
    create<T extends TerminationReasonCreateArgs>(args: SelectSubset<T, TerminationReasonCreateArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TerminationReasons.
     * @param {TerminationReasonCreateManyArgs} args - Arguments to create many TerminationReasons.
     * @example
     * // Create many TerminationReasons
     * const terminationReason = await prisma.terminationReason.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TerminationReasonCreateManyArgs>(args?: SelectSubset<T, TerminationReasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TerminationReasons and returns the data saved in the database.
     * @param {TerminationReasonCreateManyAndReturnArgs} args - Arguments to create many TerminationReasons.
     * @example
     * // Create many TerminationReasons
     * const terminationReason = await prisma.terminationReason.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TerminationReasons and only return the `id`
     * const terminationReasonWithIdOnly = await prisma.terminationReason.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TerminationReasonCreateManyAndReturnArgs>(args?: SelectSubset<T, TerminationReasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TerminationReason.
     * @param {TerminationReasonDeleteArgs} args - Arguments to delete one TerminationReason.
     * @example
     * // Delete one TerminationReason
     * const TerminationReason = await prisma.terminationReason.delete({
     *   where: {
     *     // ... filter to delete one TerminationReason
     *   }
     * })
     * 
     */
    delete<T extends TerminationReasonDeleteArgs>(args: SelectSubset<T, TerminationReasonDeleteArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TerminationReason.
     * @param {TerminationReasonUpdateArgs} args - Arguments to update one TerminationReason.
     * @example
     * // Update one TerminationReason
     * const terminationReason = await prisma.terminationReason.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TerminationReasonUpdateArgs>(args: SelectSubset<T, TerminationReasonUpdateArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TerminationReasons.
     * @param {TerminationReasonDeleteManyArgs} args - Arguments to filter TerminationReasons to delete.
     * @example
     * // Delete a few TerminationReasons
     * const { count } = await prisma.terminationReason.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TerminationReasonDeleteManyArgs>(args?: SelectSubset<T, TerminationReasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TerminationReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TerminationReasons
     * const terminationReason = await prisma.terminationReason.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TerminationReasonUpdateManyArgs>(args: SelectSubset<T, TerminationReasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TerminationReasons and returns the data updated in the database.
     * @param {TerminationReasonUpdateManyAndReturnArgs} args - Arguments to update many TerminationReasons.
     * @example
     * // Update many TerminationReasons
     * const terminationReason = await prisma.terminationReason.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TerminationReasons and only return the `id`
     * const terminationReasonWithIdOnly = await prisma.terminationReason.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TerminationReasonUpdateManyAndReturnArgs>(args: SelectSubset<T, TerminationReasonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TerminationReason.
     * @param {TerminationReasonUpsertArgs} args - Arguments to update or create a TerminationReason.
     * @example
     * // Update or create a TerminationReason
     * const terminationReason = await prisma.terminationReason.upsert({
     *   create: {
     *     // ... data to create a TerminationReason
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TerminationReason we want to update
     *   }
     * })
     */
    upsert<T extends TerminationReasonUpsertArgs>(args: SelectSubset<T, TerminationReasonUpsertArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TerminationReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonCountArgs} args - Arguments to filter TerminationReasons to count.
     * @example
     * // Count the number of TerminationReasons
     * const count = await prisma.terminationReason.count({
     *   where: {
     *     // ... the filter for the TerminationReasons we want to count
     *   }
     * })
    **/
    count<T extends TerminationReasonCountArgs>(
      args?: Subset<T, TerminationReasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerminationReasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TerminationReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerminationReasonAggregateArgs>(args: Subset<T, TerminationReasonAggregateArgs>): Prisma.PrismaPromise<GetTerminationReasonAggregateType<T>>

    /**
     * Group by TerminationReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminationReasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerminationReasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerminationReasonGroupByArgs['orderBy'] }
        : { orderBy?: TerminationReasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerminationReasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminationReasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TerminationReason model
   */
  readonly fields: TerminationReasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TerminationReason.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TerminationReasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TerminationReason model
   */
  interface TerminationReasonFieldRefs {
    readonly id: FieldRef<"TerminationReason", 'String'>
    readonly clearanceRequestId: FieldRef<"TerminationReason", 'String'>
    readonly reason: FieldRef<"TerminationReason", 'String'>
    readonly description: FieldRef<"TerminationReason", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TerminationReason findUnique
   */
  export type TerminationReasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter, which TerminationReason to fetch.
     */
    where: TerminationReasonWhereUniqueInput
  }

  /**
   * TerminationReason findUniqueOrThrow
   */
  export type TerminationReasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter, which TerminationReason to fetch.
     */
    where: TerminationReasonWhereUniqueInput
  }

  /**
   * TerminationReason findFirst
   */
  export type TerminationReasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter, which TerminationReason to fetch.
     */
    where?: TerminationReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TerminationReasons to fetch.
     */
    orderBy?: TerminationReasonOrderByWithRelationInput | TerminationReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TerminationReasons.
     */
    cursor?: TerminationReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TerminationReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TerminationReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TerminationReasons.
     */
    distinct?: TerminationReasonScalarFieldEnum | TerminationReasonScalarFieldEnum[]
  }

  /**
   * TerminationReason findFirstOrThrow
   */
  export type TerminationReasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter, which TerminationReason to fetch.
     */
    where?: TerminationReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TerminationReasons to fetch.
     */
    orderBy?: TerminationReasonOrderByWithRelationInput | TerminationReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TerminationReasons.
     */
    cursor?: TerminationReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TerminationReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TerminationReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TerminationReasons.
     */
    distinct?: TerminationReasonScalarFieldEnum | TerminationReasonScalarFieldEnum[]
  }

  /**
   * TerminationReason findMany
   */
  export type TerminationReasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter, which TerminationReasons to fetch.
     */
    where?: TerminationReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TerminationReasons to fetch.
     */
    orderBy?: TerminationReasonOrderByWithRelationInput | TerminationReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TerminationReasons.
     */
    cursor?: TerminationReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TerminationReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TerminationReasons.
     */
    skip?: number
    distinct?: TerminationReasonScalarFieldEnum | TerminationReasonScalarFieldEnum[]
  }

  /**
   * TerminationReason create
   */
  export type TerminationReasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * The data needed to create a TerminationReason.
     */
    data: XOR<TerminationReasonCreateInput, TerminationReasonUncheckedCreateInput>
  }

  /**
   * TerminationReason createMany
   */
  export type TerminationReasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TerminationReasons.
     */
    data: TerminationReasonCreateManyInput | TerminationReasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TerminationReason createManyAndReturn
   */
  export type TerminationReasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * The data used to create many TerminationReasons.
     */
    data: TerminationReasonCreateManyInput | TerminationReasonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TerminationReason update
   */
  export type TerminationReasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * The data needed to update a TerminationReason.
     */
    data: XOR<TerminationReasonUpdateInput, TerminationReasonUncheckedUpdateInput>
    /**
     * Choose, which TerminationReason to update.
     */
    where: TerminationReasonWhereUniqueInput
  }

  /**
   * TerminationReason updateMany
   */
  export type TerminationReasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TerminationReasons.
     */
    data: XOR<TerminationReasonUpdateManyMutationInput, TerminationReasonUncheckedUpdateManyInput>
    /**
     * Filter which TerminationReasons to update
     */
    where?: TerminationReasonWhereInput
    /**
     * Limit how many TerminationReasons to update.
     */
    limit?: number
  }

  /**
   * TerminationReason updateManyAndReturn
   */
  export type TerminationReasonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * The data used to update TerminationReasons.
     */
    data: XOR<TerminationReasonUpdateManyMutationInput, TerminationReasonUncheckedUpdateManyInput>
    /**
     * Filter which TerminationReasons to update
     */
    where?: TerminationReasonWhereInput
    /**
     * Limit how many TerminationReasons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TerminationReason upsert
   */
  export type TerminationReasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * The filter to search for the TerminationReason to update in case it exists.
     */
    where: TerminationReasonWhereUniqueInput
    /**
     * In case the TerminationReason found by the `where` argument doesn't exist, create a new TerminationReason with this data.
     */
    create: XOR<TerminationReasonCreateInput, TerminationReasonUncheckedCreateInput>
    /**
     * In case the TerminationReason was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TerminationReasonUpdateInput, TerminationReasonUncheckedUpdateInput>
  }

  /**
   * TerminationReason delete
   */
  export type TerminationReasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    /**
     * Filter which TerminationReason to delete.
     */
    where: TerminationReasonWhereUniqueInput
  }

  /**
   * TerminationReason deleteMany
   */
  export type TerminationReasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TerminationReasons to delete
     */
    where?: TerminationReasonWhereInput
    /**
     * Limit how many TerminationReasons to delete.
     */
    limit?: number
  }

  /**
   * TerminationReason without action
   */
  export type TerminationReasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
  }


  /**
   * Model IdReplacementReason
   */

  export type AggregateIdReplacementReason = {
    _count: IdReplacementReasonCountAggregateOutputType | null
    _min: IdReplacementReasonMinAggregateOutputType | null
    _max: IdReplacementReasonMaxAggregateOutputType | null
  }

  export type IdReplacementReasonMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
    description: string | null
  }

  export type IdReplacementReasonMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
    description: string | null
  }

  export type IdReplacementReasonCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    reason: number
    description: number
    _all: number
  }


  export type IdReplacementReasonMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
  }

  export type IdReplacementReasonMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
  }

  export type IdReplacementReasonCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    description?: true
    _all?: true
  }

  export type IdReplacementReasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdReplacementReason to aggregate.
     */
    where?: IdReplacementReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdReplacementReasons to fetch.
     */
    orderBy?: IdReplacementReasonOrderByWithRelationInput | IdReplacementReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IdReplacementReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdReplacementReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdReplacementReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IdReplacementReasons
    **/
    _count?: true | IdReplacementReasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdReplacementReasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdReplacementReasonMaxAggregateInputType
  }

  export type GetIdReplacementReasonAggregateType<T extends IdReplacementReasonAggregateArgs> = {
        [P in keyof T & keyof AggregateIdReplacementReason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdReplacementReason[P]>
      : GetScalarType<T[P], AggregateIdReplacementReason[P]>
  }




  export type IdReplacementReasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdReplacementReasonWhereInput
    orderBy?: IdReplacementReasonOrderByWithAggregationInput | IdReplacementReasonOrderByWithAggregationInput[]
    by: IdReplacementReasonScalarFieldEnum[] | IdReplacementReasonScalarFieldEnum
    having?: IdReplacementReasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdReplacementReasonCountAggregateInputType | true
    _min?: IdReplacementReasonMinAggregateInputType
    _max?: IdReplacementReasonMaxAggregateInputType
  }

  export type IdReplacementReasonGroupByOutputType = {
    id: string
    clearanceRequestId: string
    reason: string
    description: string | null
    _count: IdReplacementReasonCountAggregateOutputType | null
    _min: IdReplacementReasonMinAggregateOutputType | null
    _max: IdReplacementReasonMaxAggregateOutputType | null
  }

  type GetIdReplacementReasonGroupByPayload<T extends IdReplacementReasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IdReplacementReasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdReplacementReasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdReplacementReasonGroupByOutputType[P]>
            : GetScalarType<T[P], IdReplacementReasonGroupByOutputType[P]>
        }
      >
    >


  export type IdReplacementReasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["idReplacementReason"]>

  export type IdReplacementReasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["idReplacementReason"]>

  export type IdReplacementReasonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["idReplacementReason"]>

  export type IdReplacementReasonSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    description?: boolean
  }

  export type IdReplacementReasonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "reason" | "description", ExtArgs["result"]["idReplacementReason"]>
  export type IdReplacementReasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type IdReplacementReasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type IdReplacementReasonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }

  export type $IdReplacementReasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IdReplacementReason"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      reason: string
      description: string | null
    }, ExtArgs["result"]["idReplacementReason"]>
    composites: {}
  }

  type IdReplacementReasonGetPayload<S extends boolean | null | undefined | IdReplacementReasonDefaultArgs> = $Result.GetResult<Prisma.$IdReplacementReasonPayload, S>

  type IdReplacementReasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IdReplacementReasonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IdReplacementReasonCountAggregateInputType | true
    }

  export interface IdReplacementReasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IdReplacementReason'], meta: { name: 'IdReplacementReason' } }
    /**
     * Find zero or one IdReplacementReason that matches the filter.
     * @param {IdReplacementReasonFindUniqueArgs} args - Arguments to find a IdReplacementReason
     * @example
     * // Get one IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IdReplacementReasonFindUniqueArgs>(args: SelectSubset<T, IdReplacementReasonFindUniqueArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IdReplacementReason that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IdReplacementReasonFindUniqueOrThrowArgs} args - Arguments to find a IdReplacementReason
     * @example
     * // Get one IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IdReplacementReasonFindUniqueOrThrowArgs>(args: SelectSubset<T, IdReplacementReasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IdReplacementReason that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonFindFirstArgs} args - Arguments to find a IdReplacementReason
     * @example
     * // Get one IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IdReplacementReasonFindFirstArgs>(args?: SelectSubset<T, IdReplacementReasonFindFirstArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IdReplacementReason that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonFindFirstOrThrowArgs} args - Arguments to find a IdReplacementReason
     * @example
     * // Get one IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IdReplacementReasonFindFirstOrThrowArgs>(args?: SelectSubset<T, IdReplacementReasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IdReplacementReasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IdReplacementReasons
     * const idReplacementReasons = await prisma.idReplacementReason.findMany()
     * 
     * // Get first 10 IdReplacementReasons
     * const idReplacementReasons = await prisma.idReplacementReason.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const idReplacementReasonWithIdOnly = await prisma.idReplacementReason.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IdReplacementReasonFindManyArgs>(args?: SelectSubset<T, IdReplacementReasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IdReplacementReason.
     * @param {IdReplacementReasonCreateArgs} args - Arguments to create a IdReplacementReason.
     * @example
     * // Create one IdReplacementReason
     * const IdReplacementReason = await prisma.idReplacementReason.create({
     *   data: {
     *     // ... data to create a IdReplacementReason
     *   }
     * })
     * 
     */
    create<T extends IdReplacementReasonCreateArgs>(args: SelectSubset<T, IdReplacementReasonCreateArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IdReplacementReasons.
     * @param {IdReplacementReasonCreateManyArgs} args - Arguments to create many IdReplacementReasons.
     * @example
     * // Create many IdReplacementReasons
     * const idReplacementReason = await prisma.idReplacementReason.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IdReplacementReasonCreateManyArgs>(args?: SelectSubset<T, IdReplacementReasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IdReplacementReasons and returns the data saved in the database.
     * @param {IdReplacementReasonCreateManyAndReturnArgs} args - Arguments to create many IdReplacementReasons.
     * @example
     * // Create many IdReplacementReasons
     * const idReplacementReason = await prisma.idReplacementReason.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IdReplacementReasons and only return the `id`
     * const idReplacementReasonWithIdOnly = await prisma.idReplacementReason.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IdReplacementReasonCreateManyAndReturnArgs>(args?: SelectSubset<T, IdReplacementReasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IdReplacementReason.
     * @param {IdReplacementReasonDeleteArgs} args - Arguments to delete one IdReplacementReason.
     * @example
     * // Delete one IdReplacementReason
     * const IdReplacementReason = await prisma.idReplacementReason.delete({
     *   where: {
     *     // ... filter to delete one IdReplacementReason
     *   }
     * })
     * 
     */
    delete<T extends IdReplacementReasonDeleteArgs>(args: SelectSubset<T, IdReplacementReasonDeleteArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IdReplacementReason.
     * @param {IdReplacementReasonUpdateArgs} args - Arguments to update one IdReplacementReason.
     * @example
     * // Update one IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IdReplacementReasonUpdateArgs>(args: SelectSubset<T, IdReplacementReasonUpdateArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IdReplacementReasons.
     * @param {IdReplacementReasonDeleteManyArgs} args - Arguments to filter IdReplacementReasons to delete.
     * @example
     * // Delete a few IdReplacementReasons
     * const { count } = await prisma.idReplacementReason.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IdReplacementReasonDeleteManyArgs>(args?: SelectSubset<T, IdReplacementReasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IdReplacementReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IdReplacementReasons
     * const idReplacementReason = await prisma.idReplacementReason.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IdReplacementReasonUpdateManyArgs>(args: SelectSubset<T, IdReplacementReasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IdReplacementReasons and returns the data updated in the database.
     * @param {IdReplacementReasonUpdateManyAndReturnArgs} args - Arguments to update many IdReplacementReasons.
     * @example
     * // Update many IdReplacementReasons
     * const idReplacementReason = await prisma.idReplacementReason.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IdReplacementReasons and only return the `id`
     * const idReplacementReasonWithIdOnly = await prisma.idReplacementReason.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IdReplacementReasonUpdateManyAndReturnArgs>(args: SelectSubset<T, IdReplacementReasonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IdReplacementReason.
     * @param {IdReplacementReasonUpsertArgs} args - Arguments to update or create a IdReplacementReason.
     * @example
     * // Update or create a IdReplacementReason
     * const idReplacementReason = await prisma.idReplacementReason.upsert({
     *   create: {
     *     // ... data to create a IdReplacementReason
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IdReplacementReason we want to update
     *   }
     * })
     */
    upsert<T extends IdReplacementReasonUpsertArgs>(args: SelectSubset<T, IdReplacementReasonUpsertArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IdReplacementReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonCountArgs} args - Arguments to filter IdReplacementReasons to count.
     * @example
     * // Count the number of IdReplacementReasons
     * const count = await prisma.idReplacementReason.count({
     *   where: {
     *     // ... the filter for the IdReplacementReasons we want to count
     *   }
     * })
    **/
    count<T extends IdReplacementReasonCountArgs>(
      args?: Subset<T, IdReplacementReasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdReplacementReasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IdReplacementReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdReplacementReasonAggregateArgs>(args: Subset<T, IdReplacementReasonAggregateArgs>): Prisma.PrismaPromise<GetIdReplacementReasonAggregateType<T>>

    /**
     * Group by IdReplacementReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdReplacementReasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdReplacementReasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdReplacementReasonGroupByArgs['orderBy'] }
        : { orderBy?: IdReplacementReasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdReplacementReasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdReplacementReasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IdReplacementReason model
   */
  readonly fields: IdReplacementReasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IdReplacementReason.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IdReplacementReasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IdReplacementReason model
   */
  interface IdReplacementReasonFieldRefs {
    readonly id: FieldRef<"IdReplacementReason", 'String'>
    readonly clearanceRequestId: FieldRef<"IdReplacementReason", 'String'>
    readonly reason: FieldRef<"IdReplacementReason", 'String'>
    readonly description: FieldRef<"IdReplacementReason", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IdReplacementReason findUnique
   */
  export type IdReplacementReasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter, which IdReplacementReason to fetch.
     */
    where: IdReplacementReasonWhereUniqueInput
  }

  /**
   * IdReplacementReason findUniqueOrThrow
   */
  export type IdReplacementReasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter, which IdReplacementReason to fetch.
     */
    where: IdReplacementReasonWhereUniqueInput
  }

  /**
   * IdReplacementReason findFirst
   */
  export type IdReplacementReasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter, which IdReplacementReason to fetch.
     */
    where?: IdReplacementReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdReplacementReasons to fetch.
     */
    orderBy?: IdReplacementReasonOrderByWithRelationInput | IdReplacementReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdReplacementReasons.
     */
    cursor?: IdReplacementReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdReplacementReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdReplacementReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdReplacementReasons.
     */
    distinct?: IdReplacementReasonScalarFieldEnum | IdReplacementReasonScalarFieldEnum[]
  }

  /**
   * IdReplacementReason findFirstOrThrow
   */
  export type IdReplacementReasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter, which IdReplacementReason to fetch.
     */
    where?: IdReplacementReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdReplacementReasons to fetch.
     */
    orderBy?: IdReplacementReasonOrderByWithRelationInput | IdReplacementReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdReplacementReasons.
     */
    cursor?: IdReplacementReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdReplacementReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdReplacementReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdReplacementReasons.
     */
    distinct?: IdReplacementReasonScalarFieldEnum | IdReplacementReasonScalarFieldEnum[]
  }

  /**
   * IdReplacementReason findMany
   */
  export type IdReplacementReasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter, which IdReplacementReasons to fetch.
     */
    where?: IdReplacementReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdReplacementReasons to fetch.
     */
    orderBy?: IdReplacementReasonOrderByWithRelationInput | IdReplacementReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IdReplacementReasons.
     */
    cursor?: IdReplacementReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdReplacementReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdReplacementReasons.
     */
    skip?: number
    distinct?: IdReplacementReasonScalarFieldEnum | IdReplacementReasonScalarFieldEnum[]
  }

  /**
   * IdReplacementReason create
   */
  export type IdReplacementReasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * The data needed to create a IdReplacementReason.
     */
    data: XOR<IdReplacementReasonCreateInput, IdReplacementReasonUncheckedCreateInput>
  }

  /**
   * IdReplacementReason createMany
   */
  export type IdReplacementReasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IdReplacementReasons.
     */
    data: IdReplacementReasonCreateManyInput | IdReplacementReasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IdReplacementReason createManyAndReturn
   */
  export type IdReplacementReasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * The data used to create many IdReplacementReasons.
     */
    data: IdReplacementReasonCreateManyInput | IdReplacementReasonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IdReplacementReason update
   */
  export type IdReplacementReasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * The data needed to update a IdReplacementReason.
     */
    data: XOR<IdReplacementReasonUpdateInput, IdReplacementReasonUncheckedUpdateInput>
    /**
     * Choose, which IdReplacementReason to update.
     */
    where: IdReplacementReasonWhereUniqueInput
  }

  /**
   * IdReplacementReason updateMany
   */
  export type IdReplacementReasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IdReplacementReasons.
     */
    data: XOR<IdReplacementReasonUpdateManyMutationInput, IdReplacementReasonUncheckedUpdateManyInput>
    /**
     * Filter which IdReplacementReasons to update
     */
    where?: IdReplacementReasonWhereInput
    /**
     * Limit how many IdReplacementReasons to update.
     */
    limit?: number
  }

  /**
   * IdReplacementReason updateManyAndReturn
   */
  export type IdReplacementReasonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * The data used to update IdReplacementReasons.
     */
    data: XOR<IdReplacementReasonUpdateManyMutationInput, IdReplacementReasonUncheckedUpdateManyInput>
    /**
     * Filter which IdReplacementReasons to update
     */
    where?: IdReplacementReasonWhereInput
    /**
     * Limit how many IdReplacementReasons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * IdReplacementReason upsert
   */
  export type IdReplacementReasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * The filter to search for the IdReplacementReason to update in case it exists.
     */
    where: IdReplacementReasonWhereUniqueInput
    /**
     * In case the IdReplacementReason found by the `where` argument doesn't exist, create a new IdReplacementReason with this data.
     */
    create: XOR<IdReplacementReasonCreateInput, IdReplacementReasonUncheckedCreateInput>
    /**
     * In case the IdReplacementReason was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IdReplacementReasonUpdateInput, IdReplacementReasonUncheckedUpdateInput>
  }

  /**
   * IdReplacementReason delete
   */
  export type IdReplacementReasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    /**
     * Filter which IdReplacementReason to delete.
     */
    where: IdReplacementReasonWhereUniqueInput
  }

  /**
   * IdReplacementReason deleteMany
   */
  export type IdReplacementReasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdReplacementReasons to delete
     */
    where?: IdReplacementReasonWhereInput
    /**
     * Limit how many IdReplacementReasons to delete.
     */
    limit?: number
  }

  /**
   * IdReplacementReason without action
   */
  export type IdReplacementReasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
  }


  /**
   * Model TeacherClearanceReason
   */

  export type AggregateTeacherClearanceReason = {
    _count: TeacherClearanceReasonCountAggregateOutputType | null
    _min: TeacherClearanceReasonMinAggregateOutputType | null
    _max: TeacherClearanceReasonMaxAggregateOutputType | null
  }

  export type TeacherClearanceReasonMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
  }

  export type TeacherClearanceReasonMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    reason: string | null
  }

  export type TeacherClearanceReasonCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    reason: number
    _all: number
  }


  export type TeacherClearanceReasonMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
  }

  export type TeacherClearanceReasonMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
  }

  export type TeacherClearanceReasonCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    reason?: true
    _all?: true
  }

  export type TeacherClearanceReasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherClearanceReason to aggregate.
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClearanceReasons to fetch.
     */
    orderBy?: TeacherClearanceReasonOrderByWithRelationInput | TeacherClearanceReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherClearanceReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClearanceReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClearanceReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherClearanceReasons
    **/
    _count?: true | TeacherClearanceReasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherClearanceReasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherClearanceReasonMaxAggregateInputType
  }

  export type GetTeacherClearanceReasonAggregateType<T extends TeacherClearanceReasonAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherClearanceReason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherClearanceReason[P]>
      : GetScalarType<T[P], AggregateTeacherClearanceReason[P]>
  }




  export type TeacherClearanceReasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherClearanceReasonWhereInput
    orderBy?: TeacherClearanceReasonOrderByWithAggregationInput | TeacherClearanceReasonOrderByWithAggregationInput[]
    by: TeacherClearanceReasonScalarFieldEnum[] | TeacherClearanceReasonScalarFieldEnum
    having?: TeacherClearanceReasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherClearanceReasonCountAggregateInputType | true
    _min?: TeacherClearanceReasonMinAggregateInputType
    _max?: TeacherClearanceReasonMaxAggregateInputType
  }

  export type TeacherClearanceReasonGroupByOutputType = {
    id: string
    clearanceRequestId: string
    reason: string
    _count: TeacherClearanceReasonCountAggregateOutputType | null
    _min: TeacherClearanceReasonMinAggregateOutputType | null
    _max: TeacherClearanceReasonMaxAggregateOutputType | null
  }

  type GetTeacherClearanceReasonGroupByPayload<T extends TeacherClearanceReasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherClearanceReasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherClearanceReasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherClearanceReasonGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherClearanceReasonGroupByOutputType[P]>
        }
      >
    >


  export type TeacherClearanceReasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherClearanceReason"]>

  export type TeacherClearanceReasonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherClearanceReason"]>

  export type TeacherClearanceReasonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherClearanceReason"]>

  export type TeacherClearanceReasonSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    reason?: boolean
  }

  export type TeacherClearanceReasonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "reason", ExtArgs["result"]["teacherClearanceReason"]>
  export type TeacherClearanceReasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type TeacherClearanceReasonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type TeacherClearanceReasonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }

  export type $TeacherClearanceReasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherClearanceReason"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      reason: string
    }, ExtArgs["result"]["teacherClearanceReason"]>
    composites: {}
  }

  type TeacherClearanceReasonGetPayload<S extends boolean | null | undefined | TeacherClearanceReasonDefaultArgs> = $Result.GetResult<Prisma.$TeacherClearanceReasonPayload, S>

  type TeacherClearanceReasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherClearanceReasonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherClearanceReasonCountAggregateInputType | true
    }

  export interface TeacherClearanceReasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherClearanceReason'], meta: { name: 'TeacherClearanceReason' } }
    /**
     * Find zero or one TeacherClearanceReason that matches the filter.
     * @param {TeacherClearanceReasonFindUniqueArgs} args - Arguments to find a TeacherClearanceReason
     * @example
     * // Get one TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherClearanceReasonFindUniqueArgs>(args: SelectSubset<T, TeacherClearanceReasonFindUniqueArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeacherClearanceReason that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherClearanceReasonFindUniqueOrThrowArgs} args - Arguments to find a TeacherClearanceReason
     * @example
     * // Get one TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherClearanceReasonFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherClearanceReasonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherClearanceReason that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonFindFirstArgs} args - Arguments to find a TeacherClearanceReason
     * @example
     * // Get one TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherClearanceReasonFindFirstArgs>(args?: SelectSubset<T, TeacherClearanceReasonFindFirstArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherClearanceReason that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonFindFirstOrThrowArgs} args - Arguments to find a TeacherClearanceReason
     * @example
     * // Get one TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherClearanceReasonFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherClearanceReasonFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeacherClearanceReasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherClearanceReasons
     * const teacherClearanceReasons = await prisma.teacherClearanceReason.findMany()
     * 
     * // Get first 10 TeacherClearanceReasons
     * const teacherClearanceReasons = await prisma.teacherClearanceReason.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherClearanceReasonWithIdOnly = await prisma.teacherClearanceReason.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherClearanceReasonFindManyArgs>(args?: SelectSubset<T, TeacherClearanceReasonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeacherClearanceReason.
     * @param {TeacherClearanceReasonCreateArgs} args - Arguments to create a TeacherClearanceReason.
     * @example
     * // Create one TeacherClearanceReason
     * const TeacherClearanceReason = await prisma.teacherClearanceReason.create({
     *   data: {
     *     // ... data to create a TeacherClearanceReason
     *   }
     * })
     * 
     */
    create<T extends TeacherClearanceReasonCreateArgs>(args: SelectSubset<T, TeacherClearanceReasonCreateArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeacherClearanceReasons.
     * @param {TeacherClearanceReasonCreateManyArgs} args - Arguments to create many TeacherClearanceReasons.
     * @example
     * // Create many TeacherClearanceReasons
     * const teacherClearanceReason = await prisma.teacherClearanceReason.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherClearanceReasonCreateManyArgs>(args?: SelectSubset<T, TeacherClearanceReasonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherClearanceReasons and returns the data saved in the database.
     * @param {TeacherClearanceReasonCreateManyAndReturnArgs} args - Arguments to create many TeacherClearanceReasons.
     * @example
     * // Create many TeacherClearanceReasons
     * const teacherClearanceReason = await prisma.teacherClearanceReason.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherClearanceReasons and only return the `id`
     * const teacherClearanceReasonWithIdOnly = await prisma.teacherClearanceReason.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherClearanceReasonCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherClearanceReasonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeacherClearanceReason.
     * @param {TeacherClearanceReasonDeleteArgs} args - Arguments to delete one TeacherClearanceReason.
     * @example
     * // Delete one TeacherClearanceReason
     * const TeacherClearanceReason = await prisma.teacherClearanceReason.delete({
     *   where: {
     *     // ... filter to delete one TeacherClearanceReason
     *   }
     * })
     * 
     */
    delete<T extends TeacherClearanceReasonDeleteArgs>(args: SelectSubset<T, TeacherClearanceReasonDeleteArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeacherClearanceReason.
     * @param {TeacherClearanceReasonUpdateArgs} args - Arguments to update one TeacherClearanceReason.
     * @example
     * // Update one TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherClearanceReasonUpdateArgs>(args: SelectSubset<T, TeacherClearanceReasonUpdateArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeacherClearanceReasons.
     * @param {TeacherClearanceReasonDeleteManyArgs} args - Arguments to filter TeacherClearanceReasons to delete.
     * @example
     * // Delete a few TeacherClearanceReasons
     * const { count } = await prisma.teacherClearanceReason.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherClearanceReasonDeleteManyArgs>(args?: SelectSubset<T, TeacherClearanceReasonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherClearanceReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherClearanceReasons
     * const teacherClearanceReason = await prisma.teacherClearanceReason.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherClearanceReasonUpdateManyArgs>(args: SelectSubset<T, TeacherClearanceReasonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherClearanceReasons and returns the data updated in the database.
     * @param {TeacherClearanceReasonUpdateManyAndReturnArgs} args - Arguments to update many TeacherClearanceReasons.
     * @example
     * // Update many TeacherClearanceReasons
     * const teacherClearanceReason = await prisma.teacherClearanceReason.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeacherClearanceReasons and only return the `id`
     * const teacherClearanceReasonWithIdOnly = await prisma.teacherClearanceReason.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherClearanceReasonUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherClearanceReasonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeacherClearanceReason.
     * @param {TeacherClearanceReasonUpsertArgs} args - Arguments to update or create a TeacherClearanceReason.
     * @example
     * // Update or create a TeacherClearanceReason
     * const teacherClearanceReason = await prisma.teacherClearanceReason.upsert({
     *   create: {
     *     // ... data to create a TeacherClearanceReason
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherClearanceReason we want to update
     *   }
     * })
     */
    upsert<T extends TeacherClearanceReasonUpsertArgs>(args: SelectSubset<T, TeacherClearanceReasonUpsertArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeacherClearanceReasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonCountArgs} args - Arguments to filter TeacherClearanceReasons to count.
     * @example
     * // Count the number of TeacherClearanceReasons
     * const count = await prisma.teacherClearanceReason.count({
     *   where: {
     *     // ... the filter for the TeacherClearanceReasons we want to count
     *   }
     * })
    **/
    count<T extends TeacherClearanceReasonCountArgs>(
      args?: Subset<T, TeacherClearanceReasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherClearanceReasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherClearanceReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherClearanceReasonAggregateArgs>(args: Subset<T, TeacherClearanceReasonAggregateArgs>): Prisma.PrismaPromise<GetTeacherClearanceReasonAggregateType<T>>

    /**
     * Group by TeacherClearanceReason.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClearanceReasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherClearanceReasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherClearanceReasonGroupByArgs['orderBy'] }
        : { orderBy?: TeacherClearanceReasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherClearanceReasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherClearanceReasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherClearanceReason model
   */
  readonly fields: TeacherClearanceReasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherClearanceReason.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClearanceReasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherClearanceReason model
   */
  interface TeacherClearanceReasonFieldRefs {
    readonly id: FieldRef<"TeacherClearanceReason", 'String'>
    readonly clearanceRequestId: FieldRef<"TeacherClearanceReason", 'String'>
    readonly reason: FieldRef<"TeacherClearanceReason", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeacherClearanceReason findUnique
   */
  export type TeacherClearanceReasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClearanceReason to fetch.
     */
    where: TeacherClearanceReasonWhereUniqueInput
  }

  /**
   * TeacherClearanceReason findUniqueOrThrow
   */
  export type TeacherClearanceReasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClearanceReason to fetch.
     */
    where: TeacherClearanceReasonWhereUniqueInput
  }

  /**
   * TeacherClearanceReason findFirst
   */
  export type TeacherClearanceReasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClearanceReason to fetch.
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClearanceReasons to fetch.
     */
    orderBy?: TeacherClearanceReasonOrderByWithRelationInput | TeacherClearanceReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherClearanceReasons.
     */
    cursor?: TeacherClearanceReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClearanceReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClearanceReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherClearanceReasons.
     */
    distinct?: TeacherClearanceReasonScalarFieldEnum | TeacherClearanceReasonScalarFieldEnum[]
  }

  /**
   * TeacherClearanceReason findFirstOrThrow
   */
  export type TeacherClearanceReasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClearanceReason to fetch.
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClearanceReasons to fetch.
     */
    orderBy?: TeacherClearanceReasonOrderByWithRelationInput | TeacherClearanceReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherClearanceReasons.
     */
    cursor?: TeacherClearanceReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClearanceReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClearanceReasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherClearanceReasons.
     */
    distinct?: TeacherClearanceReasonScalarFieldEnum | TeacherClearanceReasonScalarFieldEnum[]
  }

  /**
   * TeacherClearanceReason findMany
   */
  export type TeacherClearanceReasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClearanceReasons to fetch.
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClearanceReasons to fetch.
     */
    orderBy?: TeacherClearanceReasonOrderByWithRelationInput | TeacherClearanceReasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherClearanceReasons.
     */
    cursor?: TeacherClearanceReasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClearanceReasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClearanceReasons.
     */
    skip?: number
    distinct?: TeacherClearanceReasonScalarFieldEnum | TeacherClearanceReasonScalarFieldEnum[]
  }

  /**
   * TeacherClearanceReason create
   */
  export type TeacherClearanceReasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherClearanceReason.
     */
    data: XOR<TeacherClearanceReasonCreateInput, TeacherClearanceReasonUncheckedCreateInput>
  }

  /**
   * TeacherClearanceReason createMany
   */
  export type TeacherClearanceReasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherClearanceReasons.
     */
    data: TeacherClearanceReasonCreateManyInput | TeacherClearanceReasonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherClearanceReason createManyAndReturn
   */
  export type TeacherClearanceReasonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * The data used to create many TeacherClearanceReasons.
     */
    data: TeacherClearanceReasonCreateManyInput | TeacherClearanceReasonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherClearanceReason update
   */
  export type TeacherClearanceReasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherClearanceReason.
     */
    data: XOR<TeacherClearanceReasonUpdateInput, TeacherClearanceReasonUncheckedUpdateInput>
    /**
     * Choose, which TeacherClearanceReason to update.
     */
    where: TeacherClearanceReasonWhereUniqueInput
  }

  /**
   * TeacherClearanceReason updateMany
   */
  export type TeacherClearanceReasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherClearanceReasons.
     */
    data: XOR<TeacherClearanceReasonUpdateManyMutationInput, TeacherClearanceReasonUncheckedUpdateManyInput>
    /**
     * Filter which TeacherClearanceReasons to update
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * Limit how many TeacherClearanceReasons to update.
     */
    limit?: number
  }

  /**
   * TeacherClearanceReason updateManyAndReturn
   */
  export type TeacherClearanceReasonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * The data used to update TeacherClearanceReasons.
     */
    data: XOR<TeacherClearanceReasonUpdateManyMutationInput, TeacherClearanceReasonUncheckedUpdateManyInput>
    /**
     * Filter which TeacherClearanceReasons to update
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * Limit how many TeacherClearanceReasons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherClearanceReason upsert
   */
  export type TeacherClearanceReasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherClearanceReason to update in case it exists.
     */
    where: TeacherClearanceReasonWhereUniqueInput
    /**
     * In case the TeacherClearanceReason found by the `where` argument doesn't exist, create a new TeacherClearanceReason with this data.
     */
    create: XOR<TeacherClearanceReasonCreateInput, TeacherClearanceReasonUncheckedCreateInput>
    /**
     * In case the TeacherClearanceReason was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherClearanceReasonUpdateInput, TeacherClearanceReasonUncheckedUpdateInput>
  }

  /**
   * TeacherClearanceReason delete
   */
  export type TeacherClearanceReasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    /**
     * Filter which TeacherClearanceReason to delete.
     */
    where: TeacherClearanceReasonWhereUniqueInput
  }

  /**
   * TeacherClearanceReason deleteMany
   */
  export type TeacherClearanceReasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherClearanceReasons to delete
     */
    where?: TeacherClearanceReasonWhereInput
    /**
     * Limit how many TeacherClearanceReasons to delete.
     */
    limit?: number
  }

  /**
   * TeacherClearanceReason without action
   */
  export type TeacherClearanceReasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    documentTypeId: string | null
    filePath: string | null
    uploadedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    documentTypeId: string | null
    filePath: string | null
    uploadedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    documentTypeId: number
    filePath: number
    uploadedAt: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    documentTypeId?: true
    filePath?: true
    uploadedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    documentTypeId?: true
    filePath?: true
    uploadedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    documentTypeId?: true
    filePath?: true
    uploadedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    clearanceRequestId: string
    documentTypeId: string
    filePath: string
    uploadedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    documentTypeId?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    documentTypeId?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    documentTypeId?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    documentTypeId?: boolean
    filePath?: boolean
    uploadedAt?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "documentTypeId" | "filePath" | "uploadedAt", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
      documentType: Prisma.$DocumentTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      documentTypeId: string
      filePath: string
      uploadedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documentType<T extends DocumentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTypeDefaultArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly clearanceRequestId: FieldRef<"Document", 'String'>
    readonly documentTypeId: FieldRef<"Document", 'String'>
    readonly filePath: FieldRef<"Document", 'String'>
    readonly uploadedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model DocumentType
   */

  export type AggregateDocumentType = {
    _count: DocumentTypeCountAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  export type DocumentTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type DocumentTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type DocumentTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    requiredFor: number
    _all: number
  }


  export type DocumentTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DocumentTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DocumentTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    requiredFor?: true
    _all?: true
  }

  export type DocumentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentType to aggregate.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTypes
    **/
    _count?: true | DocumentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type GetDocumentTypeAggregateType<T extends DocumentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentType[P]>
      : GetScalarType<T[P], AggregateDocumentType[P]>
  }




  export type DocumentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTypeWhereInput
    orderBy?: DocumentTypeOrderByWithAggregationInput | DocumentTypeOrderByWithAggregationInput[]
    by: DocumentTypeScalarFieldEnum[] | DocumentTypeScalarFieldEnum
    having?: DocumentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTypeCountAggregateInputType | true
    _min?: DocumentTypeMinAggregateInputType
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type DocumentTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    requiredFor: $Enums.FormType[]
    _count: DocumentTypeCountAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  type GetDocumentTypeGroupByPayload<T extends DocumentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    requiredFor?: boolean
    documents?: boolean | DocumentType$documentsArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    requiredFor?: boolean
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    requiredFor?: boolean
  }, ExtArgs["result"]["documentType"]>

  export type DocumentTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    requiredFor?: boolean
  }

  export type DocumentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "requiredFor", ExtArgs["result"]["documentType"]>
  export type DocumentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | DocumentType$documentsArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DocumentTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DocumentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentType"
    objects: {
      documents: Prisma.$DocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      requiredFor: $Enums.FormType[]
    }, ExtArgs["result"]["documentType"]>
    composites: {}
  }

  type DocumentTypeGetPayload<S extends boolean | null | undefined | DocumentTypeDefaultArgs> = $Result.GetResult<Prisma.$DocumentTypePayload, S>

  type DocumentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTypeCountAggregateInputType | true
    }

  export interface DocumentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentType'], meta: { name: 'DocumentType' } }
    /**
     * Find zero or one DocumentType that matches the filter.
     * @param {DocumentTypeFindUniqueArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTypeFindUniqueArgs>(args: SelectSubset<T, DocumentTypeFindUniqueArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTypeFindUniqueOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTypeFindFirstArgs>(args?: SelectSubset<T, DocumentTypeFindFirstArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTypes
     * const documentTypes = await prisma.documentType.findMany()
     * 
     * // Get first 10 DocumentTypes
     * const documentTypes = await prisma.documentType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentTypeFindManyArgs>(args?: SelectSubset<T, DocumentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentType.
     * @param {DocumentTypeCreateArgs} args - Arguments to create a DocumentType.
     * @example
     * // Create one DocumentType
     * const DocumentType = await prisma.documentType.create({
     *   data: {
     *     // ... data to create a DocumentType
     *   }
     * })
     * 
     */
    create<T extends DocumentTypeCreateArgs>(args: SelectSubset<T, DocumentTypeCreateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTypes.
     * @param {DocumentTypeCreateManyArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTypeCreateManyArgs>(args?: SelectSubset<T, DocumentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DocumentTypes and returns the data saved in the database.
     * @param {DocumentTypeCreateManyAndReturnArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DocumentType.
     * @param {DocumentTypeDeleteArgs} args - Arguments to delete one DocumentType.
     * @example
     * // Delete one DocumentType
     * const DocumentType = await prisma.documentType.delete({
     *   where: {
     *     // ... filter to delete one DocumentType
     *   }
     * })
     * 
     */
    delete<T extends DocumentTypeDeleteArgs>(args: SelectSubset<T, DocumentTypeDeleteArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentType.
     * @param {DocumentTypeUpdateArgs} args - Arguments to update one DocumentType.
     * @example
     * // Update one DocumentType
     * const documentType = await prisma.documentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTypeUpdateArgs>(args: SelectSubset<T, DocumentTypeUpdateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTypes.
     * @param {DocumentTypeDeleteManyArgs} args - Arguments to filter DocumentTypes to delete.
     * @example
     * // Delete a few DocumentTypes
     * const { count } = await prisma.documentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTypeDeleteManyArgs>(args?: SelectSubset<T, DocumentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTypeUpdateManyArgs>(args: SelectSubset<T, DocumentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes and returns the data updated in the database.
     * @param {DocumentTypeUpdateManyAndReturnArgs} args - Arguments to update many DocumentTypes.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DocumentTypes and only return the `id`
     * const documentTypeWithIdOnly = await prisma.documentType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DocumentType.
     * @param {DocumentTypeUpsertArgs} args - Arguments to update or create a DocumentType.
     * @example
     * // Update or create a DocumentType
     * const documentType = await prisma.documentType.upsert({
     *   create: {
     *     // ... data to create a DocumentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentType we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTypeUpsertArgs>(args: SelectSubset<T, DocumentTypeUpsertArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeCountArgs} args - Arguments to filter DocumentTypes to count.
     * @example
     * // Count the number of DocumentTypes
     * const count = await prisma.documentType.count({
     *   where: {
     *     // ... the filter for the DocumentTypes we want to count
     *   }
     * })
    **/
    count<T extends DocumentTypeCountArgs>(
      args?: Subset<T, DocumentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTypeAggregateArgs>(args: Subset<T, DocumentTypeAggregateArgs>): Prisma.PrismaPromise<GetDocumentTypeAggregateType<T>>

    /**
     * Group by DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTypeGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentType model
   */
  readonly fields: DocumentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends DocumentType$documentsArgs<ExtArgs> = {}>(args?: Subset<T, DocumentType$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentType model
   */
  interface DocumentTypeFieldRefs {
    readonly id: FieldRef<"DocumentType", 'String'>
    readonly name: FieldRef<"DocumentType", 'String'>
    readonly description: FieldRef<"DocumentType", 'String'>
    readonly requiredFor: FieldRef<"DocumentType", 'FormType[]'>
  }
    

  // Custom InputTypes
  /**
   * DocumentType findUnique
   */
  export type DocumentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findUniqueOrThrow
   */
  export type DocumentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findFirst
   */
  export type DocumentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findFirstOrThrow
   */
  export type DocumentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findMany
   */
  export type DocumentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTypes to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType create
   */
  export type DocumentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentType.
     */
    data: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
  }

  /**
   * DocumentType createMany
   */
  export type DocumentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType createManyAndReturn
   */
  export type DocumentTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType update
   */
  export type DocumentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentType.
     */
    data: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
    /**
     * Choose, which DocumentType to update.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType updateMany
   */
  export type DocumentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType updateManyAndReturn
   */
  export type DocumentTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType upsert
   */
  export type DocumentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentType to update in case it exists.
     */
    where: DocumentTypeWhereUniqueInput
    /**
     * In case the DocumentType found by the `where` argument doesn't exist, create a new DocumentType with this data.
     */
    create: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
    /**
     * In case the DocumentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
  }

  /**
   * DocumentType delete
   */
  export type DocumentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter which DocumentType to delete.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType deleteMany
   */
  export type DocumentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTypes to delete
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to delete.
     */
    limit?: number
  }

  /**
   * DocumentType.documents
   */
  export type DocumentType$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * DocumentType without action
   */
  export type DocumentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
  }


  /**
   * Model Certificate
   */

  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    filePath: string | null
    qrCode: string | null
    issuedAt: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    filePath: string | null
    qrCode: string | null
    issuedAt: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    filePath: number
    qrCode: number
    signatures: number
    issuedAt: number
    _all: number
  }


  export type CertificateMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    filePath?: true
    qrCode?: true
    issuedAt?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    filePath?: true
    qrCode?: true
    issuedAt?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    filePath?: true
    qrCode?: true
    signatures?: true
    issuedAt?: true
    _all?: true
  }

  export type CertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificate to aggregate.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }




  export type CertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithAggregationInput | CertificateOrderByWithAggregationInput[]
    by: CertificateScalarFieldEnum[] | CertificateScalarFieldEnum
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }

  export type CertificateGroupByOutputType = {
    id: string
    clearanceRequestId: string
    filePath: string
    qrCode: string
    signatures: JsonValue | null
    issuedAt: Date
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      >
    >


  export type CertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    filePath?: boolean
    qrCode?: boolean
    signatures?: boolean
    issuedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    filePath?: boolean
    qrCode?: boolean
    signatures?: boolean
    issuedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    filePath?: boolean
    qrCode?: boolean
    signatures?: boolean
    issuedAt?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    filePath?: boolean
    qrCode?: boolean
    signatures?: boolean
    issuedAt?: boolean
  }

  export type CertificateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "filePath" | "qrCode" | "signatures" | "issuedAt", ExtArgs["result"]["certificate"]>
  export type CertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
  }

  export type $CertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificate"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      filePath: string
      qrCode: string
      signatures: Prisma.JsonValue | null
      issuedAt: Date
    }, ExtArgs["result"]["certificate"]>
    composites: {}
  }

  type CertificateGetPayload<S extends boolean | null | undefined | CertificateDefaultArgs> = $Result.GetResult<Prisma.$CertificatePayload, S>

  type CertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateCountAggregateInputType | true
    }

  export interface CertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificate'], meta: { name: 'Certificate' } }
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateFindUniqueArgs>(args: SelectSubset<T, CertificateFindUniqueArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateFindUniqueOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateFindFirstArgs>(args?: SelectSubset<T, CertificateFindFirstArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateFindManyArgs>(args?: SelectSubset<T, CertificateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
     */
    create<T extends CertificateCreateArgs>(args: SelectSubset<T, CertificateCreateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateCreateManyArgs>(args?: SelectSubset<T, CertificateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Certificates and returns the data saved in the database.
     * @param {CertificateCreateManyAndReturnArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
     */
    delete<T extends CertificateDeleteArgs>(args: SelectSubset<T, CertificateDeleteArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateUpdateArgs>(args: SelectSubset<T, CertificateUpdateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDeleteManyArgs>(args?: SelectSubset<T, CertificateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateUpdateManyArgs>(args: SelectSubset<T, CertificateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates and returns the data updated in the database.
     * @param {CertificateUpdateManyAndReturnArgs} args - Arguments to update many Certificates.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
     */
    upsert<T extends CertificateUpsertArgs>(args: SelectSubset<T, CertificateUpsertArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): Prisma.PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificate model
   */
  readonly fields: CertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificate model
   */
  interface CertificateFieldRefs {
    readonly id: FieldRef<"Certificate", 'String'>
    readonly clearanceRequestId: FieldRef<"Certificate", 'String'>
    readonly filePath: FieldRef<"Certificate", 'String'>
    readonly qrCode: FieldRef<"Certificate", 'String'>
    readonly signatures: FieldRef<"Certificate", 'Json'>
    readonly issuedAt: FieldRef<"Certificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findUniqueOrThrow
   */
  export type CertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findFirstOrThrow
   */
  export type CertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate create
   */
  export type CertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a Certificate.
     */
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }

  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certificate createManyAndReturn
   */
  export type CertificateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate update
   */
  export type CertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a Certificate.
     */
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificate updateManyAndReturn
   */
  export type CertificateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     */
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     */
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }

  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter which Certificate to delete.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificate without action
   */
  export type CertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clearanceRequestId: string | null
    title: string | null
    message: string | null
    emailSubject: string | null
    type: $Enums.NotificationType | null
    status: $Enums.NotificationStatus | null
    read: boolean | null
    sentAt: Date | null
    emailSentAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clearanceRequestId: string | null
    title: string | null
    message: string | null
    emailSubject: string | null
    type: $Enums.NotificationType | null
    status: $Enums.NotificationStatus | null
    read: boolean | null
    sentAt: Date | null
    emailSentAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    clearanceRequestId: number
    title: number
    message: number
    emailSubject: number
    type: number
    status: number
    read: number
    sentAt: number
    emailSentAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    title?: true
    message?: true
    emailSubject?: true
    type?: true
    status?: true
    read?: true
    sentAt?: true
    emailSentAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    title?: true
    message?: true
    emailSubject?: true
    type?: true
    status?: true
    read?: true
    sentAt?: true
    emailSentAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    title?: true
    message?: true
    emailSubject?: true
    type?: true
    status?: true
    read?: true
    sentAt?: true
    emailSentAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    clearanceRequestId: string | null
    title: string
    message: string
    emailSubject: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read: boolean
    sentAt: Date
    emailSentAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    title?: boolean
    message?: boolean
    emailSubject?: boolean
    type?: boolean
    status?: boolean
    read?: boolean
    sentAt?: boolean
    emailSentAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    title?: boolean
    message?: boolean
    emailSubject?: boolean
    type?: boolean
    status?: boolean
    read?: boolean
    sentAt?: boolean
    emailSentAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    title?: boolean
    message?: boolean
    emailSubject?: boolean
    type?: boolean
    status?: boolean
    read?: boolean
    sentAt?: boolean
    emailSentAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    title?: boolean
    message?: boolean
    emailSubject?: boolean
    type?: boolean
    status?: boolean
    read?: boolean
    sentAt?: boolean
    emailSentAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "clearanceRequestId" | "title" | "message" | "emailSubject" | "type" | "status" | "read" | "sentAt" | "emailSentAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | Notification$clearanceRequestArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      clearanceRequestId: string | null
      title: string
      message: string
      emailSubject: string | null
      type: $Enums.NotificationType
      status: $Enums.NotificationStatus
      read: boolean
      sentAt: Date
      emailSentAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clearanceRequest<T extends Notification$clearanceRequestArgs<ExtArgs> = {}>(args?: Subset<T, Notification$clearanceRequestArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly clearanceRequestId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly emailSubject: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly status: FieldRef<"Notification", 'NotificationStatus'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly emailSentAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.clearanceRequest
   */
  export type Notification$clearanceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    where?: ClearanceRequestWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clearanceRequestId: string | null
    adminId: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clearanceRequestId: string | null
    adminId: string | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    clearanceRequestId: number
    adminId: number
    action: number
    details: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    adminId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    adminId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    clearanceRequestId?: true
    adminId?: true
    action?: true
    details?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    clearanceRequestId: string | null
    adminId: string | null
    action: string
    details: string
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    adminId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    adminId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    adminId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    clearanceRequestId?: boolean
    adminId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "clearanceRequestId" | "adminId" | "action" | "details" | "timestamp", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    clearanceRequest?: boolean | AuditLog$clearanceRequestArgs<ExtArgs>
    admin?: boolean | AuditLog$adminArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      clearanceRequestId: string | null
      adminId: string | null
      action: string
      details: string
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clearanceRequest<T extends AuditLog$clearanceRequestArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$clearanceRequestArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    admin<T extends AuditLog$adminArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly clearanceRequestId: FieldRef<"AuditLog", 'String'>
    readonly adminId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.clearanceRequest
   */
  export type AuditLog$clearanceRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    where?: ClearanceRequestWhereInput
  }

  /**
   * AuditLog.admin
   */
  export type AuditLog$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    firstName: string | null
    fatherName: string | null
    grandfatherName: string | null
    email: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    isFirstLogin: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    loginAttempts: number | null
    isLocked: boolean | null
    lockedUntil: Date | null
    lockedAt: Date | null
    emailVerified: boolean | null
    emailToken: string | null
    emailTokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    browserFingerprint: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    passwordHash: string | null
    firstName: string | null
    fatherName: string | null
    grandfatherName: string | null
    email: string | null
    role: $Enums.UserRole | null
    status: $Enums.UserStatus | null
    isFirstLogin: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    loginAttempts: number | null
    isLocked: boolean | null
    lockedUntil: Date | null
    lockedAt: Date | null
    emailVerified: boolean | null
    emailToken: string | null
    emailTokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    browserFingerprint: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    passwordHash: number
    firstName: number
    fatherName: number
    grandfatherName: number
    email: number
    role: number
    status: number
    isFirstLogin: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    loginAttempts: number
    isLocked: number
    lockedUntil: number
    lockedAt: number
    emailVerified: number
    emailToken: number
    emailTokenExpiry: number
    resetToken: number
    resetTokenExpiry: number
    browserFingerprint: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    loginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    loginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    firstName?: true
    fatherName?: true
    grandfatherName?: true
    email?: true
    role?: true
    status?: true
    isFirstLogin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    loginAttempts?: true
    isLocked?: true
    lockedUntil?: true
    lockedAt?: true
    emailVerified?: true
    emailToken?: true
    emailTokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    browserFingerprint?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    firstName?: true
    fatherName?: true
    grandfatherName?: true
    email?: true
    role?: true
    status?: true
    isFirstLogin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    loginAttempts?: true
    isLocked?: true
    lockedUntil?: true
    lockedAt?: true
    emailVerified?: true
    emailToken?: true
    emailTokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    browserFingerprint?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    passwordHash?: true
    firstName?: true
    fatherName?: true
    grandfatherName?: true
    email?: true
    role?: true
    status?: true
    isFirstLogin?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    loginAttempts?: true
    isLocked?: true
    lockedUntil?: true
    lockedAt?: true
    emailVerified?: true
    emailToken?: true
    emailTokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    browserFingerprint?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email: string | null
    role: $Enums.UserRole
    status: $Enums.UserStatus
    isFirstLogin: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    loginAttempts: number
    isLocked: boolean
    lockedUntil: Date | null
    lockedAt: Date | null
    emailVerified: boolean
    emailToken: string | null
    emailTokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    browserFingerprint: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    firstName?: boolean
    fatherName?: boolean
    grandfatherName?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    isFirstLogin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginAttempts?: boolean
    isLocked?: boolean
    lockedUntil?: boolean
    lockedAt?: boolean
    emailVerified?: boolean
    emailToken?: boolean
    emailTokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    browserFingerprint?: boolean
    student?: boolean | User$studentArgs<ExtArgs>
    teacher?: boolean | User$teacherArgs<ExtArgs>
    approver?: boolean | User$approverArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    clearanceRequests?: boolean | User$clearanceRequestsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    firstName?: boolean
    fatherName?: boolean
    grandfatherName?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    isFirstLogin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginAttempts?: boolean
    isLocked?: boolean
    lockedUntil?: boolean
    lockedAt?: boolean
    emailVerified?: boolean
    emailToken?: boolean
    emailTokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    browserFingerprint?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    firstName?: boolean
    fatherName?: boolean
    grandfatherName?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    isFirstLogin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginAttempts?: boolean
    isLocked?: boolean
    lockedUntil?: boolean
    lockedAt?: boolean
    emailVerified?: boolean
    emailToken?: boolean
    emailTokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    browserFingerprint?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    passwordHash?: boolean
    firstName?: boolean
    fatherName?: boolean
    grandfatherName?: boolean
    email?: boolean
    role?: boolean
    status?: boolean
    isFirstLogin?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginAttempts?: boolean
    isLocked?: boolean
    lockedUntil?: boolean
    lockedAt?: boolean
    emailVerified?: boolean
    emailToken?: boolean
    emailTokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    browserFingerprint?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "passwordHash" | "firstName" | "fatherName" | "grandfatherName" | "email" | "role" | "status" | "isFirstLogin" | "lastLogin" | "createdAt" | "updatedAt" | "loginAttempts" | "isLocked" | "lockedUntil" | "lockedAt" | "emailVerified" | "emailToken" | "emailTokenExpiry" | "resetToken" | "resetTokenExpiry" | "browserFingerprint", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | User$studentArgs<ExtArgs>
    teacher?: boolean | User$teacherArgs<ExtArgs>
    approver?: boolean | User$approverArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    clearanceRequests?: boolean | User$clearanceRequestsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs> | null
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
      approver: Prisma.$ApproverPayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      clearanceRequests: Prisma.$ClearanceRequestPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      passwordHash: string
      firstName: string
      fatherName: string
      grandfatherName: string
      email: string | null
      role: $Enums.UserRole
      status: $Enums.UserStatus
      isFirstLogin: boolean
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
      loginAttempts: number
      isLocked: boolean
      lockedUntil: Date | null
      lockedAt: Date | null
      emailVerified: boolean
      emailToken: string | null
      emailTokenExpiry: Date | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      browserFingerprint: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teacher<T extends User$teacherArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approver<T extends User$approverArgs<ExtArgs> = {}>(args?: Subset<T, User$approverArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clearanceRequests<T extends User$clearanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$clearanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly fatherName: FieldRef<"User", 'String'>
    readonly grandfatherName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly isFirstLogin: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly loginAttempts: FieldRef<"User", 'Int'>
    readonly isLocked: FieldRef<"User", 'Boolean'>
    readonly lockedUntil: FieldRef<"User", 'DateTime'>
    readonly lockedAt: FieldRef<"User", 'DateTime'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailToken: FieldRef<"User", 'String'>
    readonly emailTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly browserFingerprint: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * User.teacher
   */
  export type User$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * User.approver
   */
  export type User$approverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    where?: ApproverWhereInput
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.clearanceRequests
   */
  export type User$clearanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    where?: ClearanceRequestWhereInput
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    cursor?: ClearanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClearanceRequestScalarFieldEnum | ClearanceRequestScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    currentYear: number | null
    semester: number | null
  }

  export type StudentSumAggregateOutputType = {
    currentYear: number | null
    semester: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    startDate: Date | null
    programId: string | null
    currentYear: number | null
    semester: number | null
    academicStatus: $Enums.AcademicStatus | null
    departmentId: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    startDate: Date | null
    programId: string | null
    currentYear: number | null
    semester: number | null
    academicStatus: $Enums.AcademicStatus | null
    departmentId: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    userId: number
    startDate: number
    programId: number
    currentYear: number
    semester: number
    academicStatus: number
    departmentId: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    currentYear?: true
    semester?: true
  }

  export type StudentSumAggregateInputType = {
    currentYear?: true
    semester?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    userId?: true
    startDate?: true
    programId?: true
    currentYear?: true
    semester?: true
    academicStatus?: true
    departmentId?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    userId?: true
    startDate?: true
    programId?: true
    currentYear?: true
    semester?: true
    academicStatus?: true
    departmentId?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    userId?: true
    startDate?: true
    programId?: true
    currentYear?: true
    semester?: true
    academicStatus?: true
    departmentId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    userId: string
    startDate: Date
    programId: string
    currentYear: number
    semester: number
    academicStatus: $Enums.AcademicStatus
    departmentId: string
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startDate?: boolean
    programId?: boolean
    currentYear?: boolean
    semester?: boolean
    academicStatus?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startDate?: boolean
    programId?: boolean
    currentYear?: boolean
    semester?: boolean
    academicStatus?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    startDate?: boolean
    programId?: boolean
    currentYear?: boolean
    semester?: boolean
    academicStatus?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    userId?: boolean
    startDate?: boolean
    programId?: boolean
    currentYear?: boolean
    semester?: boolean
    academicStatus?: boolean
    departmentId?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "startDate" | "programId" | "currentYear" | "semester" | "academicStatus" | "departmentId", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      program: Prisma.$ProgramPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      startDate: Date
      programId: string
      currentYear: number
      semester: number
      academicStatus: $Enums.AcademicStatus
      departmentId: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly userId: FieldRef<"Student", 'String'>
    readonly startDate: FieldRef<"Student", 'DateTime'>
    readonly programId: FieldRef<"Student", 'String'>
    readonly currentYear: FieldRef<"Student", 'Int'>
    readonly semester: FieldRef<"Student", 'Int'>
    readonly academicStatus: FieldRef<"Student", 'AcademicStatus'>
    readonly departmentId: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    yearsOfService: number | null
  }

  export type TeacherSumAggregateOutputType = {
    yearsOfService: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    userId: string | null
    hireDate: Date | null
    position: string | null
    departmentId: string | null
    employmentStatus: $Enums.EmploymentStatus | null
    yearsOfService: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    hireDate: Date | null
    position: string | null
    departmentId: string | null
    employmentStatus: $Enums.EmploymentStatus | null
    yearsOfService: number | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    userId: number
    hireDate: number
    position: number
    departmentId: number
    employmentStatus: number
    yearsOfService: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    yearsOfService?: true
  }

  export type TeacherSumAggregateInputType = {
    yearsOfService?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    userId?: true
    hireDate?: true
    position?: true
    departmentId?: true
    employmentStatus?: true
    yearsOfService?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    userId?: true
    hireDate?: true
    position?: true
    departmentId?: true
    employmentStatus?: true
    yearsOfService?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    userId?: true
    hireDate?: true
    position?: true
    departmentId?: true
    employmentStatus?: true
    yearsOfService?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    userId: string
    hireDate: Date
    position: string
    departmentId: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService: number
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hireDate?: boolean
    position?: boolean
    departmentId?: boolean
    employmentStatus?: boolean
    yearsOfService?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hireDate?: boolean
    position?: boolean
    departmentId?: boolean
    employmentStatus?: boolean
    yearsOfService?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hireDate?: boolean
    position?: boolean
    departmentId?: boolean
    employmentStatus?: boolean
    yearsOfService?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    userId?: boolean
    hireDate?: boolean
    position?: boolean
    departmentId?: boolean
    employmentStatus?: boolean
    yearsOfService?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "hireDate" | "position" | "departmentId" | "employmentStatus" | "yearsOfService", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      hireDate: Date
      position: string
      departmentId: string
      employmentStatus: $Enums.EmploymentStatus
      yearsOfService: number
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly userId: FieldRef<"Teacher", 'String'>
    readonly hireDate: FieldRef<"Teacher", 'DateTime'>
    readonly position: FieldRef<"Teacher", 'String'>
    readonly departmentId: FieldRef<"Teacher", 'String'>
    readonly employmentStatus: FieldRef<"Teacher", 'EmploymentStatus'>
    readonly yearsOfService: FieldRef<"Teacher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    userId: number
    permissions: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    userId?: true
    permissions?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    userId: string
    permissions: $Enums.Permission[]
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    auditLogs?: boolean | Admin$auditLogsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissions?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    userId?: boolean
    permissions?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "permissions", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    auditLogs?: boolean | Admin$auditLogsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      permissions: $Enums.Permission[]
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    auditLogs<T extends Admin$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Admin$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly userId: FieldRef<"Admin", 'String'>
    readonly permissions: FieldRef<"Admin", 'Permission[]'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.auditLogs
   */
  export type Admin$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    students?: boolean | Department$studentsArgs<ExtArgs>
    approvers?: boolean | Department$approversArgs<ExtArgs>
    offices?: boolean | Department$officesArgs<ExtArgs>
    programs?: boolean | Department$programsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    students?: boolean | Department$studentsArgs<ExtArgs>
    approvers?: boolean | Department$approversArgs<ExtArgs>
    offices?: boolean | Department$officesArgs<ExtArgs>
    programs?: boolean | Department$programsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      teachers: Prisma.$TeacherPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      approvers: Prisma.$ApproverPayload<ExtArgs>[]
      offices: Prisma.$OfficePayload<ExtArgs>[]
      programs: Prisma.$ProgramPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teachers<T extends Department$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Department$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Department$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Department$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvers<T extends Department$approversArgs<ExtArgs> = {}>(args?: Subset<T, Department$approversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    offices<T extends Department$officesArgs<ExtArgs> = {}>(args?: Subset<T, Department$officesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    programs<T extends Department$programsArgs<ExtArgs> = {}>(args?: Subset<T, Department$programsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.teachers
   */
  export type Department$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Department.students
   */
  export type Department$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Department.approvers
   */
  export type Department$approversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    where?: ApproverWhereInput
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    cursor?: ApproverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApproverScalarFieldEnum | ApproverScalarFieldEnum[]
  }

  /**
   * Department.offices
   */
  export type Department$officesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    where?: OfficeWhereInput
    orderBy?: OfficeOrderByWithRelationInput | OfficeOrderByWithRelationInput[]
    cursor?: OfficeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfficeScalarFieldEnum | OfficeScalarFieldEnum[]
  }

  /**
   * Department.programs
   */
  export type Department$programsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    cursor?: ProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Program
   */

  export type AggregateProgram = {
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  export type ProgramMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ProgramType | null
    category: $Enums.ProgramCategory | null
    departmentId: string | null
    description: string | null
  }

  export type ProgramMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ProgramType | null
    category: $Enums.ProgramCategory | null
    departmentId: string | null
    description: string | null
  }

  export type ProgramCountAggregateOutputType = {
    id: number
    name: number
    type: number
    category: number
    departmentId: number
    description: number
    _all: number
  }


  export type ProgramMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    departmentId?: true
    description?: true
  }

  export type ProgramMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    departmentId?: true
    description?: true
  }

  export type ProgramCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    departmentId?: true
    description?: true
    _all?: true
  }

  export type ProgramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Program to aggregate.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Programs
    **/
    _count?: true | ProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgramMaxAggregateInputType
  }

  export type GetProgramAggregateType<T extends ProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgram[P]>
      : GetScalarType<T[P], AggregateProgram[P]>
  }




  export type ProgramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgramWhereInput
    orderBy?: ProgramOrderByWithAggregationInput | ProgramOrderByWithAggregationInput[]
    by: ProgramScalarFieldEnum[] | ProgramScalarFieldEnum
    having?: ProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgramCountAggregateInputType | true
    _min?: ProgramMinAggregateInputType
    _max?: ProgramMaxAggregateInputType
  }

  export type ProgramGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description: string | null
    _count: ProgramCountAggregateOutputType | null
    _min: ProgramMinAggregateOutputType | null
    _max: ProgramMaxAggregateOutputType | null
  }

  type GetProgramGroupByPayload<T extends ProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgramGroupByOutputType[P]>
            : GetScalarType<T[P], ProgramGroupByOutputType[P]>
        }
      >
    >


  export type ProgramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    departmentId?: boolean
    description?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    students?: boolean | Program$studentsArgs<ExtArgs>
    workflowRules?: boolean | Program$workflowRulesArgs<ExtArgs>
    clearanceRequests?: boolean | Program$clearanceRequestsArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    departmentId?: boolean
    description?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    departmentId?: boolean
    description?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["program"]>

  export type ProgramSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    departmentId?: boolean
    description?: boolean
  }

  export type ProgramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "category" | "departmentId" | "description", ExtArgs["result"]["program"]>
  export type ProgramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    students?: boolean | Program$studentsArgs<ExtArgs>
    workflowRules?: boolean | Program$workflowRulesArgs<ExtArgs>
    clearanceRequests?: boolean | Program$clearanceRequestsArgs<ExtArgs>
    _count?: boolean | ProgramCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type ProgramIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $ProgramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Program"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      students: Prisma.$StudentPayload<ExtArgs>[]
      workflowRules: Prisma.$WorkflowRulePayload<ExtArgs>[]
      clearanceRequests: Prisma.$ClearanceRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.ProgramType
      category: $Enums.ProgramCategory
      departmentId: string
      description: string | null
    }, ExtArgs["result"]["program"]>
    composites: {}
  }

  type ProgramGetPayload<S extends boolean | null | undefined | ProgramDefaultArgs> = $Result.GetResult<Prisma.$ProgramPayload, S>

  type ProgramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProgramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProgramCountAggregateInputType | true
    }

  export interface ProgramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Program'], meta: { name: 'Program' } }
    /**
     * Find zero or one Program that matches the filter.
     * @param {ProgramFindUniqueArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgramFindUniqueArgs>(args: SelectSubset<T, ProgramFindUniqueArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Program that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProgramFindUniqueOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgramFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgramFindFirstArgs>(args?: SelectSubset<T, ProgramFindFirstArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Program that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindFirstOrThrowArgs} args - Arguments to find a Program
     * @example
     * // Get one Program
     * const program = await prisma.program.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgramFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgramFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Programs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Programs
     * const programs = await prisma.program.findMany()
     * 
     * // Get first 10 Programs
     * const programs = await prisma.program.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const programWithIdOnly = await prisma.program.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProgramFindManyArgs>(args?: SelectSubset<T, ProgramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Program.
     * @param {ProgramCreateArgs} args - Arguments to create a Program.
     * @example
     * // Create one Program
     * const Program = await prisma.program.create({
     *   data: {
     *     // ... data to create a Program
     *   }
     * })
     * 
     */
    create<T extends ProgramCreateArgs>(args: SelectSubset<T, ProgramCreateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Programs.
     * @param {ProgramCreateManyArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgramCreateManyArgs>(args?: SelectSubset<T, ProgramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Programs and returns the data saved in the database.
     * @param {ProgramCreateManyAndReturnArgs} args - Arguments to create many Programs.
     * @example
     * // Create many Programs
     * const program = await prisma.program.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgramCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Program.
     * @param {ProgramDeleteArgs} args - Arguments to delete one Program.
     * @example
     * // Delete one Program
     * const Program = await prisma.program.delete({
     *   where: {
     *     // ... filter to delete one Program
     *   }
     * })
     * 
     */
    delete<T extends ProgramDeleteArgs>(args: SelectSubset<T, ProgramDeleteArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Program.
     * @param {ProgramUpdateArgs} args - Arguments to update one Program.
     * @example
     * // Update one Program
     * const program = await prisma.program.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgramUpdateArgs>(args: SelectSubset<T, ProgramUpdateArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Programs.
     * @param {ProgramDeleteManyArgs} args - Arguments to filter Programs to delete.
     * @example
     * // Delete a few Programs
     * const { count } = await prisma.program.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgramDeleteManyArgs>(args?: SelectSubset<T, ProgramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgramUpdateManyArgs>(args: SelectSubset<T, ProgramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Programs and returns the data updated in the database.
     * @param {ProgramUpdateManyAndReturnArgs} args - Arguments to update many Programs.
     * @example
     * // Update many Programs
     * const program = await prisma.program.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Programs and only return the `id`
     * const programWithIdOnly = await prisma.program.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProgramUpdateManyAndReturnArgs>(args: SelectSubset<T, ProgramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Program.
     * @param {ProgramUpsertArgs} args - Arguments to update or create a Program.
     * @example
     * // Update or create a Program
     * const program = await prisma.program.upsert({
     *   create: {
     *     // ... data to create a Program
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Program we want to update
     *   }
     * })
     */
    upsert<T extends ProgramUpsertArgs>(args: SelectSubset<T, ProgramUpsertArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Programs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramCountArgs} args - Arguments to filter Programs to count.
     * @example
     * // Count the number of Programs
     * const count = await prisma.program.count({
     *   where: {
     *     // ... the filter for the Programs we want to count
     *   }
     * })
    **/
    count<T extends ProgramCountArgs>(
      args?: Subset<T, ProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgramAggregateArgs>(args: Subset<T, ProgramAggregateArgs>): Prisma.PrismaPromise<GetProgramAggregateType<T>>

    /**
     * Group by Program.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgramGroupByArgs['orderBy'] }
        : { orderBy?: ProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Program model
   */
  readonly fields: ProgramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Program.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students<T extends Program$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Program$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowRules<T extends Program$workflowRulesArgs<ExtArgs> = {}>(args?: Subset<T, Program$workflowRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clearanceRequests<T extends Program$clearanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Program$clearanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Program model
   */
  interface ProgramFieldRefs {
    readonly id: FieldRef<"Program", 'String'>
    readonly name: FieldRef<"Program", 'String'>
    readonly type: FieldRef<"Program", 'ProgramType'>
    readonly category: FieldRef<"Program", 'ProgramCategory'>
    readonly departmentId: FieldRef<"Program", 'String'>
    readonly description: FieldRef<"Program", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Program findUnique
   */
  export type ProgramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findUniqueOrThrow
   */
  export type ProgramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program findFirst
   */
  export type ProgramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findFirstOrThrow
   */
  export type ProgramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Program to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Programs.
     */
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program findMany
   */
  export type ProgramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter, which Programs to fetch.
     */
    where?: ProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Programs to fetch.
     */
    orderBy?: ProgramOrderByWithRelationInput | ProgramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Programs.
     */
    cursor?: ProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Programs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Programs.
     */
    skip?: number
    distinct?: ProgramScalarFieldEnum | ProgramScalarFieldEnum[]
  }

  /**
   * Program create
   */
  export type ProgramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to create a Program.
     */
    data: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
  }

  /**
   * Program createMany
   */
  export type ProgramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Program createManyAndReturn
   */
  export type ProgramCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to create many Programs.
     */
    data: ProgramCreateManyInput | ProgramCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program update
   */
  export type ProgramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The data needed to update a Program.
     */
    data: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
    /**
     * Choose, which Program to update.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program updateMany
   */
  export type ProgramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
  }

  /**
   * Program updateManyAndReturn
   */
  export type ProgramUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * The data used to update Programs.
     */
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyInput>
    /**
     * Filter which Programs to update
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Program upsert
   */
  export type ProgramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * The filter to search for the Program to update in case it exists.
     */
    where: ProgramWhereUniqueInput
    /**
     * In case the Program found by the `where` argument doesn't exist, create a new Program with this data.
     */
    create: XOR<ProgramCreateInput, ProgramUncheckedCreateInput>
    /**
     * In case the Program was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgramUpdateInput, ProgramUncheckedUpdateInput>
  }

  /**
   * Program delete
   */
  export type ProgramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    /**
     * Filter which Program to delete.
     */
    where: ProgramWhereUniqueInput
  }

  /**
   * Program deleteMany
   */
  export type ProgramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Programs to delete
     */
    where?: ProgramWhereInput
    /**
     * Limit how many Programs to delete.
     */
    limit?: number
  }

  /**
   * Program.students
   */
  export type Program$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Program.workflowRules
   */
  export type Program$workflowRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    where?: WorkflowRuleWhereInput
    orderBy?: WorkflowRuleOrderByWithRelationInput | WorkflowRuleOrderByWithRelationInput[]
    cursor?: WorkflowRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowRuleScalarFieldEnum | WorkflowRuleScalarFieldEnum[]
  }

  /**
   * Program.clearanceRequests
   */
  export type Program$clearanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    where?: ClearanceRequestWhereInput
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    cursor?: ClearanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClearanceRequestScalarFieldEnum | ClearanceRequestScalarFieldEnum[]
  }

  /**
   * Program without action
   */
  export type ProgramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
  }


  /**
   * Model Office
   */

  export type AggregateOffice = {
    _count: OfficeCountAggregateOutputType | null
    _min: OfficeMinAggregateOutputType | null
    _max: OfficeMaxAggregateOutputType | null
  }

  export type OfficeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    departmentId: string | null
  }

  export type OfficeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    departmentId: string | null
  }

  export type OfficeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    departmentId: number
    _all: number
  }


  export type OfficeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    departmentId?: true
  }

  export type OfficeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    departmentId?: true
  }

  export type OfficeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    departmentId?: true
    _all?: true
  }

  export type OfficeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Office to aggregate.
     */
    where?: OfficeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficeOrderByWithRelationInput | OfficeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfficeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offices
    **/
    _count?: true | OfficeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficeMaxAggregateInputType
  }

  export type GetOfficeAggregateType<T extends OfficeAggregateArgs> = {
        [P in keyof T & keyof AggregateOffice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffice[P]>
      : GetScalarType<T[P], AggregateOffice[P]>
  }




  export type OfficeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficeWhereInput
    orderBy?: OfficeOrderByWithAggregationInput | OfficeOrderByWithAggregationInput[]
    by: OfficeScalarFieldEnum[] | OfficeScalarFieldEnum
    having?: OfficeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficeCountAggregateInputType | true
    _min?: OfficeMinAggregateInputType
    _max?: OfficeMaxAggregateInputType
  }

  export type OfficeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    departmentId: string | null
    _count: OfficeCountAggregateOutputType | null
    _min: OfficeMinAggregateOutputType | null
    _max: OfficeMaxAggregateOutputType | null
  }

  type GetOfficeGroupByPayload<T extends OfficeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfficeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficeGroupByOutputType[P]>
            : GetScalarType<T[P], OfficeGroupByOutputType[P]>
        }
      >
    >


  export type OfficeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    departmentId?: boolean
    department?: boolean | Office$departmentArgs<ExtArgs>
    approvers?: boolean | Office$approversArgs<ExtArgs>
    workflowSteps?: boolean | Office$workflowStepsArgs<ExtArgs>
    _count?: boolean | OfficeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["office"]>

  export type OfficeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    departmentId?: boolean
    department?: boolean | Office$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["office"]>

  export type OfficeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    departmentId?: boolean
    department?: boolean | Office$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["office"]>

  export type OfficeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    departmentId?: boolean
  }

  export type OfficeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "departmentId", ExtArgs["result"]["office"]>
  export type OfficeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | Office$departmentArgs<ExtArgs>
    approvers?: boolean | Office$approversArgs<ExtArgs>
    workflowSteps?: boolean | Office$workflowStepsArgs<ExtArgs>
    _count?: boolean | OfficeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OfficeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | Office$departmentArgs<ExtArgs>
  }
  export type OfficeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | Office$departmentArgs<ExtArgs>
  }

  export type $OfficePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Office"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      approvers: Prisma.$ApproverPayload<ExtArgs>[]
      workflowSteps: Prisma.$WorkflowStepPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      departmentId: string | null
    }, ExtArgs["result"]["office"]>
    composites: {}
  }

  type OfficeGetPayload<S extends boolean | null | undefined | OfficeDefaultArgs> = $Result.GetResult<Prisma.$OfficePayload, S>

  type OfficeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OfficeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OfficeCountAggregateInputType | true
    }

  export interface OfficeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Office'], meta: { name: 'Office' } }
    /**
     * Find zero or one Office that matches the filter.
     * @param {OfficeFindUniqueArgs} args - Arguments to find a Office
     * @example
     * // Get one Office
     * const office = await prisma.office.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfficeFindUniqueArgs>(args: SelectSubset<T, OfficeFindUniqueArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Office that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OfficeFindUniqueOrThrowArgs} args - Arguments to find a Office
     * @example
     * // Get one Office
     * const office = await prisma.office.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfficeFindUniqueOrThrowArgs>(args: SelectSubset<T, OfficeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Office that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeFindFirstArgs} args - Arguments to find a Office
     * @example
     * // Get one Office
     * const office = await prisma.office.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfficeFindFirstArgs>(args?: SelectSubset<T, OfficeFindFirstArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Office that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeFindFirstOrThrowArgs} args - Arguments to find a Office
     * @example
     * // Get one Office
     * const office = await prisma.office.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfficeFindFirstOrThrowArgs>(args?: SelectSubset<T, OfficeFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offices
     * const offices = await prisma.office.findMany()
     * 
     * // Get first 10 Offices
     * const offices = await prisma.office.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const officeWithIdOnly = await prisma.office.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfficeFindManyArgs>(args?: SelectSubset<T, OfficeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Office.
     * @param {OfficeCreateArgs} args - Arguments to create a Office.
     * @example
     * // Create one Office
     * const Office = await prisma.office.create({
     *   data: {
     *     // ... data to create a Office
     *   }
     * })
     * 
     */
    create<T extends OfficeCreateArgs>(args: SelectSubset<T, OfficeCreateArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Offices.
     * @param {OfficeCreateManyArgs} args - Arguments to create many Offices.
     * @example
     * // Create many Offices
     * const office = await prisma.office.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfficeCreateManyArgs>(args?: SelectSubset<T, OfficeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Offices and returns the data saved in the database.
     * @param {OfficeCreateManyAndReturnArgs} args - Arguments to create many Offices.
     * @example
     * // Create many Offices
     * const office = await prisma.office.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Offices and only return the `id`
     * const officeWithIdOnly = await prisma.office.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OfficeCreateManyAndReturnArgs>(args?: SelectSubset<T, OfficeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Office.
     * @param {OfficeDeleteArgs} args - Arguments to delete one Office.
     * @example
     * // Delete one Office
     * const Office = await prisma.office.delete({
     *   where: {
     *     // ... filter to delete one Office
     *   }
     * })
     * 
     */
    delete<T extends OfficeDeleteArgs>(args: SelectSubset<T, OfficeDeleteArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Office.
     * @param {OfficeUpdateArgs} args - Arguments to update one Office.
     * @example
     * // Update one Office
     * const office = await prisma.office.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfficeUpdateArgs>(args: SelectSubset<T, OfficeUpdateArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Offices.
     * @param {OfficeDeleteManyArgs} args - Arguments to filter Offices to delete.
     * @example
     * // Delete a few Offices
     * const { count } = await prisma.office.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfficeDeleteManyArgs>(args?: SelectSubset<T, OfficeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offices
     * const office = await prisma.office.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfficeUpdateManyArgs>(args: SelectSubset<T, OfficeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offices and returns the data updated in the database.
     * @param {OfficeUpdateManyAndReturnArgs} args - Arguments to update many Offices.
     * @example
     * // Update many Offices
     * const office = await prisma.office.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Offices and only return the `id`
     * const officeWithIdOnly = await prisma.office.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OfficeUpdateManyAndReturnArgs>(args: SelectSubset<T, OfficeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Office.
     * @param {OfficeUpsertArgs} args - Arguments to update or create a Office.
     * @example
     * // Update or create a Office
     * const office = await prisma.office.upsert({
     *   create: {
     *     // ... data to create a Office
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Office we want to update
     *   }
     * })
     */
    upsert<T extends OfficeUpsertArgs>(args: SelectSubset<T, OfficeUpsertArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeCountArgs} args - Arguments to filter Offices to count.
     * @example
     * // Count the number of Offices
     * const count = await prisma.office.count({
     *   where: {
     *     // ... the filter for the Offices we want to count
     *   }
     * })
    **/
    count<T extends OfficeCountArgs>(
      args?: Subset<T, OfficeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Office.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficeAggregateArgs>(args: Subset<T, OfficeAggregateArgs>): Prisma.PrismaPromise<GetOfficeAggregateType<T>>

    /**
     * Group by Office.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfficeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfficeGroupByArgs['orderBy'] }
        : { orderBy?: OfficeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfficeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Office model
   */
  readonly fields: OfficeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Office.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfficeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends Office$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Office$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approvers<T extends Office$approversArgs<ExtArgs> = {}>(args?: Subset<T, Office$approversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowSteps<T extends Office$workflowStepsArgs<ExtArgs> = {}>(args?: Subset<T, Office$workflowStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Office model
   */
  interface OfficeFieldRefs {
    readonly id: FieldRef<"Office", 'String'>
    readonly name: FieldRef<"Office", 'String'>
    readonly description: FieldRef<"Office", 'String'>
    readonly departmentId: FieldRef<"Office", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Office findUnique
   */
  export type OfficeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter, which Office to fetch.
     */
    where: OfficeWhereUniqueInput
  }

  /**
   * Office findUniqueOrThrow
   */
  export type OfficeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter, which Office to fetch.
     */
    where: OfficeWhereUniqueInput
  }

  /**
   * Office findFirst
   */
  export type OfficeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter, which Office to fetch.
     */
    where?: OfficeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficeOrderByWithRelationInput | OfficeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offices.
     */
    cursor?: OfficeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offices.
     */
    distinct?: OfficeScalarFieldEnum | OfficeScalarFieldEnum[]
  }

  /**
   * Office findFirstOrThrow
   */
  export type OfficeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter, which Office to fetch.
     */
    where?: OfficeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficeOrderByWithRelationInput | OfficeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offices.
     */
    cursor?: OfficeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offices.
     */
    distinct?: OfficeScalarFieldEnum | OfficeScalarFieldEnum[]
  }

  /**
   * Office findMany
   */
  export type OfficeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where?: OfficeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficeOrderByWithRelationInput | OfficeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offices.
     */
    cursor?: OfficeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    distinct?: OfficeScalarFieldEnum | OfficeScalarFieldEnum[]
  }

  /**
   * Office create
   */
  export type OfficeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * The data needed to create a Office.
     */
    data: XOR<OfficeCreateInput, OfficeUncheckedCreateInput>
  }

  /**
   * Office createMany
   */
  export type OfficeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Offices.
     */
    data: OfficeCreateManyInput | OfficeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Office createManyAndReturn
   */
  export type OfficeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * The data used to create many Offices.
     */
    data: OfficeCreateManyInput | OfficeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Office update
   */
  export type OfficeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * The data needed to update a Office.
     */
    data: XOR<OfficeUpdateInput, OfficeUncheckedUpdateInput>
    /**
     * Choose, which Office to update.
     */
    where: OfficeWhereUniqueInput
  }

  /**
   * Office updateMany
   */
  export type OfficeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Offices.
     */
    data: XOR<OfficeUpdateManyMutationInput, OfficeUncheckedUpdateManyInput>
    /**
     * Filter which Offices to update
     */
    where?: OfficeWhereInput
    /**
     * Limit how many Offices to update.
     */
    limit?: number
  }

  /**
   * Office updateManyAndReturn
   */
  export type OfficeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * The data used to update Offices.
     */
    data: XOR<OfficeUpdateManyMutationInput, OfficeUncheckedUpdateManyInput>
    /**
     * Filter which Offices to update
     */
    where?: OfficeWhereInput
    /**
     * Limit how many Offices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Office upsert
   */
  export type OfficeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * The filter to search for the Office to update in case it exists.
     */
    where: OfficeWhereUniqueInput
    /**
     * In case the Office found by the `where` argument doesn't exist, create a new Office with this data.
     */
    create: XOR<OfficeCreateInput, OfficeUncheckedCreateInput>
    /**
     * In case the Office was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfficeUpdateInput, OfficeUncheckedUpdateInput>
  }

  /**
   * Office delete
   */
  export type OfficeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
    /**
     * Filter which Office to delete.
     */
    where: OfficeWhereUniqueInput
  }

  /**
   * Office deleteMany
   */
  export type OfficeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offices to delete
     */
    where?: OfficeWhereInput
    /**
     * Limit how many Offices to delete.
     */
    limit?: number
  }

  /**
   * Office.department
   */
  export type Office$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Office.approvers
   */
  export type Office$approversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    where?: ApproverWhereInput
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    cursor?: ApproverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApproverScalarFieldEnum | ApproverScalarFieldEnum[]
  }

  /**
   * Office.workflowSteps
   */
  export type Office$workflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    cursor?: WorkflowStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * Office without action
   */
  export type OfficeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Office
     */
    select?: OfficeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Office
     */
    omit?: OfficeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfficeInclude<ExtArgs> | null
  }


  /**
   * Model Approver
   */

  export type AggregateApprover = {
    _count: ApproverCountAggregateOutputType | null
    _avg: ApproverAvgAggregateOutputType | null
    _sum: ApproverSumAggregateOutputType | null
    _min: ApproverMinAggregateOutputType | null
    _max: ApproverMaxAggregateOutputType | null
  }

  export type ApproverAvgAggregateOutputType = {
    yearsOfExperience: number | null
  }

  export type ApproverSumAggregateOutputType = {
    yearsOfExperience: number | null
  }

  export type ApproverMinAggregateOutputType = {
    id: string | null
    userId: string | null
    officeId: string | null
    digitalSignature: string | null
    yearsOfExperience: number | null
    departmentId: string | null
  }

  export type ApproverMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    officeId: string | null
    digitalSignature: string | null
    yearsOfExperience: number | null
    departmentId: string | null
  }

  export type ApproverCountAggregateOutputType = {
    id: number
    userId: number
    officeId: number
    digitalSignature: number
    yearsOfExperience: number
    departmentId: number
    _all: number
  }


  export type ApproverAvgAggregateInputType = {
    yearsOfExperience?: true
  }

  export type ApproverSumAggregateInputType = {
    yearsOfExperience?: true
  }

  export type ApproverMinAggregateInputType = {
    id?: true
    userId?: true
    officeId?: true
    digitalSignature?: true
    yearsOfExperience?: true
    departmentId?: true
  }

  export type ApproverMaxAggregateInputType = {
    id?: true
    userId?: true
    officeId?: true
    digitalSignature?: true
    yearsOfExperience?: true
    departmentId?: true
  }

  export type ApproverCountAggregateInputType = {
    id?: true
    userId?: true
    officeId?: true
    digitalSignature?: true
    yearsOfExperience?: true
    departmentId?: true
    _all?: true
  }

  export type ApproverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approver to aggregate.
     */
    where?: ApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvers to fetch.
     */
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvers
    **/
    _count?: true | ApproverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApproverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApproverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApproverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApproverMaxAggregateInputType
  }

  export type GetApproverAggregateType<T extends ApproverAggregateArgs> = {
        [P in keyof T & keyof AggregateApprover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApprover[P]>
      : GetScalarType<T[P], AggregateApprover[P]>
  }




  export type ApproverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApproverWhereInput
    orderBy?: ApproverOrderByWithAggregationInput | ApproverOrderByWithAggregationInput[]
    by: ApproverScalarFieldEnum[] | ApproverScalarFieldEnum
    having?: ApproverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApproverCountAggregateInputType | true
    _avg?: ApproverAvgAggregateInputType
    _sum?: ApproverSumAggregateInputType
    _min?: ApproverMinAggregateInputType
    _max?: ApproverMaxAggregateInputType
  }

  export type ApproverGroupByOutputType = {
    id: string
    userId: string
    officeId: string
    digitalSignature: string | null
    yearsOfExperience: number
    departmentId: string | null
    _count: ApproverCountAggregateOutputType | null
    _avg: ApproverAvgAggregateOutputType | null
    _sum: ApproverSumAggregateOutputType | null
    _min: ApproverMinAggregateOutputType | null
    _max: ApproverMaxAggregateOutputType | null
  }

  type GetApproverGroupByPayload<T extends ApproverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApproverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApproverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApproverGroupByOutputType[P]>
            : GetScalarType<T[P], ApproverGroupByOutputType[P]>
        }
      >
    >


  export type ApproverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    officeId?: boolean
    digitalSignature?: boolean
    yearsOfExperience?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
    approvalActions?: boolean | Approver$approvalActionsArgs<ExtArgs>
    _count?: boolean | ApproverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approver"]>

  export type ApproverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    officeId?: boolean
    digitalSignature?: boolean
    yearsOfExperience?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["approver"]>

  export type ApproverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    officeId?: boolean
    digitalSignature?: boolean
    yearsOfExperience?: boolean
    departmentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["approver"]>

  export type ApproverSelectScalar = {
    id?: boolean
    userId?: boolean
    officeId?: boolean
    digitalSignature?: boolean
    yearsOfExperience?: boolean
    departmentId?: boolean
  }

  export type ApproverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "officeId" | "digitalSignature" | "yearsOfExperience" | "departmentId", ExtArgs["result"]["approver"]>
  export type ApproverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
    approvalActions?: boolean | Approver$approvalActionsArgs<ExtArgs>
    _count?: boolean | ApproverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApproverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
  }
  export type ApproverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
    department?: boolean | Approver$departmentArgs<ExtArgs>
  }

  export type $ApproverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approver"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      office: Prisma.$OfficePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      approvalActions: Prisma.$ApprovalActionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      officeId: string
      digitalSignature: string | null
      yearsOfExperience: number
      departmentId: string | null
    }, ExtArgs["result"]["approver"]>
    composites: {}
  }

  type ApproverGetPayload<S extends boolean | null | undefined | ApproverDefaultArgs> = $Result.GetResult<Prisma.$ApproverPayload, S>

  type ApproverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApproverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApproverCountAggregateInputType | true
    }

  export interface ApproverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approver'], meta: { name: 'Approver' } }
    /**
     * Find zero or one Approver that matches the filter.
     * @param {ApproverFindUniqueArgs} args - Arguments to find a Approver
     * @example
     * // Get one Approver
     * const approver = await prisma.approver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApproverFindUniqueArgs>(args: SelectSubset<T, ApproverFindUniqueArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Approver that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApproverFindUniqueOrThrowArgs} args - Arguments to find a Approver
     * @example
     * // Get one Approver
     * const approver = await prisma.approver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApproverFindUniqueOrThrowArgs>(args: SelectSubset<T, ApproverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverFindFirstArgs} args - Arguments to find a Approver
     * @example
     * // Get one Approver
     * const approver = await prisma.approver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApproverFindFirstArgs>(args?: SelectSubset<T, ApproverFindFirstArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverFindFirstOrThrowArgs} args - Arguments to find a Approver
     * @example
     * // Get one Approver
     * const approver = await prisma.approver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApproverFindFirstOrThrowArgs>(args?: SelectSubset<T, ApproverFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Approvers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvers
     * const approvers = await prisma.approver.findMany()
     * 
     * // Get first 10 Approvers
     * const approvers = await prisma.approver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approverWithIdOnly = await prisma.approver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApproverFindManyArgs>(args?: SelectSubset<T, ApproverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Approver.
     * @param {ApproverCreateArgs} args - Arguments to create a Approver.
     * @example
     * // Create one Approver
     * const Approver = await prisma.approver.create({
     *   data: {
     *     // ... data to create a Approver
     *   }
     * })
     * 
     */
    create<T extends ApproverCreateArgs>(args: SelectSubset<T, ApproverCreateArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Approvers.
     * @param {ApproverCreateManyArgs} args - Arguments to create many Approvers.
     * @example
     * // Create many Approvers
     * const approver = await prisma.approver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApproverCreateManyArgs>(args?: SelectSubset<T, ApproverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Approvers and returns the data saved in the database.
     * @param {ApproverCreateManyAndReturnArgs} args - Arguments to create many Approvers.
     * @example
     * // Create many Approvers
     * const approver = await prisma.approver.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Approvers and only return the `id`
     * const approverWithIdOnly = await prisma.approver.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApproverCreateManyAndReturnArgs>(args?: SelectSubset<T, ApproverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Approver.
     * @param {ApproverDeleteArgs} args - Arguments to delete one Approver.
     * @example
     * // Delete one Approver
     * const Approver = await prisma.approver.delete({
     *   where: {
     *     // ... filter to delete one Approver
     *   }
     * })
     * 
     */
    delete<T extends ApproverDeleteArgs>(args: SelectSubset<T, ApproverDeleteArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Approver.
     * @param {ApproverUpdateArgs} args - Arguments to update one Approver.
     * @example
     * // Update one Approver
     * const approver = await prisma.approver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApproverUpdateArgs>(args: SelectSubset<T, ApproverUpdateArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Approvers.
     * @param {ApproverDeleteManyArgs} args - Arguments to filter Approvers to delete.
     * @example
     * // Delete a few Approvers
     * const { count } = await prisma.approver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApproverDeleteManyArgs>(args?: SelectSubset<T, ApproverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvers
     * const approver = await prisma.approver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApproverUpdateManyArgs>(args: SelectSubset<T, ApproverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvers and returns the data updated in the database.
     * @param {ApproverUpdateManyAndReturnArgs} args - Arguments to update many Approvers.
     * @example
     * // Update many Approvers
     * const approver = await prisma.approver.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Approvers and only return the `id`
     * const approverWithIdOnly = await prisma.approver.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApproverUpdateManyAndReturnArgs>(args: SelectSubset<T, ApproverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Approver.
     * @param {ApproverUpsertArgs} args - Arguments to update or create a Approver.
     * @example
     * // Update or create a Approver
     * const approver = await prisma.approver.upsert({
     *   create: {
     *     // ... data to create a Approver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approver we want to update
     *   }
     * })
     */
    upsert<T extends ApproverUpsertArgs>(args: SelectSubset<T, ApproverUpsertArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Approvers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverCountArgs} args - Arguments to filter Approvers to count.
     * @example
     * // Count the number of Approvers
     * const count = await prisma.approver.count({
     *   where: {
     *     // ... the filter for the Approvers we want to count
     *   }
     * })
    **/
    count<T extends ApproverCountArgs>(
      args?: Subset<T, ApproverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApproverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApproverAggregateArgs>(args: Subset<T, ApproverAggregateArgs>): Prisma.PrismaPromise<GetApproverAggregateType<T>>

    /**
     * Group by Approver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApproverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApproverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApproverGroupByArgs['orderBy'] }
        : { orderBy?: ApproverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApproverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApproverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approver model
   */
  readonly fields: ApproverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApproverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    office<T extends OfficeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OfficeDefaultArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends Approver$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Approver$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approvalActions<T extends Approver$approvalActionsArgs<ExtArgs> = {}>(args?: Subset<T, Approver$approvalActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approver model
   */
  interface ApproverFieldRefs {
    readonly id: FieldRef<"Approver", 'String'>
    readonly userId: FieldRef<"Approver", 'String'>
    readonly officeId: FieldRef<"Approver", 'String'>
    readonly digitalSignature: FieldRef<"Approver", 'String'>
    readonly yearsOfExperience: FieldRef<"Approver", 'Int'>
    readonly departmentId: FieldRef<"Approver", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Approver findUnique
   */
  export type ApproverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter, which Approver to fetch.
     */
    where: ApproverWhereUniqueInput
  }

  /**
   * Approver findUniqueOrThrow
   */
  export type ApproverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter, which Approver to fetch.
     */
    where: ApproverWhereUniqueInput
  }

  /**
   * Approver findFirst
   */
  export type ApproverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter, which Approver to fetch.
     */
    where?: ApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvers to fetch.
     */
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvers.
     */
    cursor?: ApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvers.
     */
    distinct?: ApproverScalarFieldEnum | ApproverScalarFieldEnum[]
  }

  /**
   * Approver findFirstOrThrow
   */
  export type ApproverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter, which Approver to fetch.
     */
    where?: ApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvers to fetch.
     */
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvers.
     */
    cursor?: ApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvers.
     */
    distinct?: ApproverScalarFieldEnum | ApproverScalarFieldEnum[]
  }

  /**
   * Approver findMany
   */
  export type ApproverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter, which Approvers to fetch.
     */
    where?: ApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvers to fetch.
     */
    orderBy?: ApproverOrderByWithRelationInput | ApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvers.
     */
    cursor?: ApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvers.
     */
    skip?: number
    distinct?: ApproverScalarFieldEnum | ApproverScalarFieldEnum[]
  }

  /**
   * Approver create
   */
  export type ApproverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * The data needed to create a Approver.
     */
    data: XOR<ApproverCreateInput, ApproverUncheckedCreateInput>
  }

  /**
   * Approver createMany
   */
  export type ApproverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvers.
     */
    data: ApproverCreateManyInput | ApproverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Approver createManyAndReturn
   */
  export type ApproverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * The data used to create many Approvers.
     */
    data: ApproverCreateManyInput | ApproverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approver update
   */
  export type ApproverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * The data needed to update a Approver.
     */
    data: XOR<ApproverUpdateInput, ApproverUncheckedUpdateInput>
    /**
     * Choose, which Approver to update.
     */
    where: ApproverWhereUniqueInput
  }

  /**
   * Approver updateMany
   */
  export type ApproverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvers.
     */
    data: XOR<ApproverUpdateManyMutationInput, ApproverUncheckedUpdateManyInput>
    /**
     * Filter which Approvers to update
     */
    where?: ApproverWhereInput
    /**
     * Limit how many Approvers to update.
     */
    limit?: number
  }

  /**
   * Approver updateManyAndReturn
   */
  export type ApproverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * The data used to update Approvers.
     */
    data: XOR<ApproverUpdateManyMutationInput, ApproverUncheckedUpdateManyInput>
    /**
     * Filter which Approvers to update
     */
    where?: ApproverWhereInput
    /**
     * Limit how many Approvers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approver upsert
   */
  export type ApproverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * The filter to search for the Approver to update in case it exists.
     */
    where: ApproverWhereUniqueInput
    /**
     * In case the Approver found by the `where` argument doesn't exist, create a new Approver with this data.
     */
    create: XOR<ApproverCreateInput, ApproverUncheckedCreateInput>
    /**
     * In case the Approver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApproverUpdateInput, ApproverUncheckedUpdateInput>
  }

  /**
   * Approver delete
   */
  export type ApproverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
    /**
     * Filter which Approver to delete.
     */
    where: ApproverWhereUniqueInput
  }

  /**
   * Approver deleteMany
   */
  export type ApproverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvers to delete
     */
    where?: ApproverWhereInput
    /**
     * Limit how many Approvers to delete.
     */
    limit?: number
  }

  /**
   * Approver.department
   */
  export type Approver$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Approver.approvalActions
   */
  export type Approver$approvalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    where?: ApprovalActionWhereInput
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    cursor?: ApprovalActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalActionScalarFieldEnum | ApprovalActionScalarFieldEnum[]
  }

  /**
   * Approver without action
   */
  export type ApproverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approver
     */
    select?: ApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approver
     */
    omit?: ApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApproverInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowRule
   */

  export type AggregateWorkflowRule = {
    _count: WorkflowRuleCountAggregateOutputType | null
    _min: WorkflowRuleMinAggregateOutputType | null
    _max: WorkflowRuleMaxAggregateOutputType | null
  }

  export type WorkflowRuleMinAggregateOutputType = {
    id: string | null
    formType: $Enums.FormType | null
    programId: string | null
    description: string | null
  }

  export type WorkflowRuleMaxAggregateOutputType = {
    id: string | null
    formType: $Enums.FormType | null
    programId: string | null
    description: string | null
  }

  export type WorkflowRuleCountAggregateOutputType = {
    id: number
    formType: number
    programId: number
    description: number
    _all: number
  }


  export type WorkflowRuleMinAggregateInputType = {
    id?: true
    formType?: true
    programId?: true
    description?: true
  }

  export type WorkflowRuleMaxAggregateInputType = {
    id?: true
    formType?: true
    programId?: true
    description?: true
  }

  export type WorkflowRuleCountAggregateInputType = {
    id?: true
    formType?: true
    programId?: true
    description?: true
    _all?: true
  }

  export type WorkflowRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowRule to aggregate.
     */
    where?: WorkflowRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRules to fetch.
     */
    orderBy?: WorkflowRuleOrderByWithRelationInput | WorkflowRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowRules
    **/
    _count?: true | WorkflowRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowRuleMaxAggregateInputType
  }

  export type GetWorkflowRuleAggregateType<T extends WorkflowRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowRule[P]>
      : GetScalarType<T[P], AggregateWorkflowRule[P]>
  }




  export type WorkflowRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowRuleWhereInput
    orderBy?: WorkflowRuleOrderByWithAggregationInput | WorkflowRuleOrderByWithAggregationInput[]
    by: WorkflowRuleScalarFieldEnum[] | WorkflowRuleScalarFieldEnum
    having?: WorkflowRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowRuleCountAggregateInputType | true
    _min?: WorkflowRuleMinAggregateInputType
    _max?: WorkflowRuleMaxAggregateInputType
  }

  export type WorkflowRuleGroupByOutputType = {
    id: string
    formType: $Enums.FormType
    programId: string | null
    description: string | null
    _count: WorkflowRuleCountAggregateOutputType | null
    _min: WorkflowRuleMinAggregateOutputType | null
    _max: WorkflowRuleMaxAggregateOutputType | null
  }

  type GetWorkflowRuleGroupByPayload<T extends WorkflowRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowRuleGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowRuleGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formType?: boolean
    programId?: boolean
    description?: boolean
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
    workflowSteps?: boolean | WorkflowRule$workflowStepsArgs<ExtArgs>
    _count?: boolean | WorkflowRuleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowRule"]>

  export type WorkflowRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formType?: boolean
    programId?: boolean
    description?: boolean
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
  }, ExtArgs["result"]["workflowRule"]>

  export type WorkflowRuleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    formType?: boolean
    programId?: boolean
    description?: boolean
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
  }, ExtArgs["result"]["workflowRule"]>

  export type WorkflowRuleSelectScalar = {
    id?: boolean
    formType?: boolean
    programId?: boolean
    description?: boolean
  }

  export type WorkflowRuleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "formType" | "programId" | "description", ExtArgs["result"]["workflowRule"]>
  export type WorkflowRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
    workflowSteps?: boolean | WorkflowRule$workflowStepsArgs<ExtArgs>
    _count?: boolean | WorkflowRuleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkflowRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
  }
  export type WorkflowRuleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    program?: boolean | WorkflowRule$programArgs<ExtArgs>
  }

  export type $WorkflowRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowRule"
    objects: {
      program: Prisma.$ProgramPayload<ExtArgs> | null
      workflowSteps: Prisma.$WorkflowStepPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      formType: $Enums.FormType
      programId: string | null
      description: string | null
    }, ExtArgs["result"]["workflowRule"]>
    composites: {}
  }

  type WorkflowRuleGetPayload<S extends boolean | null | undefined | WorkflowRuleDefaultArgs> = $Result.GetResult<Prisma.$WorkflowRulePayload, S>

  type WorkflowRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowRuleCountAggregateInputType | true
    }

  export interface WorkflowRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowRule'], meta: { name: 'WorkflowRule' } }
    /**
     * Find zero or one WorkflowRule that matches the filter.
     * @param {WorkflowRuleFindUniqueArgs} args - Arguments to find a WorkflowRule
     * @example
     * // Get one WorkflowRule
     * const workflowRule = await prisma.workflowRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowRuleFindUniqueArgs>(args: SelectSubset<T, WorkflowRuleFindUniqueArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowRule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowRuleFindUniqueOrThrowArgs} args - Arguments to find a WorkflowRule
     * @example
     * // Get one WorkflowRule
     * const workflowRule = await prisma.workflowRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleFindFirstArgs} args - Arguments to find a WorkflowRule
     * @example
     * // Get one WorkflowRule
     * const workflowRule = await prisma.workflowRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowRuleFindFirstArgs>(args?: SelectSubset<T, WorkflowRuleFindFirstArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleFindFirstOrThrowArgs} args - Arguments to find a WorkflowRule
     * @example
     * // Get one WorkflowRule
     * const workflowRule = await prisma.workflowRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowRules
     * const workflowRules = await prisma.workflowRule.findMany()
     * 
     * // Get first 10 WorkflowRules
     * const workflowRules = await prisma.workflowRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowRuleWithIdOnly = await prisma.workflowRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowRuleFindManyArgs>(args?: SelectSubset<T, WorkflowRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowRule.
     * @param {WorkflowRuleCreateArgs} args - Arguments to create a WorkflowRule.
     * @example
     * // Create one WorkflowRule
     * const WorkflowRule = await prisma.workflowRule.create({
     *   data: {
     *     // ... data to create a WorkflowRule
     *   }
     * })
     * 
     */
    create<T extends WorkflowRuleCreateArgs>(args: SelectSubset<T, WorkflowRuleCreateArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowRules.
     * @param {WorkflowRuleCreateManyArgs} args - Arguments to create many WorkflowRules.
     * @example
     * // Create many WorkflowRules
     * const workflowRule = await prisma.workflowRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowRuleCreateManyArgs>(args?: SelectSubset<T, WorkflowRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowRules and returns the data saved in the database.
     * @param {WorkflowRuleCreateManyAndReturnArgs} args - Arguments to create many WorkflowRules.
     * @example
     * // Create many WorkflowRules
     * const workflowRule = await prisma.workflowRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowRules and only return the `id`
     * const workflowRuleWithIdOnly = await prisma.workflowRule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowRule.
     * @param {WorkflowRuleDeleteArgs} args - Arguments to delete one WorkflowRule.
     * @example
     * // Delete one WorkflowRule
     * const WorkflowRule = await prisma.workflowRule.delete({
     *   where: {
     *     // ... filter to delete one WorkflowRule
     *   }
     * })
     * 
     */
    delete<T extends WorkflowRuleDeleteArgs>(args: SelectSubset<T, WorkflowRuleDeleteArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowRule.
     * @param {WorkflowRuleUpdateArgs} args - Arguments to update one WorkflowRule.
     * @example
     * // Update one WorkflowRule
     * const workflowRule = await prisma.workflowRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowRuleUpdateArgs>(args: SelectSubset<T, WorkflowRuleUpdateArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowRules.
     * @param {WorkflowRuleDeleteManyArgs} args - Arguments to filter WorkflowRules to delete.
     * @example
     * // Delete a few WorkflowRules
     * const { count } = await prisma.workflowRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowRuleDeleteManyArgs>(args?: SelectSubset<T, WorkflowRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowRules
     * const workflowRule = await prisma.workflowRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowRuleUpdateManyArgs>(args: SelectSubset<T, WorkflowRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowRules and returns the data updated in the database.
     * @param {WorkflowRuleUpdateManyAndReturnArgs} args - Arguments to update many WorkflowRules.
     * @example
     * // Update many WorkflowRules
     * const workflowRule = await prisma.workflowRule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowRules and only return the `id`
     * const workflowRuleWithIdOnly = await prisma.workflowRule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowRuleUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowRuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowRule.
     * @param {WorkflowRuleUpsertArgs} args - Arguments to update or create a WorkflowRule.
     * @example
     * // Update or create a WorkflowRule
     * const workflowRule = await prisma.workflowRule.upsert({
     *   create: {
     *     // ... data to create a WorkflowRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowRule we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowRuleUpsertArgs>(args: SelectSubset<T, WorkflowRuleUpsertArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleCountArgs} args - Arguments to filter WorkflowRules to count.
     * @example
     * // Count the number of WorkflowRules
     * const count = await prisma.workflowRule.count({
     *   where: {
     *     // ... the filter for the WorkflowRules we want to count
     *   }
     * })
    **/
    count<T extends WorkflowRuleCountArgs>(
      args?: Subset<T, WorkflowRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowRuleAggregateArgs>(args: Subset<T, WorkflowRuleAggregateArgs>): Prisma.PrismaPromise<GetWorkflowRuleAggregateType<T>>

    /**
     * Group by WorkflowRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowRuleGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowRule model
   */
  readonly fields: WorkflowRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    program<T extends WorkflowRule$programArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowRule$programArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workflowSteps<T extends WorkflowRule$workflowStepsArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowRule$workflowStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowRule model
   */
  interface WorkflowRuleFieldRefs {
    readonly id: FieldRef<"WorkflowRule", 'String'>
    readonly formType: FieldRef<"WorkflowRule", 'FormType'>
    readonly programId: FieldRef<"WorkflowRule", 'String'>
    readonly description: FieldRef<"WorkflowRule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowRule findUnique
   */
  export type WorkflowRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRule to fetch.
     */
    where: WorkflowRuleWhereUniqueInput
  }

  /**
   * WorkflowRule findUniqueOrThrow
   */
  export type WorkflowRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRule to fetch.
     */
    where: WorkflowRuleWhereUniqueInput
  }

  /**
   * WorkflowRule findFirst
   */
  export type WorkflowRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRule to fetch.
     */
    where?: WorkflowRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRules to fetch.
     */
    orderBy?: WorkflowRuleOrderByWithRelationInput | WorkflowRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowRules.
     */
    cursor?: WorkflowRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowRules.
     */
    distinct?: WorkflowRuleScalarFieldEnum | WorkflowRuleScalarFieldEnum[]
  }

  /**
   * WorkflowRule findFirstOrThrow
   */
  export type WorkflowRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRule to fetch.
     */
    where?: WorkflowRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRules to fetch.
     */
    orderBy?: WorkflowRuleOrderByWithRelationInput | WorkflowRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowRules.
     */
    cursor?: WorkflowRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowRules.
     */
    distinct?: WorkflowRuleScalarFieldEnum | WorkflowRuleScalarFieldEnum[]
  }

  /**
   * WorkflowRule findMany
   */
  export type WorkflowRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowRules to fetch.
     */
    where?: WorkflowRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowRules to fetch.
     */
    orderBy?: WorkflowRuleOrderByWithRelationInput | WorkflowRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowRules.
     */
    cursor?: WorkflowRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowRules.
     */
    skip?: number
    distinct?: WorkflowRuleScalarFieldEnum | WorkflowRuleScalarFieldEnum[]
  }

  /**
   * WorkflowRule create
   */
  export type WorkflowRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowRule.
     */
    data: XOR<WorkflowRuleCreateInput, WorkflowRuleUncheckedCreateInput>
  }

  /**
   * WorkflowRule createMany
   */
  export type WorkflowRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowRules.
     */
    data: WorkflowRuleCreateManyInput | WorkflowRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowRule createManyAndReturn
   */
  export type WorkflowRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowRules.
     */
    data: WorkflowRuleCreateManyInput | WorkflowRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowRule update
   */
  export type WorkflowRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowRule.
     */
    data: XOR<WorkflowRuleUpdateInput, WorkflowRuleUncheckedUpdateInput>
    /**
     * Choose, which WorkflowRule to update.
     */
    where: WorkflowRuleWhereUniqueInput
  }

  /**
   * WorkflowRule updateMany
   */
  export type WorkflowRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowRules.
     */
    data: XOR<WorkflowRuleUpdateManyMutationInput, WorkflowRuleUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowRules to update
     */
    where?: WorkflowRuleWhereInput
    /**
     * Limit how many WorkflowRules to update.
     */
    limit?: number
  }

  /**
   * WorkflowRule updateManyAndReturn
   */
  export type WorkflowRuleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowRules.
     */
    data: XOR<WorkflowRuleUpdateManyMutationInput, WorkflowRuleUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowRules to update
     */
    where?: WorkflowRuleWhereInput
    /**
     * Limit how many WorkflowRules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowRule upsert
   */
  export type WorkflowRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowRule to update in case it exists.
     */
    where: WorkflowRuleWhereUniqueInput
    /**
     * In case the WorkflowRule found by the `where` argument doesn't exist, create a new WorkflowRule with this data.
     */
    create: XOR<WorkflowRuleCreateInput, WorkflowRuleUncheckedCreateInput>
    /**
     * In case the WorkflowRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowRuleUpdateInput, WorkflowRuleUncheckedUpdateInput>
  }

  /**
   * WorkflowRule delete
   */
  export type WorkflowRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
    /**
     * Filter which WorkflowRule to delete.
     */
    where: WorkflowRuleWhereUniqueInput
  }

  /**
   * WorkflowRule deleteMany
   */
  export type WorkflowRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowRules to delete
     */
    where?: WorkflowRuleWhereInput
    /**
     * Limit how many WorkflowRules to delete.
     */
    limit?: number
  }

  /**
   * WorkflowRule.program
   */
  export type WorkflowRule$programArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Program
     */
    select?: ProgramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Program
     */
    omit?: ProgramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgramInclude<ExtArgs> | null
    where?: ProgramWhereInput
  }

  /**
   * WorkflowRule.workflowSteps
   */
  export type WorkflowRule$workflowStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    cursor?: WorkflowStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowRule without action
   */
  export type WorkflowRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowRule
     */
    select?: WorkflowRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowRule
     */
    omit?: WorkflowRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowRuleInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowStep
   */

  export type AggregateWorkflowStep = {
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  export type WorkflowStepAvgAggregateOutputType = {
    stepOrder: number | null
  }

  export type WorkflowStepSumAggregateOutputType = {
    stepOrder: number | null
  }

  export type WorkflowStepMinAggregateOutputType = {
    id: string | null
    workflowRuleId: string | null
    stepOrder: number | null
    officeId: string | null
    description: string | null
  }

  export type WorkflowStepMaxAggregateOutputType = {
    id: string | null
    workflowRuleId: string | null
    stepOrder: number | null
    officeId: string | null
    description: string | null
  }

  export type WorkflowStepCountAggregateOutputType = {
    id: number
    workflowRuleId: number
    stepOrder: number
    officeId: number
    description: number
    _all: number
  }


  export type WorkflowStepAvgAggregateInputType = {
    stepOrder?: true
  }

  export type WorkflowStepSumAggregateInputType = {
    stepOrder?: true
  }

  export type WorkflowStepMinAggregateInputType = {
    id?: true
    workflowRuleId?: true
    stepOrder?: true
    officeId?: true
    description?: true
  }

  export type WorkflowStepMaxAggregateInputType = {
    id?: true
    workflowRuleId?: true
    stepOrder?: true
    officeId?: true
    description?: true
  }

  export type WorkflowStepCountAggregateInputType = {
    id?: true
    workflowRuleId?: true
    stepOrder?: true
    officeId?: true
    description?: true
    _all?: true
  }

  export type WorkflowStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStep to aggregate.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowSteps
    **/
    _count?: true | WorkflowStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowStepMaxAggregateInputType
  }

  export type GetWorkflowStepAggregateType<T extends WorkflowStepAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowStep[P]>
      : GetScalarType<T[P], AggregateWorkflowStep[P]>
  }




  export type WorkflowStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStepWhereInput
    orderBy?: WorkflowStepOrderByWithAggregationInput | WorkflowStepOrderByWithAggregationInput[]
    by: WorkflowStepScalarFieldEnum[] | WorkflowStepScalarFieldEnum
    having?: WorkflowStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowStepCountAggregateInputType | true
    _avg?: WorkflowStepAvgAggregateInputType
    _sum?: WorkflowStepSumAggregateInputType
    _min?: WorkflowStepMinAggregateInputType
    _max?: WorkflowStepMaxAggregateInputType
  }

  export type WorkflowStepGroupByOutputType = {
    id: string
    workflowRuleId: string
    stepOrder: number
    officeId: string
    description: string | null
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  type GetWorkflowStepGroupByPayload<T extends WorkflowStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowRuleId?: boolean
    stepOrder?: boolean
    officeId?: boolean
    description?: boolean
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowRuleId?: boolean
    stepOrder?: boolean
    officeId?: boolean
    description?: boolean
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowRuleId?: boolean
    stepOrder?: boolean
    officeId?: boolean
    description?: boolean
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStep"]>

  export type WorkflowStepSelectScalar = {
    id?: boolean
    workflowRuleId?: boolean
    stepOrder?: boolean
    officeId?: boolean
    description?: boolean
  }

  export type WorkflowStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workflowRuleId" | "stepOrder" | "officeId" | "description", ExtArgs["result"]["workflowStep"]>
  export type WorkflowStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }
  export type WorkflowStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }
  export type WorkflowStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowRule?: boolean | WorkflowRuleDefaultArgs<ExtArgs>
    office?: boolean | OfficeDefaultArgs<ExtArgs>
  }

  export type $WorkflowStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowStep"
    objects: {
      workflowRule: Prisma.$WorkflowRulePayload<ExtArgs>
      office: Prisma.$OfficePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowRuleId: string
      stepOrder: number
      officeId: string
      description: string | null
    }, ExtArgs["result"]["workflowStep"]>
    composites: {}
  }

  type WorkflowStepGetPayload<S extends boolean | null | undefined | WorkflowStepDefaultArgs> = $Result.GetResult<Prisma.$WorkflowStepPayload, S>

  type WorkflowStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowStepCountAggregateInputType | true
    }

  export interface WorkflowStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowStep'], meta: { name: 'WorkflowStep' } }
    /**
     * Find zero or one WorkflowStep that matches the filter.
     * @param {WorkflowStepFindUniqueArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowStepFindUniqueArgs>(args: SelectSubset<T, WorkflowStepFindUniqueArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowStepFindUniqueOrThrowArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowStepFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindFirstArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowStepFindFirstArgs>(args?: SelectSubset<T, WorkflowStepFindFirstArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindFirstOrThrowArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowStepFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany()
     * 
     * // Get first 10 WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowStepFindManyArgs>(args?: SelectSubset<T, WorkflowStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowStep.
     * @param {WorkflowStepCreateArgs} args - Arguments to create a WorkflowStep.
     * @example
     * // Create one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.create({
     *   data: {
     *     // ... data to create a WorkflowStep
     *   }
     * })
     * 
     */
    create<T extends WorkflowStepCreateArgs>(args: SelectSubset<T, WorkflowStepCreateArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowSteps.
     * @param {WorkflowStepCreateManyArgs} args - Arguments to create many WorkflowSteps.
     * @example
     * // Create many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowStepCreateManyArgs>(args?: SelectSubset<T, WorkflowStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowSteps and returns the data saved in the database.
     * @param {WorkflowStepCreateManyAndReturnArgs} args - Arguments to create many WorkflowSteps.
     * @example
     * // Create many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowSteps and only return the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowStepCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowStep.
     * @param {WorkflowStepDeleteArgs} args - Arguments to delete one WorkflowStep.
     * @example
     * // Delete one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.delete({
     *   where: {
     *     // ... filter to delete one WorkflowStep
     *   }
     * })
     * 
     */
    delete<T extends WorkflowStepDeleteArgs>(args: SelectSubset<T, WorkflowStepDeleteArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowStep.
     * @param {WorkflowStepUpdateArgs} args - Arguments to update one WorkflowStep.
     * @example
     * // Update one WorkflowStep
     * const workflowStep = await prisma.workflowStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowStepUpdateArgs>(args: SelectSubset<T, WorkflowStepUpdateArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowSteps.
     * @param {WorkflowStepDeleteManyArgs} args - Arguments to filter WorkflowSteps to delete.
     * @example
     * // Delete a few WorkflowSteps
     * const { count } = await prisma.workflowStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowStepDeleteManyArgs>(args?: SelectSubset<T, WorkflowStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowStepUpdateManyArgs>(args: SelectSubset<T, WorkflowStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowSteps and returns the data updated in the database.
     * @param {WorkflowStepUpdateManyAndReturnArgs} args - Arguments to update many WorkflowSteps.
     * @example
     * // Update many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowSteps and only return the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowStepUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowStep.
     * @param {WorkflowStepUpsertArgs} args - Arguments to update or create a WorkflowStep.
     * @example
     * // Update or create a WorkflowStep
     * const workflowStep = await prisma.workflowStep.upsert({
     *   create: {
     *     // ... data to create a WorkflowStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowStep we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowStepUpsertArgs>(args: SelectSubset<T, WorkflowStepUpsertArgs<ExtArgs>>): Prisma__WorkflowStepClient<$Result.GetResult<Prisma.$WorkflowStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepCountArgs} args - Arguments to filter WorkflowSteps to count.
     * @example
     * // Count the number of WorkflowSteps
     * const count = await prisma.workflowStep.count({
     *   where: {
     *     // ... the filter for the WorkflowSteps we want to count
     *   }
     * })
    **/
    count<T extends WorkflowStepCountArgs>(
      args?: Subset<T, WorkflowStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowStepAggregateArgs>(args: Subset<T, WorkflowStepAggregateArgs>): Prisma.PrismaPromise<GetWorkflowStepAggregateType<T>>

    /**
     * Group by WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowStepGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowStep model
   */
  readonly fields: WorkflowStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflowRule<T extends WorkflowRuleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowRuleDefaultArgs<ExtArgs>>): Prisma__WorkflowRuleClient<$Result.GetResult<Prisma.$WorkflowRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    office<T extends OfficeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OfficeDefaultArgs<ExtArgs>>): Prisma__OfficeClient<$Result.GetResult<Prisma.$OfficePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowStep model
   */
  interface WorkflowStepFieldRefs {
    readonly id: FieldRef<"WorkflowStep", 'String'>
    readonly workflowRuleId: FieldRef<"WorkflowStep", 'String'>
    readonly stepOrder: FieldRef<"WorkflowStep", 'Int'>
    readonly officeId: FieldRef<"WorkflowStep", 'String'>
    readonly description: FieldRef<"WorkflowStep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowStep findUnique
   */
  export type WorkflowStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep findUniqueOrThrow
   */
  export type WorkflowStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep findFirst
   */
  export type WorkflowStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowSteps.
     */
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep findFirstOrThrow
   */
  export type WorkflowStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStep to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowSteps.
     */
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep findMany
   */
  export type WorkflowStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowSteps to fetch.
     */
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     */
    orderBy?: WorkflowStepOrderByWithRelationInput | WorkflowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowSteps.
     */
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     */
    skip?: number
    distinct?: WorkflowStepScalarFieldEnum | WorkflowStepScalarFieldEnum[]
  }

  /**
   * WorkflowStep create
   */
  export type WorkflowStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowStep.
     */
    data: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
  }

  /**
   * WorkflowStep createMany
   */
  export type WorkflowStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowSteps.
     */
    data: WorkflowStepCreateManyInput | WorkflowStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowStep createManyAndReturn
   */
  export type WorkflowStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowSteps.
     */
    data: WorkflowStepCreateManyInput | WorkflowStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStep update
   */
  export type WorkflowStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowStep.
     */
    data: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
    /**
     * Choose, which WorkflowStep to update.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep updateMany
   */
  export type WorkflowStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowSteps.
     */
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowSteps to update
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to update.
     */
    limit?: number
  }

  /**
   * WorkflowStep updateManyAndReturn
   */
  export type WorkflowStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowSteps.
     */
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowSteps to update
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStep upsert
   */
  export type WorkflowStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowStep to update in case it exists.
     */
    where: WorkflowStepWhereUniqueInput
    /**
     * In case the WorkflowStep found by the `where` argument doesn't exist, create a new WorkflowStep with this data.
     */
    create: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
    /**
     * In case the WorkflowStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
  }

  /**
   * WorkflowStep delete
   */
  export type WorkflowStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
    /**
     * Filter which WorkflowStep to delete.
     */
    where: WorkflowStepWhereUniqueInput
  }

  /**
   * WorkflowStep deleteMany
   */
  export type WorkflowStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowSteps to delete
     */
    where?: WorkflowStepWhereInput
    /**
     * Limit how many WorkflowSteps to delete.
     */
    limit?: number
  }

  /**
   * WorkflowStep without action
   */
  export type WorkflowStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     */
    select?: WorkflowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStep
     */
    omit?: WorkflowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStepInclude<ExtArgs> | null
  }


  /**
   * Model ApprovalAction
   */

  export type AggregateApprovalAction = {
    _count: ApprovalActionCountAggregateOutputType | null
    _min: ApprovalActionMinAggregateOutputType | null
    _max: ApprovalActionMaxAggregateOutputType | null
  }

  export type ApprovalActionMinAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    approverId: string | null
    status: $Enums.ApprovalStatus | null
    comment: string | null
    actionDate: Date | null
    finalizedAt: Date | null
    actionDueBy: Date | null
  }

  export type ApprovalActionMaxAggregateOutputType = {
    id: string | null
    clearanceRequestId: string | null
    approverId: string | null
    status: $Enums.ApprovalStatus | null
    comment: string | null
    actionDate: Date | null
    finalizedAt: Date | null
    actionDueBy: Date | null
  }

  export type ApprovalActionCountAggregateOutputType = {
    id: number
    clearanceRequestId: number
    approverId: number
    status: number
    comment: number
    actionDate: number
    finalizedAt: number
    actionDueBy: number
    _all: number
  }


  export type ApprovalActionMinAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    approverId?: true
    status?: true
    comment?: true
    actionDate?: true
    finalizedAt?: true
    actionDueBy?: true
  }

  export type ApprovalActionMaxAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    approverId?: true
    status?: true
    comment?: true
    actionDate?: true
    finalizedAt?: true
    actionDueBy?: true
  }

  export type ApprovalActionCountAggregateInputType = {
    id?: true
    clearanceRequestId?: true
    approverId?: true
    status?: true
    comment?: true
    actionDate?: true
    finalizedAt?: true
    actionDueBy?: true
    _all?: true
  }

  export type ApprovalActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApprovalAction to aggregate.
     */
    where?: ApprovalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovalActions to fetch.
     */
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApprovalActions
    **/
    _count?: true | ApprovalActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalActionMaxAggregateInputType
  }

  export type GetApprovalActionAggregateType<T extends ApprovalActionAggregateArgs> = {
        [P in keyof T & keyof AggregateApprovalAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApprovalAction[P]>
      : GetScalarType<T[P], AggregateApprovalAction[P]>
  }




  export type ApprovalActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalActionWhereInput
    orderBy?: ApprovalActionOrderByWithAggregationInput | ApprovalActionOrderByWithAggregationInput[]
    by: ApprovalActionScalarFieldEnum[] | ApprovalActionScalarFieldEnum
    having?: ApprovalActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalActionCountAggregateInputType | true
    _min?: ApprovalActionMinAggregateInputType
    _max?: ApprovalActionMaxAggregateInputType
  }

  export type ApprovalActionGroupByOutputType = {
    id: string
    clearanceRequestId: string
    approverId: string
    status: $Enums.ApprovalStatus
    comment: string | null
    actionDate: Date | null
    finalizedAt: Date | null
    actionDueBy: Date | null
    _count: ApprovalActionCountAggregateOutputType | null
    _min: ApprovalActionMinAggregateOutputType | null
    _max: ApprovalActionMaxAggregateOutputType | null
  }

  type GetApprovalActionGroupByPayload<T extends ApprovalActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalActionGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalActionGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    actionDate?: boolean
    finalizedAt?: boolean
    actionDueBy?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approvalAction"]>

  export type ApprovalActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    actionDate?: boolean
    finalizedAt?: boolean
    actionDueBy?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approvalAction"]>

  export type ApprovalActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clearanceRequestId?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    actionDate?: boolean
    finalizedAt?: boolean
    actionDueBy?: boolean
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approvalAction"]>

  export type ApprovalActionSelectScalar = {
    id?: boolean
    clearanceRequestId?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    actionDate?: boolean
    finalizedAt?: boolean
    actionDueBy?: boolean
  }

  export type ApprovalActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clearanceRequestId" | "approverId" | "status" | "comment" | "actionDate" | "finalizedAt" | "actionDueBy", ExtArgs["result"]["approvalAction"]>
  export type ApprovalActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }
  export type ApprovalActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }
  export type ApprovalActionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clearanceRequest?: boolean | ClearanceRequestDefaultArgs<ExtArgs>
    approver?: boolean | ApproverDefaultArgs<ExtArgs>
  }

  export type $ApprovalActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApprovalAction"
    objects: {
      clearanceRequest: Prisma.$ClearanceRequestPayload<ExtArgs>
      approver: Prisma.$ApproverPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clearanceRequestId: string
      approverId: string
      status: $Enums.ApprovalStatus
      comment: string | null
      actionDate: Date | null
      finalizedAt: Date | null
      actionDueBy: Date | null
    }, ExtArgs["result"]["approvalAction"]>
    composites: {}
  }

  type ApprovalActionGetPayload<S extends boolean | null | undefined | ApprovalActionDefaultArgs> = $Result.GetResult<Prisma.$ApprovalActionPayload, S>

  type ApprovalActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovalActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovalActionCountAggregateInputType | true
    }

  export interface ApprovalActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApprovalAction'], meta: { name: 'ApprovalAction' } }
    /**
     * Find zero or one ApprovalAction that matches the filter.
     * @param {ApprovalActionFindUniqueArgs} args - Arguments to find a ApprovalAction
     * @example
     * // Get one ApprovalAction
     * const approvalAction = await prisma.approvalAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalActionFindUniqueArgs>(args: SelectSubset<T, ApprovalActionFindUniqueArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApprovalAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovalActionFindUniqueOrThrowArgs} args - Arguments to find a ApprovalAction
     * @example
     * // Get one ApprovalAction
     * const approvalAction = await prisma.approvalAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalActionFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApprovalAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionFindFirstArgs} args - Arguments to find a ApprovalAction
     * @example
     * // Get one ApprovalAction
     * const approvalAction = await prisma.approvalAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalActionFindFirstArgs>(args?: SelectSubset<T, ApprovalActionFindFirstArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApprovalAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionFindFirstOrThrowArgs} args - Arguments to find a ApprovalAction
     * @example
     * // Get one ApprovalAction
     * const approvalAction = await prisma.approvalAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalActionFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApprovalActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApprovalActions
     * const approvalActions = await prisma.approvalAction.findMany()
     * 
     * // Get first 10 ApprovalActions
     * const approvalActions = await prisma.approvalAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalActionWithIdOnly = await prisma.approvalAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalActionFindManyArgs>(args?: SelectSubset<T, ApprovalActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApprovalAction.
     * @param {ApprovalActionCreateArgs} args - Arguments to create a ApprovalAction.
     * @example
     * // Create one ApprovalAction
     * const ApprovalAction = await prisma.approvalAction.create({
     *   data: {
     *     // ... data to create a ApprovalAction
     *   }
     * })
     * 
     */
    create<T extends ApprovalActionCreateArgs>(args: SelectSubset<T, ApprovalActionCreateArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApprovalActions.
     * @param {ApprovalActionCreateManyArgs} args - Arguments to create many ApprovalActions.
     * @example
     * // Create many ApprovalActions
     * const approvalAction = await prisma.approvalAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalActionCreateManyArgs>(args?: SelectSubset<T, ApprovalActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApprovalActions and returns the data saved in the database.
     * @param {ApprovalActionCreateManyAndReturnArgs} args - Arguments to create many ApprovalActions.
     * @example
     * // Create many ApprovalActions
     * const approvalAction = await prisma.approvalAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApprovalActions and only return the `id`
     * const approvalActionWithIdOnly = await prisma.approvalAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApprovalActionCreateManyAndReturnArgs>(args?: SelectSubset<T, ApprovalActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApprovalAction.
     * @param {ApprovalActionDeleteArgs} args - Arguments to delete one ApprovalAction.
     * @example
     * // Delete one ApprovalAction
     * const ApprovalAction = await prisma.approvalAction.delete({
     *   where: {
     *     // ... filter to delete one ApprovalAction
     *   }
     * })
     * 
     */
    delete<T extends ApprovalActionDeleteArgs>(args: SelectSubset<T, ApprovalActionDeleteArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApprovalAction.
     * @param {ApprovalActionUpdateArgs} args - Arguments to update one ApprovalAction.
     * @example
     * // Update one ApprovalAction
     * const approvalAction = await prisma.approvalAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalActionUpdateArgs>(args: SelectSubset<T, ApprovalActionUpdateArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApprovalActions.
     * @param {ApprovalActionDeleteManyArgs} args - Arguments to filter ApprovalActions to delete.
     * @example
     * // Delete a few ApprovalActions
     * const { count } = await prisma.approvalAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalActionDeleteManyArgs>(args?: SelectSubset<T, ApprovalActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApprovalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApprovalActions
     * const approvalAction = await prisma.approvalAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalActionUpdateManyArgs>(args: SelectSubset<T, ApprovalActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApprovalActions and returns the data updated in the database.
     * @param {ApprovalActionUpdateManyAndReturnArgs} args - Arguments to update many ApprovalActions.
     * @example
     * // Update many ApprovalActions
     * const approvalAction = await prisma.approvalAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApprovalActions and only return the `id`
     * const approvalActionWithIdOnly = await prisma.approvalAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApprovalActionUpdateManyAndReturnArgs>(args: SelectSubset<T, ApprovalActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApprovalAction.
     * @param {ApprovalActionUpsertArgs} args - Arguments to update or create a ApprovalAction.
     * @example
     * // Update or create a ApprovalAction
     * const approvalAction = await prisma.approvalAction.upsert({
     *   create: {
     *     // ... data to create a ApprovalAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApprovalAction we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalActionUpsertArgs>(args: SelectSubset<T, ApprovalActionUpsertArgs<ExtArgs>>): Prisma__ApprovalActionClient<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApprovalActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionCountArgs} args - Arguments to filter ApprovalActions to count.
     * @example
     * // Count the number of ApprovalActions
     * const count = await prisma.approvalAction.count({
     *   where: {
     *     // ... the filter for the ApprovalActions we want to count
     *   }
     * })
    **/
    count<T extends ApprovalActionCountArgs>(
      args?: Subset<T, ApprovalActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApprovalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalActionAggregateArgs>(args: Subset<T, ApprovalActionAggregateArgs>): Prisma.PrismaPromise<GetApprovalActionAggregateType<T>>

    /**
     * Group by ApprovalAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalActionGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApprovalAction model
   */
  readonly fields: ApprovalActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApprovalAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clearanceRequest<T extends ClearanceRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequestDefaultArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approver<T extends ApproverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApproverDefaultArgs<ExtArgs>>): Prisma__ApproverClient<$Result.GetResult<Prisma.$ApproverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApprovalAction model
   */
  interface ApprovalActionFieldRefs {
    readonly id: FieldRef<"ApprovalAction", 'String'>
    readonly clearanceRequestId: FieldRef<"ApprovalAction", 'String'>
    readonly approverId: FieldRef<"ApprovalAction", 'String'>
    readonly status: FieldRef<"ApprovalAction", 'ApprovalStatus'>
    readonly comment: FieldRef<"ApprovalAction", 'String'>
    readonly actionDate: FieldRef<"ApprovalAction", 'DateTime'>
    readonly finalizedAt: FieldRef<"ApprovalAction", 'DateTime'>
    readonly actionDueBy: FieldRef<"ApprovalAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApprovalAction findUnique
   */
  export type ApprovalActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter, which ApprovalAction to fetch.
     */
    where: ApprovalActionWhereUniqueInput
  }

  /**
   * ApprovalAction findUniqueOrThrow
   */
  export type ApprovalActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter, which ApprovalAction to fetch.
     */
    where: ApprovalActionWhereUniqueInput
  }

  /**
   * ApprovalAction findFirst
   */
  export type ApprovalActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter, which ApprovalAction to fetch.
     */
    where?: ApprovalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovalActions to fetch.
     */
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApprovalActions.
     */
    cursor?: ApprovalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApprovalActions.
     */
    distinct?: ApprovalActionScalarFieldEnum | ApprovalActionScalarFieldEnum[]
  }

  /**
   * ApprovalAction findFirstOrThrow
   */
  export type ApprovalActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter, which ApprovalAction to fetch.
     */
    where?: ApprovalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovalActions to fetch.
     */
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApprovalActions.
     */
    cursor?: ApprovalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovalActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApprovalActions.
     */
    distinct?: ApprovalActionScalarFieldEnum | ApprovalActionScalarFieldEnum[]
  }

  /**
   * ApprovalAction findMany
   */
  export type ApprovalActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter, which ApprovalActions to fetch.
     */
    where?: ApprovalActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovalActions to fetch.
     */
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApprovalActions.
     */
    cursor?: ApprovalActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovalActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovalActions.
     */
    skip?: number
    distinct?: ApprovalActionScalarFieldEnum | ApprovalActionScalarFieldEnum[]
  }

  /**
   * ApprovalAction create
   */
  export type ApprovalActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * The data needed to create a ApprovalAction.
     */
    data: XOR<ApprovalActionCreateInput, ApprovalActionUncheckedCreateInput>
  }

  /**
   * ApprovalAction createMany
   */
  export type ApprovalActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApprovalActions.
     */
    data: ApprovalActionCreateManyInput | ApprovalActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApprovalAction createManyAndReturn
   */
  export type ApprovalActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * The data used to create many ApprovalActions.
     */
    data: ApprovalActionCreateManyInput | ApprovalActionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApprovalAction update
   */
  export type ApprovalActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * The data needed to update a ApprovalAction.
     */
    data: XOR<ApprovalActionUpdateInput, ApprovalActionUncheckedUpdateInput>
    /**
     * Choose, which ApprovalAction to update.
     */
    where: ApprovalActionWhereUniqueInput
  }

  /**
   * ApprovalAction updateMany
   */
  export type ApprovalActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApprovalActions.
     */
    data: XOR<ApprovalActionUpdateManyMutationInput, ApprovalActionUncheckedUpdateManyInput>
    /**
     * Filter which ApprovalActions to update
     */
    where?: ApprovalActionWhereInput
    /**
     * Limit how many ApprovalActions to update.
     */
    limit?: number
  }

  /**
   * ApprovalAction updateManyAndReturn
   */
  export type ApprovalActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * The data used to update ApprovalActions.
     */
    data: XOR<ApprovalActionUpdateManyMutationInput, ApprovalActionUncheckedUpdateManyInput>
    /**
     * Filter which ApprovalActions to update
     */
    where?: ApprovalActionWhereInput
    /**
     * Limit how many ApprovalActions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApprovalAction upsert
   */
  export type ApprovalActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * The filter to search for the ApprovalAction to update in case it exists.
     */
    where: ApprovalActionWhereUniqueInput
    /**
     * In case the ApprovalAction found by the `where` argument doesn't exist, create a new ApprovalAction with this data.
     */
    create: XOR<ApprovalActionCreateInput, ApprovalActionUncheckedCreateInput>
    /**
     * In case the ApprovalAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalActionUpdateInput, ApprovalActionUncheckedUpdateInput>
  }

  /**
   * ApprovalAction delete
   */
  export type ApprovalActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    /**
     * Filter which ApprovalAction to delete.
     */
    where: ApprovalActionWhereUniqueInput
  }

  /**
   * ApprovalAction deleteMany
   */
  export type ApprovalActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApprovalActions to delete
     */
    where?: ApprovalActionWhereInput
    /**
     * Limit how many ApprovalActions to delete.
     */
    limit?: number
  }

  /**
   * ApprovalAction without action
   */
  export type ApprovalActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
  }


  /**
   * Model ClearanceRequest
   */

  export type AggregateClearanceRequest = {
    _count: ClearanceRequestCountAggregateOutputType | null
    _avg: ClearanceRequestAvgAggregateOutputType | null
    _sum: ClearanceRequestSumAggregateOutputType | null
    _min: ClearanceRequestMinAggregateOutputType | null
    _max: ClearanceRequestMaxAggregateOutputType | null
  }

  export type ClearanceRequestAvgAggregateOutputType = {
    resubmissionCount: number | null
    currentStep: number | null
  }

  export type ClearanceRequestSumAggregateOutputType = {
    resubmissionCount: number | null
    currentStep: number | null
  }

  export type ClearanceRequestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    formType: $Enums.FormType | null
    programId: string | null
    status: $Enums.RequestStatus | null
    rejectionReason: string | null
    resubmissionCount: number | null
    submittedAt: Date | null
    updatedAt: Date | null
    currentStep: number | null
    terminationReasonId: string | null
    idReplacementReasonId: string | null
    teacherClearanceReasonId: string | null
  }

  export type ClearanceRequestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    formType: $Enums.FormType | null
    programId: string | null
    status: $Enums.RequestStatus | null
    rejectionReason: string | null
    resubmissionCount: number | null
    submittedAt: Date | null
    updatedAt: Date | null
    currentStep: number | null
    terminationReasonId: string | null
    idReplacementReasonId: string | null
    teacherClearanceReasonId: string | null
  }

  export type ClearanceRequestCountAggregateOutputType = {
    id: number
    userId: number
    formType: number
    programId: number
    status: number
    rejectionReason: number
    resubmissionCount: number
    submittedAt: number
    updatedAt: number
    currentStep: number
    terminationReasonId: number
    idReplacementReasonId: number
    teacherClearanceReasonId: number
    _all: number
  }


  export type ClearanceRequestAvgAggregateInputType = {
    resubmissionCount?: true
    currentStep?: true
  }

  export type ClearanceRequestSumAggregateInputType = {
    resubmissionCount?: true
    currentStep?: true
  }

  export type ClearanceRequestMinAggregateInputType = {
    id?: true
    userId?: true
    formType?: true
    programId?: true
    status?: true
    rejectionReason?: true
    resubmissionCount?: true
    submittedAt?: true
    updatedAt?: true
    currentStep?: true
    terminationReasonId?: true
    idReplacementReasonId?: true
    teacherClearanceReasonId?: true
  }

  export type ClearanceRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    formType?: true
    programId?: true
    status?: true
    rejectionReason?: true
    resubmissionCount?: true
    submittedAt?: true
    updatedAt?: true
    currentStep?: true
    terminationReasonId?: true
    idReplacementReasonId?: true
    teacherClearanceReasonId?: true
  }

  export type ClearanceRequestCountAggregateInputType = {
    id?: true
    userId?: true
    formType?: true
    programId?: true
    status?: true
    rejectionReason?: true
    resubmissionCount?: true
    submittedAt?: true
    updatedAt?: true
    currentStep?: true
    terminationReasonId?: true
    idReplacementReasonId?: true
    teacherClearanceReasonId?: true
    _all?: true
  }

  export type ClearanceRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClearanceRequest to aggregate.
     */
    where?: ClearanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClearanceRequests to fetch.
     */
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClearanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClearanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClearanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClearanceRequests
    **/
    _count?: true | ClearanceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClearanceRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClearanceRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClearanceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClearanceRequestMaxAggregateInputType
  }

  export type GetClearanceRequestAggregateType<T extends ClearanceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateClearanceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClearanceRequest[P]>
      : GetScalarType<T[P], AggregateClearanceRequest[P]>
  }




  export type ClearanceRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClearanceRequestWhereInput
    orderBy?: ClearanceRequestOrderByWithAggregationInput | ClearanceRequestOrderByWithAggregationInput[]
    by: ClearanceRequestScalarFieldEnum[] | ClearanceRequestScalarFieldEnum
    having?: ClearanceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClearanceRequestCountAggregateInputType | true
    _avg?: ClearanceRequestAvgAggregateInputType
    _sum?: ClearanceRequestSumAggregateInputType
    _min?: ClearanceRequestMinAggregateInputType
    _max?: ClearanceRequestMaxAggregateInputType
  }

  export type ClearanceRequestGroupByOutputType = {
    id: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status: $Enums.RequestStatus
    rejectionReason: string | null
    resubmissionCount: number
    submittedAt: Date
    updatedAt: Date
    currentStep: number
    terminationReasonId: string | null
    idReplacementReasonId: string | null
    teacherClearanceReasonId: string | null
    _count: ClearanceRequestCountAggregateOutputType | null
    _avg: ClearanceRequestAvgAggregateOutputType | null
    _sum: ClearanceRequestSumAggregateOutputType | null
    _min: ClearanceRequestMinAggregateOutputType | null
    _max: ClearanceRequestMaxAggregateOutputType | null
  }

  type GetClearanceRequestGroupByPayload<T extends ClearanceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClearanceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClearanceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClearanceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ClearanceRequestGroupByOutputType[P]>
        }
      >
    >


  export type ClearanceRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    formType?: boolean
    programId?: boolean
    status?: boolean
    rejectionReason?: boolean
    resubmissionCount?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    currentStep?: boolean
    terminationReasonId?: boolean
    idReplacementReasonId?: boolean
    teacherClearanceReasonId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    terminationReason?: boolean | ClearanceRequest$terminationReasonArgs<ExtArgs>
    idReplacementReason?: boolean | ClearanceRequest$idReplacementReasonArgs<ExtArgs>
    teacherClearanceReason?: boolean | ClearanceRequest$teacherClearanceReasonArgs<ExtArgs>
    approvalActions?: boolean | ClearanceRequest$approvalActionsArgs<ExtArgs>
    documents?: boolean | ClearanceRequest$documentsArgs<ExtArgs>
    notifications?: boolean | ClearanceRequest$notificationsArgs<ExtArgs>
    certificate?: boolean | ClearanceRequest$certificateArgs<ExtArgs>
    auditLogs?: boolean | ClearanceRequest$auditLogsArgs<ExtArgs>
    _count?: boolean | ClearanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clearanceRequest"]>

  export type ClearanceRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    formType?: boolean
    programId?: boolean
    status?: boolean
    rejectionReason?: boolean
    resubmissionCount?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    currentStep?: boolean
    terminationReasonId?: boolean
    idReplacementReasonId?: boolean
    teacherClearanceReasonId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clearanceRequest"]>

  export type ClearanceRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    formType?: boolean
    programId?: boolean
    status?: boolean
    rejectionReason?: boolean
    resubmissionCount?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    currentStep?: boolean
    terminationReasonId?: boolean
    idReplacementReasonId?: boolean
    teacherClearanceReasonId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clearanceRequest"]>

  export type ClearanceRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    formType?: boolean
    programId?: boolean
    status?: boolean
    rejectionReason?: boolean
    resubmissionCount?: boolean
    submittedAt?: boolean
    updatedAt?: boolean
    currentStep?: boolean
    terminationReasonId?: boolean
    idReplacementReasonId?: boolean
    teacherClearanceReasonId?: boolean
  }

  export type ClearanceRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "formType" | "programId" | "status" | "rejectionReason" | "resubmissionCount" | "submittedAt" | "updatedAt" | "currentStep" | "terminationReasonId" | "idReplacementReasonId" | "teacherClearanceReasonId", ExtArgs["result"]["clearanceRequest"]>
  export type ClearanceRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
    terminationReason?: boolean | ClearanceRequest$terminationReasonArgs<ExtArgs>
    idReplacementReason?: boolean | ClearanceRequest$idReplacementReasonArgs<ExtArgs>
    teacherClearanceReason?: boolean | ClearanceRequest$teacherClearanceReasonArgs<ExtArgs>
    approvalActions?: boolean | ClearanceRequest$approvalActionsArgs<ExtArgs>
    documents?: boolean | ClearanceRequest$documentsArgs<ExtArgs>
    notifications?: boolean | ClearanceRequest$notificationsArgs<ExtArgs>
    certificate?: boolean | ClearanceRequest$certificateArgs<ExtArgs>
    auditLogs?: boolean | ClearanceRequest$auditLogsArgs<ExtArgs>
    _count?: boolean | ClearanceRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClearanceRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
  }
  export type ClearanceRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    program?: boolean | ProgramDefaultArgs<ExtArgs>
  }

  export type $ClearanceRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClearanceRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      program: Prisma.$ProgramPayload<ExtArgs>
      terminationReason: Prisma.$TerminationReasonPayload<ExtArgs> | null
      idReplacementReason: Prisma.$IdReplacementReasonPayload<ExtArgs> | null
      teacherClearanceReason: Prisma.$TeacherClearanceReasonPayload<ExtArgs> | null
      approvalActions: Prisma.$ApprovalActionPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      certificate: Prisma.$CertificatePayload<ExtArgs> | null
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      formType: $Enums.FormType
      programId: string
      status: $Enums.RequestStatus
      rejectionReason: string | null
      resubmissionCount: number
      submittedAt: Date
      updatedAt: Date
      currentStep: number
      terminationReasonId: string | null
      idReplacementReasonId: string | null
      teacherClearanceReasonId: string | null
    }, ExtArgs["result"]["clearanceRequest"]>
    composites: {}
  }

  type ClearanceRequestGetPayload<S extends boolean | null | undefined | ClearanceRequestDefaultArgs> = $Result.GetResult<Prisma.$ClearanceRequestPayload, S>

  type ClearanceRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClearanceRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClearanceRequestCountAggregateInputType | true
    }

  export interface ClearanceRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClearanceRequest'], meta: { name: 'ClearanceRequest' } }
    /**
     * Find zero or one ClearanceRequest that matches the filter.
     * @param {ClearanceRequestFindUniqueArgs} args - Arguments to find a ClearanceRequest
     * @example
     * // Get one ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClearanceRequestFindUniqueArgs>(args: SelectSubset<T, ClearanceRequestFindUniqueArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClearanceRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClearanceRequestFindUniqueOrThrowArgs} args - Arguments to find a ClearanceRequest
     * @example
     * // Get one ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClearanceRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ClearanceRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClearanceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestFindFirstArgs} args - Arguments to find a ClearanceRequest
     * @example
     * // Get one ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClearanceRequestFindFirstArgs>(args?: SelectSubset<T, ClearanceRequestFindFirstArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClearanceRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestFindFirstOrThrowArgs} args - Arguments to find a ClearanceRequest
     * @example
     * // Get one ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClearanceRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ClearanceRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClearanceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClearanceRequests
     * const clearanceRequests = await prisma.clearanceRequest.findMany()
     * 
     * // Get first 10 ClearanceRequests
     * const clearanceRequests = await prisma.clearanceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clearanceRequestWithIdOnly = await prisma.clearanceRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClearanceRequestFindManyArgs>(args?: SelectSubset<T, ClearanceRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClearanceRequest.
     * @param {ClearanceRequestCreateArgs} args - Arguments to create a ClearanceRequest.
     * @example
     * // Create one ClearanceRequest
     * const ClearanceRequest = await prisma.clearanceRequest.create({
     *   data: {
     *     // ... data to create a ClearanceRequest
     *   }
     * })
     * 
     */
    create<T extends ClearanceRequestCreateArgs>(args: SelectSubset<T, ClearanceRequestCreateArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClearanceRequests.
     * @param {ClearanceRequestCreateManyArgs} args - Arguments to create many ClearanceRequests.
     * @example
     * // Create many ClearanceRequests
     * const clearanceRequest = await prisma.clearanceRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClearanceRequestCreateManyArgs>(args?: SelectSubset<T, ClearanceRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClearanceRequests and returns the data saved in the database.
     * @param {ClearanceRequestCreateManyAndReturnArgs} args - Arguments to create many ClearanceRequests.
     * @example
     * // Create many ClearanceRequests
     * const clearanceRequest = await prisma.clearanceRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClearanceRequests and only return the `id`
     * const clearanceRequestWithIdOnly = await prisma.clearanceRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClearanceRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ClearanceRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClearanceRequest.
     * @param {ClearanceRequestDeleteArgs} args - Arguments to delete one ClearanceRequest.
     * @example
     * // Delete one ClearanceRequest
     * const ClearanceRequest = await prisma.clearanceRequest.delete({
     *   where: {
     *     // ... filter to delete one ClearanceRequest
     *   }
     * })
     * 
     */
    delete<T extends ClearanceRequestDeleteArgs>(args: SelectSubset<T, ClearanceRequestDeleteArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClearanceRequest.
     * @param {ClearanceRequestUpdateArgs} args - Arguments to update one ClearanceRequest.
     * @example
     * // Update one ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClearanceRequestUpdateArgs>(args: SelectSubset<T, ClearanceRequestUpdateArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClearanceRequests.
     * @param {ClearanceRequestDeleteManyArgs} args - Arguments to filter ClearanceRequests to delete.
     * @example
     * // Delete a few ClearanceRequests
     * const { count } = await prisma.clearanceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClearanceRequestDeleteManyArgs>(args?: SelectSubset<T, ClearanceRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClearanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClearanceRequests
     * const clearanceRequest = await prisma.clearanceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClearanceRequestUpdateManyArgs>(args: SelectSubset<T, ClearanceRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClearanceRequests and returns the data updated in the database.
     * @param {ClearanceRequestUpdateManyAndReturnArgs} args - Arguments to update many ClearanceRequests.
     * @example
     * // Update many ClearanceRequests
     * const clearanceRequest = await prisma.clearanceRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClearanceRequests and only return the `id`
     * const clearanceRequestWithIdOnly = await prisma.clearanceRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClearanceRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, ClearanceRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClearanceRequest.
     * @param {ClearanceRequestUpsertArgs} args - Arguments to update or create a ClearanceRequest.
     * @example
     * // Update or create a ClearanceRequest
     * const clearanceRequest = await prisma.clearanceRequest.upsert({
     *   create: {
     *     // ... data to create a ClearanceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClearanceRequest we want to update
     *   }
     * })
     */
    upsert<T extends ClearanceRequestUpsertArgs>(args: SelectSubset<T, ClearanceRequestUpsertArgs<ExtArgs>>): Prisma__ClearanceRequestClient<$Result.GetResult<Prisma.$ClearanceRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClearanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestCountArgs} args - Arguments to filter ClearanceRequests to count.
     * @example
     * // Count the number of ClearanceRequests
     * const count = await prisma.clearanceRequest.count({
     *   where: {
     *     // ... the filter for the ClearanceRequests we want to count
     *   }
     * })
    **/
    count<T extends ClearanceRequestCountArgs>(
      args?: Subset<T, ClearanceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClearanceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClearanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClearanceRequestAggregateArgs>(args: Subset<T, ClearanceRequestAggregateArgs>): Prisma.PrismaPromise<GetClearanceRequestAggregateType<T>>

    /**
     * Group by ClearanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClearanceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClearanceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClearanceRequestGroupByArgs['orderBy'] }
        : { orderBy?: ClearanceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClearanceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClearanceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClearanceRequest model
   */
  readonly fields: ClearanceRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClearanceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClearanceRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    program<T extends ProgramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProgramDefaultArgs<ExtArgs>>): Prisma__ProgramClient<$Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    terminationReason<T extends ClearanceRequest$terminationReasonArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$terminationReasonArgs<ExtArgs>>): Prisma__TerminationReasonClient<$Result.GetResult<Prisma.$TerminationReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    idReplacementReason<T extends ClearanceRequest$idReplacementReasonArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$idReplacementReasonArgs<ExtArgs>>): Prisma__IdReplacementReasonClient<$Result.GetResult<Prisma.$IdReplacementReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teacherClearanceReason<T extends ClearanceRequest$teacherClearanceReasonArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$teacherClearanceReasonArgs<ExtArgs>>): Prisma__TeacherClearanceReasonClient<$Result.GetResult<Prisma.$TeacherClearanceReasonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    approvalActions<T extends ClearanceRequest$approvalActionsArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$approvalActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends ClearanceRequest$documentsArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends ClearanceRequest$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificate<T extends ClearanceRequest$certificateArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$certificateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    auditLogs<T extends ClearanceRequest$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, ClearanceRequest$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClearanceRequest model
   */
  interface ClearanceRequestFieldRefs {
    readonly id: FieldRef<"ClearanceRequest", 'String'>
    readonly userId: FieldRef<"ClearanceRequest", 'String'>
    readonly formType: FieldRef<"ClearanceRequest", 'FormType'>
    readonly programId: FieldRef<"ClearanceRequest", 'String'>
    readonly status: FieldRef<"ClearanceRequest", 'RequestStatus'>
    readonly rejectionReason: FieldRef<"ClearanceRequest", 'String'>
    readonly resubmissionCount: FieldRef<"ClearanceRequest", 'Int'>
    readonly submittedAt: FieldRef<"ClearanceRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"ClearanceRequest", 'DateTime'>
    readonly currentStep: FieldRef<"ClearanceRequest", 'Int'>
    readonly terminationReasonId: FieldRef<"ClearanceRequest", 'String'>
    readonly idReplacementReasonId: FieldRef<"ClearanceRequest", 'String'>
    readonly teacherClearanceReasonId: FieldRef<"ClearanceRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClearanceRequest findUnique
   */
  export type ClearanceRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ClearanceRequest to fetch.
     */
    where: ClearanceRequestWhereUniqueInput
  }

  /**
   * ClearanceRequest findUniqueOrThrow
   */
  export type ClearanceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ClearanceRequest to fetch.
     */
    where: ClearanceRequestWhereUniqueInput
  }

  /**
   * ClearanceRequest findFirst
   */
  export type ClearanceRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ClearanceRequest to fetch.
     */
    where?: ClearanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClearanceRequests to fetch.
     */
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClearanceRequests.
     */
    cursor?: ClearanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClearanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClearanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClearanceRequests.
     */
    distinct?: ClearanceRequestScalarFieldEnum | ClearanceRequestScalarFieldEnum[]
  }

  /**
   * ClearanceRequest findFirstOrThrow
   */
  export type ClearanceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ClearanceRequest to fetch.
     */
    where?: ClearanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClearanceRequests to fetch.
     */
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClearanceRequests.
     */
    cursor?: ClearanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClearanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClearanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClearanceRequests.
     */
    distinct?: ClearanceRequestScalarFieldEnum | ClearanceRequestScalarFieldEnum[]
  }

  /**
   * ClearanceRequest findMany
   */
  export type ClearanceRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ClearanceRequests to fetch.
     */
    where?: ClearanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClearanceRequests to fetch.
     */
    orderBy?: ClearanceRequestOrderByWithRelationInput | ClearanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClearanceRequests.
     */
    cursor?: ClearanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClearanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClearanceRequests.
     */
    skip?: number
    distinct?: ClearanceRequestScalarFieldEnum | ClearanceRequestScalarFieldEnum[]
  }

  /**
   * ClearanceRequest create
   */
  export type ClearanceRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a ClearanceRequest.
     */
    data: XOR<ClearanceRequestCreateInput, ClearanceRequestUncheckedCreateInput>
  }

  /**
   * ClearanceRequest createMany
   */
  export type ClearanceRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClearanceRequests.
     */
    data: ClearanceRequestCreateManyInput | ClearanceRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClearanceRequest createManyAndReturn
   */
  export type ClearanceRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * The data used to create many ClearanceRequests.
     */
    data: ClearanceRequestCreateManyInput | ClearanceRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClearanceRequest update
   */
  export type ClearanceRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a ClearanceRequest.
     */
    data: XOR<ClearanceRequestUpdateInput, ClearanceRequestUncheckedUpdateInput>
    /**
     * Choose, which ClearanceRequest to update.
     */
    where: ClearanceRequestWhereUniqueInput
  }

  /**
   * ClearanceRequest updateMany
   */
  export type ClearanceRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClearanceRequests.
     */
    data: XOR<ClearanceRequestUpdateManyMutationInput, ClearanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which ClearanceRequests to update
     */
    where?: ClearanceRequestWhereInput
    /**
     * Limit how many ClearanceRequests to update.
     */
    limit?: number
  }

  /**
   * ClearanceRequest updateManyAndReturn
   */
  export type ClearanceRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * The data used to update ClearanceRequests.
     */
    data: XOR<ClearanceRequestUpdateManyMutationInput, ClearanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which ClearanceRequests to update
     */
    where?: ClearanceRequestWhereInput
    /**
     * Limit how many ClearanceRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClearanceRequest upsert
   */
  export type ClearanceRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the ClearanceRequest to update in case it exists.
     */
    where: ClearanceRequestWhereUniqueInput
    /**
     * In case the ClearanceRequest found by the `where` argument doesn't exist, create a new ClearanceRequest with this data.
     */
    create: XOR<ClearanceRequestCreateInput, ClearanceRequestUncheckedCreateInput>
    /**
     * In case the ClearanceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClearanceRequestUpdateInput, ClearanceRequestUncheckedUpdateInput>
  }

  /**
   * ClearanceRequest delete
   */
  export type ClearanceRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
    /**
     * Filter which ClearanceRequest to delete.
     */
    where: ClearanceRequestWhereUniqueInput
  }

  /**
   * ClearanceRequest deleteMany
   */
  export type ClearanceRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClearanceRequests to delete
     */
    where?: ClearanceRequestWhereInput
    /**
     * Limit how many ClearanceRequests to delete.
     */
    limit?: number
  }

  /**
   * ClearanceRequest.terminationReason
   */
  export type ClearanceRequest$terminationReasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminationReason
     */
    select?: TerminationReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TerminationReason
     */
    omit?: TerminationReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminationReasonInclude<ExtArgs> | null
    where?: TerminationReasonWhereInput
  }

  /**
   * ClearanceRequest.idReplacementReason
   */
  export type ClearanceRequest$idReplacementReasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdReplacementReason
     */
    select?: IdReplacementReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IdReplacementReason
     */
    omit?: IdReplacementReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdReplacementReasonInclude<ExtArgs> | null
    where?: IdReplacementReasonWhereInput
  }

  /**
   * ClearanceRequest.teacherClearanceReason
   */
  export type ClearanceRequest$teacherClearanceReasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClearanceReason
     */
    select?: TeacherClearanceReasonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherClearanceReason
     */
    omit?: TeacherClearanceReasonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClearanceReasonInclude<ExtArgs> | null
    where?: TeacherClearanceReasonWhereInput
  }

  /**
   * ClearanceRequest.approvalActions
   */
  export type ClearanceRequest$approvalActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovalAction
     */
    select?: ApprovalActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovalAction
     */
    omit?: ApprovalActionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalActionInclude<ExtArgs> | null
    where?: ApprovalActionWhereInput
    orderBy?: ApprovalActionOrderByWithRelationInput | ApprovalActionOrderByWithRelationInput[]
    cursor?: ApprovalActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalActionScalarFieldEnum | ApprovalActionScalarFieldEnum[]
  }

  /**
   * ClearanceRequest.documents
   */
  export type ClearanceRequest$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * ClearanceRequest.notifications
   */
  export type ClearanceRequest$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * ClearanceRequest.certificate
   */
  export type ClearanceRequest$certificateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
  }

  /**
   * ClearanceRequest.auditLogs
   */
  export type ClearanceRequest$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * ClearanceRequest without action
   */
  export type ClearanceRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClearanceRequest
     */
    select?: ClearanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClearanceRequest
     */
    omit?: ClearanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClearanceRequestInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TerminationReasonScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    reason: 'reason',
    description: 'description'
  };

  export type TerminationReasonScalarFieldEnum = (typeof TerminationReasonScalarFieldEnum)[keyof typeof TerminationReasonScalarFieldEnum]


  export const IdReplacementReasonScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    reason: 'reason',
    description: 'description'
  };

  export type IdReplacementReasonScalarFieldEnum = (typeof IdReplacementReasonScalarFieldEnum)[keyof typeof IdReplacementReasonScalarFieldEnum]


  export const TeacherClearanceReasonScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    reason: 'reason'
  };

  export type TeacherClearanceReasonScalarFieldEnum = (typeof TeacherClearanceReasonScalarFieldEnum)[keyof typeof TeacherClearanceReasonScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    documentTypeId: 'documentTypeId',
    filePath: 'filePath',
    uploadedAt: 'uploadedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const DocumentTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    requiredFor: 'requiredFor'
  };

  export type DocumentTypeScalarFieldEnum = (typeof DocumentTypeScalarFieldEnum)[keyof typeof DocumentTypeScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    filePath: 'filePath',
    qrCode: 'qrCode',
    signatures: 'signatures',
    issuedAt: 'issuedAt'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clearanceRequestId: 'clearanceRequestId',
    title: 'title',
    message: 'message',
    emailSubject: 'emailSubject',
    type: 'type',
    status: 'status',
    read: 'read',
    sentAt: 'sentAt',
    emailSentAt: 'emailSentAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clearanceRequestId: 'clearanceRequestId',
    adminId: 'adminId',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    passwordHash: 'passwordHash',
    firstName: 'firstName',
    fatherName: 'fatherName',
    grandfatherName: 'grandfatherName',
    email: 'email',
    role: 'role',
    status: 'status',
    isFirstLogin: 'isFirstLogin',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    loginAttempts: 'loginAttempts',
    isLocked: 'isLocked',
    lockedUntil: 'lockedUntil',
    lockedAt: 'lockedAt',
    emailVerified: 'emailVerified',
    emailToken: 'emailToken',
    emailTokenExpiry: 'emailTokenExpiry',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    browserFingerprint: 'browserFingerprint'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    startDate: 'startDate',
    programId: 'programId',
    currentYear: 'currentYear',
    semester: 'semester',
    academicStatus: 'academicStatus',
    departmentId: 'departmentId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    hireDate: 'hireDate',
    position: 'position',
    departmentId: 'departmentId',
    employmentStatus: 'employmentStatus',
    yearsOfService: 'yearsOfService'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissions: 'permissions'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const ProgramScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    category: 'category',
    departmentId: 'departmentId',
    description: 'description'
  };

  export type ProgramScalarFieldEnum = (typeof ProgramScalarFieldEnum)[keyof typeof ProgramScalarFieldEnum]


  export const OfficeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    departmentId: 'departmentId'
  };

  export type OfficeScalarFieldEnum = (typeof OfficeScalarFieldEnum)[keyof typeof OfficeScalarFieldEnum]


  export const ApproverScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    officeId: 'officeId',
    digitalSignature: 'digitalSignature',
    yearsOfExperience: 'yearsOfExperience',
    departmentId: 'departmentId'
  };

  export type ApproverScalarFieldEnum = (typeof ApproverScalarFieldEnum)[keyof typeof ApproverScalarFieldEnum]


  export const WorkflowRuleScalarFieldEnum: {
    id: 'id',
    formType: 'formType',
    programId: 'programId',
    description: 'description'
  };

  export type WorkflowRuleScalarFieldEnum = (typeof WorkflowRuleScalarFieldEnum)[keyof typeof WorkflowRuleScalarFieldEnum]


  export const WorkflowStepScalarFieldEnum: {
    id: 'id',
    workflowRuleId: 'workflowRuleId',
    stepOrder: 'stepOrder',
    officeId: 'officeId',
    description: 'description'
  };

  export type WorkflowStepScalarFieldEnum = (typeof WorkflowStepScalarFieldEnum)[keyof typeof WorkflowStepScalarFieldEnum]


  export const ApprovalActionScalarFieldEnum: {
    id: 'id',
    clearanceRequestId: 'clearanceRequestId',
    approverId: 'approverId',
    status: 'status',
    comment: 'comment',
    actionDate: 'actionDate',
    finalizedAt: 'finalizedAt',
    actionDueBy: 'actionDueBy'
  };

  export type ApprovalActionScalarFieldEnum = (typeof ApprovalActionScalarFieldEnum)[keyof typeof ApprovalActionScalarFieldEnum]


  export const ClearanceRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    formType: 'formType',
    programId: 'programId',
    status: 'status',
    rejectionReason: 'rejectionReason',
    resubmissionCount: 'resubmissionCount',
    submittedAt: 'submittedAt',
    updatedAt: 'updatedAt',
    currentStep: 'currentStep',
    terminationReasonId: 'terminationReasonId',
    idReplacementReasonId: 'idReplacementReasonId',
    teacherClearanceReasonId: 'teacherClearanceReasonId'
  };

  export type ClearanceRequestScalarFieldEnum = (typeof ClearanceRequestScalarFieldEnum)[keyof typeof ClearanceRequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'FormType[]'
   */
  export type ListEnumFormTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormType[]'>
    


  /**
   * Reference to a field of type 'FormType'
   */
  export type EnumFormTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FormType'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationStatus'
   */
  export type EnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus'>
    


  /**
   * Reference to a field of type 'NotificationStatus[]'
   */
  export type ListEnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AcademicStatus'
   */
  export type EnumAcademicStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AcademicStatus'>
    


  /**
   * Reference to a field of type 'AcademicStatus[]'
   */
  export type ListEnumAcademicStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AcademicStatus[]'>
    


  /**
   * Reference to a field of type 'EmploymentStatus'
   */
  export type EnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus'>
    


  /**
   * Reference to a field of type 'EmploymentStatus[]'
   */
  export type ListEnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus[]'>
    


  /**
   * Reference to a field of type 'Permission[]'
   */
  export type ListEnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission[]'>
    


  /**
   * Reference to a field of type 'Permission'
   */
  export type EnumPermissionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Permission'>
    


  /**
   * Reference to a field of type 'ProgramType'
   */
  export type EnumProgramTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramType'>
    


  /**
   * Reference to a field of type 'ProgramType[]'
   */
  export type ListEnumProgramTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramType[]'>
    


  /**
   * Reference to a field of type 'ProgramCategory'
   */
  export type EnumProgramCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramCategory'>
    


  /**
   * Reference to a field of type 'ProgramCategory[]'
   */
  export type ListEnumProgramCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgramCategory[]'>
    


  /**
   * Reference to a field of type 'ApprovalStatus'
   */
  export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


  /**
   * Reference to a field of type 'ApprovalStatus[]'
   */
  export type ListEnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus[]'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    


  /**
   * Reference to a field of type 'RequestStatus[]'
   */
  export type ListEnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TerminationReasonWhereInput = {
    AND?: TerminationReasonWhereInput | TerminationReasonWhereInput[]
    OR?: TerminationReasonWhereInput[]
    NOT?: TerminationReasonWhereInput | TerminationReasonWhereInput[]
    id?: StringFilter<"TerminationReason"> | string
    clearanceRequestId?: StringFilter<"TerminationReason"> | string
    reason?: StringFilter<"TerminationReason"> | string
    description?: StringNullableFilter<"TerminationReason"> | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }

  export type TerminationReasonOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
  }

  export type TerminationReasonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clearanceRequestId?: string
    AND?: TerminationReasonWhereInput | TerminationReasonWhereInput[]
    OR?: TerminationReasonWhereInput[]
    NOT?: TerminationReasonWhereInput | TerminationReasonWhereInput[]
    reason?: StringFilter<"TerminationReason"> | string
    description?: StringNullableFilter<"TerminationReason"> | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }, "id" | "clearanceRequestId">

  export type TerminationReasonOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: TerminationReasonCountOrderByAggregateInput
    _max?: TerminationReasonMaxOrderByAggregateInput
    _min?: TerminationReasonMinOrderByAggregateInput
  }

  export type TerminationReasonScalarWhereWithAggregatesInput = {
    AND?: TerminationReasonScalarWhereWithAggregatesInput | TerminationReasonScalarWhereWithAggregatesInput[]
    OR?: TerminationReasonScalarWhereWithAggregatesInput[]
    NOT?: TerminationReasonScalarWhereWithAggregatesInput | TerminationReasonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TerminationReason"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"TerminationReason"> | string
    reason?: StringWithAggregatesFilter<"TerminationReason"> | string
    description?: StringNullableWithAggregatesFilter<"TerminationReason"> | string | null
  }

  export type IdReplacementReasonWhereInput = {
    AND?: IdReplacementReasonWhereInput | IdReplacementReasonWhereInput[]
    OR?: IdReplacementReasonWhereInput[]
    NOT?: IdReplacementReasonWhereInput | IdReplacementReasonWhereInput[]
    id?: StringFilter<"IdReplacementReason"> | string
    clearanceRequestId?: StringFilter<"IdReplacementReason"> | string
    reason?: StringFilter<"IdReplacementReason"> | string
    description?: StringNullableFilter<"IdReplacementReason"> | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }

  export type IdReplacementReasonOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
  }

  export type IdReplacementReasonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clearanceRequestId?: string
    AND?: IdReplacementReasonWhereInput | IdReplacementReasonWhereInput[]
    OR?: IdReplacementReasonWhereInput[]
    NOT?: IdReplacementReasonWhereInput | IdReplacementReasonWhereInput[]
    reason?: StringFilter<"IdReplacementReason"> | string
    description?: StringNullableFilter<"IdReplacementReason"> | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }, "id" | "clearanceRequestId">

  export type IdReplacementReasonOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: IdReplacementReasonCountOrderByAggregateInput
    _max?: IdReplacementReasonMaxOrderByAggregateInput
    _min?: IdReplacementReasonMinOrderByAggregateInput
  }

  export type IdReplacementReasonScalarWhereWithAggregatesInput = {
    AND?: IdReplacementReasonScalarWhereWithAggregatesInput | IdReplacementReasonScalarWhereWithAggregatesInput[]
    OR?: IdReplacementReasonScalarWhereWithAggregatesInput[]
    NOT?: IdReplacementReasonScalarWhereWithAggregatesInput | IdReplacementReasonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IdReplacementReason"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"IdReplacementReason"> | string
    reason?: StringWithAggregatesFilter<"IdReplacementReason"> | string
    description?: StringNullableWithAggregatesFilter<"IdReplacementReason"> | string | null
  }

  export type TeacherClearanceReasonWhereInput = {
    AND?: TeacherClearanceReasonWhereInput | TeacherClearanceReasonWhereInput[]
    OR?: TeacherClearanceReasonWhereInput[]
    NOT?: TeacherClearanceReasonWhereInput | TeacherClearanceReasonWhereInput[]
    id?: StringFilter<"TeacherClearanceReason"> | string
    clearanceRequestId?: StringFilter<"TeacherClearanceReason"> | string
    reason?: StringFilter<"TeacherClearanceReason"> | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }

  export type TeacherClearanceReasonOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
  }

  export type TeacherClearanceReasonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clearanceRequestId?: string
    AND?: TeacherClearanceReasonWhereInput | TeacherClearanceReasonWhereInput[]
    OR?: TeacherClearanceReasonWhereInput[]
    NOT?: TeacherClearanceReasonWhereInput | TeacherClearanceReasonWhereInput[]
    reason?: StringFilter<"TeacherClearanceReason"> | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }, "id" | "clearanceRequestId">

  export type TeacherClearanceReasonOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    _count?: TeacherClearanceReasonCountOrderByAggregateInput
    _max?: TeacherClearanceReasonMaxOrderByAggregateInput
    _min?: TeacherClearanceReasonMinOrderByAggregateInput
  }

  export type TeacherClearanceReasonScalarWhereWithAggregatesInput = {
    AND?: TeacherClearanceReasonScalarWhereWithAggregatesInput | TeacherClearanceReasonScalarWhereWithAggregatesInput[]
    OR?: TeacherClearanceReasonScalarWhereWithAggregatesInput[]
    NOT?: TeacherClearanceReasonScalarWhereWithAggregatesInput | TeacherClearanceReasonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeacherClearanceReason"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"TeacherClearanceReason"> | string
    reason?: StringWithAggregatesFilter<"TeacherClearanceReason"> | string
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    clearanceRequestId?: StringFilter<"Document"> | string
    documentTypeId?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    documentTypeId?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
    documentType?: DocumentTypeOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    clearanceRequestId?: StringFilter<"Document"> | string
    documentTypeId?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    documentTypeId?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"Document"> | string
    documentTypeId?: StringWithAggregatesFilter<"Document"> | string
    filePath?: StringWithAggregatesFilter<"Document"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type DocumentTypeWhereInput = {
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    id?: StringFilter<"DocumentType"> | string
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    requiredFor?: EnumFormTypeNullableListFilter<"DocumentType">
    documents?: DocumentListRelationFilter
  }

  export type DocumentTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    requiredFor?: SortOrder
    documents?: DocumentOrderByRelationAggregateInput
  }

  export type DocumentTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    requiredFor?: EnumFormTypeNullableListFilter<"DocumentType">
    documents?: DocumentListRelationFilter
  }, "id">

  export type DocumentTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    requiredFor?: SortOrder
    _count?: DocumentTypeCountOrderByAggregateInput
    _max?: DocumentTypeMaxOrderByAggregateInput
    _min?: DocumentTypeMinOrderByAggregateInput
  }

  export type DocumentTypeScalarWhereWithAggregatesInput = {
    AND?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    OR?: DocumentTypeScalarWhereWithAggregatesInput[]
    NOT?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DocumentType"> | string
    name?: StringWithAggregatesFilter<"DocumentType"> | string
    description?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    requiredFor?: EnumFormTypeNullableListFilter<"DocumentType">
  }

  export type CertificateWhereInput = {
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    id?: StringFilter<"Certificate"> | string
    clearanceRequestId?: StringFilter<"Certificate"> | string
    filePath?: StringFilter<"Certificate"> | string
    qrCode?: StringFilter<"Certificate"> | string
    signatures?: JsonNullableFilter<"Certificate">
    issuedAt?: DateTimeFilter<"Certificate"> | Date | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }

  export type CertificateOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    filePath?: SortOrder
    qrCode?: SortOrder
    signatures?: SortOrderInput | SortOrder
    issuedAt?: SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
  }

  export type CertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clearanceRequestId?: string
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    filePath?: StringFilter<"Certificate"> | string
    qrCode?: StringFilter<"Certificate"> | string
    signatures?: JsonNullableFilter<"Certificate">
    issuedAt?: DateTimeFilter<"Certificate"> | Date | string
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
  }, "id" | "clearanceRequestId">

  export type CertificateOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    filePath?: SortOrder
    qrCode?: SortOrder
    signatures?: SortOrderInput | SortOrder
    issuedAt?: SortOrder
    _count?: CertificateCountOrderByAggregateInput
    _max?: CertificateMaxOrderByAggregateInput
    _min?: CertificateMinOrderByAggregateInput
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    OR?: CertificateScalarWhereWithAggregatesInput[]
    NOT?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Certificate"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"Certificate"> | string
    filePath?: StringWithAggregatesFilter<"Certificate"> | string
    qrCode?: StringWithAggregatesFilter<"Certificate"> | string
    signatures?: JsonNullableWithAggregatesFilter<"Certificate">
    issuedAt?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    clearanceRequestId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    emailSubject?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    read?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeFilter<"Notification"> | Date | string
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clearanceRequest?: XOR<ClearanceRequestNullableScalarRelationFilter, ClearanceRequestWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    emailSubject?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    read?: SortOrder
    sentAt?: SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    clearanceRequestId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    emailSubject?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    read?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeFilter<"Notification"> | Date | string
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clearanceRequest?: XOR<ClearanceRequestNullableScalarRelationFilter, ClearanceRequestWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrderInput | SortOrder
    title?: SortOrder
    message?: SortOrder
    emailSubject?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    read?: SortOrder
    sentAt?: SortOrder
    emailSentAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    clearanceRequestId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    emailSubject?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    status?: EnumNotificationStatusWithAggregatesFilter<"Notification"> | $Enums.NotificationStatus
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    sentAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    emailSentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    clearanceRequestId?: StringNullableFilter<"AuditLog"> | string | null
    adminId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clearanceRequest?: XOR<ClearanceRequestNullableScalarRelationFilter, ClearanceRequestWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    clearanceRequestId?: StringNullableFilter<"AuditLog"> | string | null
    adminId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    clearanceRequest?: XOR<ClearanceRequestNullableScalarRelationFilter, ClearanceRequestWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrderInput | SortOrder
    adminId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    clearanceRequestId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    adminId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringWithAggregatesFilter<"AuditLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    fatherName?: StringFilter<"User"> | string
    grandfatherName?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    isFirstLogin?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    loginAttempts?: IntFilter<"User"> | number
    isLocked?: BoolFilter<"User"> | boolean
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    emailToken?: StringNullableFilter<"User"> | string | null
    emailTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    browserFingerprint?: StringNullableFilter<"User"> | string | null
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    approver?: XOR<ApproverNullableScalarRelationFilter, ApproverWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    notifications?: NotificationListRelationFilter
    clearanceRequests?: ClearanceRequestListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    fatherName?: SortOrder
    grandfatherName?: SortOrder
    email?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    isFirstLogin?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: SortOrder
    isLocked?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    lockedAt?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailToken?: SortOrderInput | SortOrder
    emailTokenExpiry?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    browserFingerprint?: SortOrderInput | SortOrder
    student?: StudentOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    approver?: ApproverOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    clearanceRequests?: ClearanceRequestOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    fatherName?: StringFilter<"User"> | string
    grandfatherName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    isFirstLogin?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    loginAttempts?: IntFilter<"User"> | number
    isLocked?: BoolFilter<"User"> | boolean
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    emailToken?: StringNullableFilter<"User"> | string | null
    emailTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    browserFingerprint?: StringNullableFilter<"User"> | string | null
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
    teacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    approver?: XOR<ApproverNullableScalarRelationFilter, ApproverWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
    notifications?: NotificationListRelationFilter
    clearanceRequests?: ClearanceRequestListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    fatherName?: SortOrder
    grandfatherName?: SortOrder
    email?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    isFirstLogin?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: SortOrder
    isLocked?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    lockedAt?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailToken?: SortOrderInput | SortOrder
    emailTokenExpiry?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    browserFingerprint?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    fatherName?: StringWithAggregatesFilter<"User"> | string
    grandfatherName?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    isFirstLogin?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    loginAttempts?: IntWithAggregatesFilter<"User"> | number
    isLocked?: BoolWithAggregatesFilter<"User"> | boolean
    lockedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lockedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    browserFingerprint?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    userId?: StringFilter<"Student"> | string
    startDate?: DateTimeFilter<"Student"> | Date | string
    programId?: StringFilter<"Student"> | string
    currentYear?: IntFilter<"Student"> | number
    semester?: IntFilter<"Student"> | number
    academicStatus?: EnumAcademicStatusFilter<"Student"> | $Enums.AcademicStatus
    departmentId?: StringFilter<"Student"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    programId?: SortOrder
    currentYear?: SortOrder
    semester?: SortOrder
    academicStatus?: SortOrder
    departmentId?: SortOrder
    user?: UserOrderByWithRelationInput
    program?: ProgramOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    startDate?: DateTimeFilter<"Student"> | Date | string
    programId?: StringFilter<"Student"> | string
    currentYear?: IntFilter<"Student"> | number
    semester?: IntFilter<"Student"> | number
    academicStatus?: EnumAcademicStatusFilter<"Student"> | $Enums.AcademicStatus
    departmentId?: StringFilter<"Student"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id" | "userId">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    programId?: SortOrder
    currentYear?: SortOrder
    semester?: SortOrder
    academicStatus?: SortOrder
    departmentId?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    userId?: StringWithAggregatesFilter<"Student"> | string
    startDate?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    programId?: StringWithAggregatesFilter<"Student"> | string
    currentYear?: IntWithAggregatesFilter<"Student"> | number
    semester?: IntWithAggregatesFilter<"Student"> | number
    academicStatus?: EnumAcademicStatusWithAggregatesFilter<"Student"> | $Enums.AcademicStatus
    departmentId?: StringWithAggregatesFilter<"Student"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    userId?: StringFilter<"Teacher"> | string
    hireDate?: DateTimeFilter<"Teacher"> | Date | string
    position?: StringFilter<"Teacher"> | string
    departmentId?: StringFilter<"Teacher"> | string
    employmentStatus?: EnumEmploymentStatusFilter<"Teacher"> | $Enums.EmploymentStatus
    yearsOfService?: IntFilter<"Teacher"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    hireDate?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    employmentStatus?: SortOrder
    yearsOfService?: SortOrder
    user?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    hireDate?: DateTimeFilter<"Teacher"> | Date | string
    position?: StringFilter<"Teacher"> | string
    departmentId?: StringFilter<"Teacher"> | string
    employmentStatus?: EnumEmploymentStatusFilter<"Teacher"> | $Enums.EmploymentStatus
    yearsOfService?: IntFilter<"Teacher"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id" | "userId">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    hireDate?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    employmentStatus?: SortOrder
    yearsOfService?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    userId?: StringWithAggregatesFilter<"Teacher"> | string
    hireDate?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    position?: StringWithAggregatesFilter<"Teacher"> | string
    departmentId?: StringWithAggregatesFilter<"Teacher"> | string
    employmentStatus?: EnumEmploymentStatusWithAggregatesFilter<"Teacher"> | $Enums.EmploymentStatus
    yearsOfService?: IntWithAggregatesFilter<"Teacher"> | number
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    userId?: StringFilter<"Admin"> | string
    permissions?: EnumPermissionNullableListFilter<"Admin">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    auditLogs?: AuditLogListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    user?: UserOrderByWithRelationInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    permissions?: EnumPermissionNullableListFilter<"Admin">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "userId">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    userId?: StringWithAggregatesFilter<"Admin"> | string
    permissions?: EnumPermissionNullableListFilter<"Admin">
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    teachers?: TeacherListRelationFilter
    students?: StudentListRelationFilter
    approvers?: ApproverListRelationFilter
    offices?: OfficeListRelationFilter
    programs?: ProgramListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    teachers?: TeacherOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    approvers?: ApproverOrderByRelationAggregateInput
    offices?: OfficeOrderByRelationAggregateInput
    programs?: ProgramOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    description?: StringNullableFilter<"Department"> | string | null
    teachers?: TeacherListRelationFilter
    students?: StudentListRelationFilter
    approvers?: ApproverListRelationFilter
    offices?: OfficeListRelationFilter
    programs?: ProgramListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
  }

  export type ProgramWhereInput = {
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    type?: EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
    category?: EnumProgramCategoryFilter<"Program"> | $Enums.ProgramCategory
    departmentId?: StringFilter<"Program"> | string
    description?: StringNullableFilter<"Program"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    students?: StudentListRelationFilter
    workflowRules?: WorkflowRuleListRelationFilter
    clearanceRequests?: ClearanceRequestListRelationFilter
  }

  export type ProgramOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    description?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
    workflowRules?: WorkflowRuleOrderByRelationAggregateInput
    clearanceRequests?: ClearanceRequestOrderByRelationAggregateInput
  }

  export type ProgramWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProgramWhereInput | ProgramWhereInput[]
    OR?: ProgramWhereInput[]
    NOT?: ProgramWhereInput | ProgramWhereInput[]
    name?: StringFilter<"Program"> | string
    type?: EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
    category?: EnumProgramCategoryFilter<"Program"> | $Enums.ProgramCategory
    departmentId?: StringFilter<"Program"> | string
    description?: StringNullableFilter<"Program"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    students?: StudentListRelationFilter
    workflowRules?: WorkflowRuleListRelationFilter
    clearanceRequests?: ClearanceRequestListRelationFilter
  }, "id">

  export type ProgramOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ProgramCountOrderByAggregateInput
    _max?: ProgramMaxOrderByAggregateInput
    _min?: ProgramMinOrderByAggregateInput
  }

  export type ProgramScalarWhereWithAggregatesInput = {
    AND?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    OR?: ProgramScalarWhereWithAggregatesInput[]
    NOT?: ProgramScalarWhereWithAggregatesInput | ProgramScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Program"> | string
    name?: StringWithAggregatesFilter<"Program"> | string
    type?: EnumProgramTypeWithAggregatesFilter<"Program"> | $Enums.ProgramType
    category?: EnumProgramCategoryWithAggregatesFilter<"Program"> | $Enums.ProgramCategory
    departmentId?: StringWithAggregatesFilter<"Program"> | string
    description?: StringNullableWithAggregatesFilter<"Program"> | string | null
  }

  export type OfficeWhereInput = {
    AND?: OfficeWhereInput | OfficeWhereInput[]
    OR?: OfficeWhereInput[]
    NOT?: OfficeWhereInput | OfficeWhereInput[]
    id?: StringFilter<"Office"> | string
    name?: StringFilter<"Office"> | string
    description?: StringNullableFilter<"Office"> | string | null
    departmentId?: StringNullableFilter<"Office"> | string | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    approvers?: ApproverListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
  }

  export type OfficeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    approvers?: ApproverOrderByRelationAggregateInput
    workflowSteps?: WorkflowStepOrderByRelationAggregateInput
  }

  export type OfficeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: OfficeWhereInput | OfficeWhereInput[]
    OR?: OfficeWhereInput[]
    NOT?: OfficeWhereInput | OfficeWhereInput[]
    description?: StringNullableFilter<"Office"> | string | null
    departmentId?: StringNullableFilter<"Office"> | string | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    approvers?: ApproverListRelationFilter
    workflowSteps?: WorkflowStepListRelationFilter
  }, "id" | "name">

  export type OfficeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: OfficeCountOrderByAggregateInput
    _max?: OfficeMaxOrderByAggregateInput
    _min?: OfficeMinOrderByAggregateInput
  }

  export type OfficeScalarWhereWithAggregatesInput = {
    AND?: OfficeScalarWhereWithAggregatesInput | OfficeScalarWhereWithAggregatesInput[]
    OR?: OfficeScalarWhereWithAggregatesInput[]
    NOT?: OfficeScalarWhereWithAggregatesInput | OfficeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Office"> | string
    name?: StringWithAggregatesFilter<"Office"> | string
    description?: StringNullableWithAggregatesFilter<"Office"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"Office"> | string | null
  }

  export type ApproverWhereInput = {
    AND?: ApproverWhereInput | ApproverWhereInput[]
    OR?: ApproverWhereInput[]
    NOT?: ApproverWhereInput | ApproverWhereInput[]
    id?: StringFilter<"Approver"> | string
    userId?: StringFilter<"Approver"> | string
    officeId?: StringFilter<"Approver"> | string
    digitalSignature?: StringNullableFilter<"Approver"> | string | null
    yearsOfExperience?: IntFilter<"Approver"> | number
    departmentId?: StringNullableFilter<"Approver"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    office?: XOR<OfficeScalarRelationFilter, OfficeWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    approvalActions?: ApprovalActionListRelationFilter
  }

  export type ApproverOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    officeId?: SortOrder
    digitalSignature?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    office?: OfficeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    approvalActions?: ApprovalActionOrderByRelationAggregateInput
  }

  export type ApproverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ApproverWhereInput | ApproverWhereInput[]
    OR?: ApproverWhereInput[]
    NOT?: ApproverWhereInput | ApproverWhereInput[]
    officeId?: StringFilter<"Approver"> | string
    digitalSignature?: StringNullableFilter<"Approver"> | string | null
    yearsOfExperience?: IntFilter<"Approver"> | number
    departmentId?: StringNullableFilter<"Approver"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    office?: XOR<OfficeScalarRelationFilter, OfficeWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    approvalActions?: ApprovalActionListRelationFilter
  }, "id" | "userId">

  export type ApproverOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    officeId?: SortOrder
    digitalSignature?: SortOrderInput | SortOrder
    yearsOfExperience?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: ApproverCountOrderByAggregateInput
    _avg?: ApproverAvgOrderByAggregateInput
    _max?: ApproverMaxOrderByAggregateInput
    _min?: ApproverMinOrderByAggregateInput
    _sum?: ApproverSumOrderByAggregateInput
  }

  export type ApproverScalarWhereWithAggregatesInput = {
    AND?: ApproverScalarWhereWithAggregatesInput | ApproverScalarWhereWithAggregatesInput[]
    OR?: ApproverScalarWhereWithAggregatesInput[]
    NOT?: ApproverScalarWhereWithAggregatesInput | ApproverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Approver"> | string
    userId?: StringWithAggregatesFilter<"Approver"> | string
    officeId?: StringWithAggregatesFilter<"Approver"> | string
    digitalSignature?: StringNullableWithAggregatesFilter<"Approver"> | string | null
    yearsOfExperience?: IntWithAggregatesFilter<"Approver"> | number
    departmentId?: StringNullableWithAggregatesFilter<"Approver"> | string | null
  }

  export type WorkflowRuleWhereInput = {
    AND?: WorkflowRuleWhereInput | WorkflowRuleWhereInput[]
    OR?: WorkflowRuleWhereInput[]
    NOT?: WorkflowRuleWhereInput | WorkflowRuleWhereInput[]
    id?: StringFilter<"WorkflowRule"> | string
    formType?: EnumFormTypeFilter<"WorkflowRule"> | $Enums.FormType
    programId?: StringNullableFilter<"WorkflowRule"> | string | null
    description?: StringNullableFilter<"WorkflowRule"> | string | null
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workflowSteps?: WorkflowStepListRelationFilter
  }

  export type WorkflowRuleOrderByWithRelationInput = {
    id?: SortOrder
    formType?: SortOrder
    programId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    program?: ProgramOrderByWithRelationInput
    workflowSteps?: WorkflowStepOrderByRelationAggregateInput
  }

  export type WorkflowRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    formType_programId?: WorkflowRuleFormTypeProgramIdCompoundUniqueInput
    AND?: WorkflowRuleWhereInput | WorkflowRuleWhereInput[]
    OR?: WorkflowRuleWhereInput[]
    NOT?: WorkflowRuleWhereInput | WorkflowRuleWhereInput[]
    formType?: EnumFormTypeFilter<"WorkflowRule"> | $Enums.FormType
    programId?: StringNullableFilter<"WorkflowRule"> | string | null
    description?: StringNullableFilter<"WorkflowRule"> | string | null
    program?: XOR<ProgramNullableScalarRelationFilter, ProgramWhereInput> | null
    workflowSteps?: WorkflowStepListRelationFilter
  }, "id" | "formType_programId">

  export type WorkflowRuleOrderByWithAggregationInput = {
    id?: SortOrder
    formType?: SortOrder
    programId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    _count?: WorkflowRuleCountOrderByAggregateInput
    _max?: WorkflowRuleMaxOrderByAggregateInput
    _min?: WorkflowRuleMinOrderByAggregateInput
  }

  export type WorkflowRuleScalarWhereWithAggregatesInput = {
    AND?: WorkflowRuleScalarWhereWithAggregatesInput | WorkflowRuleScalarWhereWithAggregatesInput[]
    OR?: WorkflowRuleScalarWhereWithAggregatesInput[]
    NOT?: WorkflowRuleScalarWhereWithAggregatesInput | WorkflowRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowRule"> | string
    formType?: EnumFormTypeWithAggregatesFilter<"WorkflowRule"> | $Enums.FormType
    programId?: StringNullableWithAggregatesFilter<"WorkflowRule"> | string | null
    description?: StringNullableWithAggregatesFilter<"WorkflowRule"> | string | null
  }

  export type WorkflowStepWhereInput = {
    AND?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    OR?: WorkflowStepWhereInput[]
    NOT?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    id?: StringFilter<"WorkflowStep"> | string
    workflowRuleId?: StringFilter<"WorkflowStep"> | string
    stepOrder?: IntFilter<"WorkflowStep"> | number
    officeId?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
    workflowRule?: XOR<WorkflowRuleScalarRelationFilter, WorkflowRuleWhereInput>
    office?: XOR<OfficeScalarRelationFilter, OfficeWhereInput>
  }

  export type WorkflowStepOrderByWithRelationInput = {
    id?: SortOrder
    workflowRuleId?: SortOrder
    stepOrder?: SortOrder
    officeId?: SortOrder
    description?: SortOrderInput | SortOrder
    workflowRule?: WorkflowRuleOrderByWithRelationInput
    office?: OfficeOrderByWithRelationInput
  }

  export type WorkflowStepWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workflowRuleId_stepOrder?: WorkflowStepWorkflowRuleIdStepOrderCompoundUniqueInput
    AND?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    OR?: WorkflowStepWhereInput[]
    NOT?: WorkflowStepWhereInput | WorkflowStepWhereInput[]
    workflowRuleId?: StringFilter<"WorkflowStep"> | string
    stepOrder?: IntFilter<"WorkflowStep"> | number
    officeId?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
    workflowRule?: XOR<WorkflowRuleScalarRelationFilter, WorkflowRuleWhereInput>
    office?: XOR<OfficeScalarRelationFilter, OfficeWhereInput>
  }, "id" | "workflowRuleId_stepOrder">

  export type WorkflowStepOrderByWithAggregationInput = {
    id?: SortOrder
    workflowRuleId?: SortOrder
    stepOrder?: SortOrder
    officeId?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: WorkflowStepCountOrderByAggregateInput
    _avg?: WorkflowStepAvgOrderByAggregateInput
    _max?: WorkflowStepMaxOrderByAggregateInput
    _min?: WorkflowStepMinOrderByAggregateInput
    _sum?: WorkflowStepSumOrderByAggregateInput
  }

  export type WorkflowStepScalarWhereWithAggregatesInput = {
    AND?: WorkflowStepScalarWhereWithAggregatesInput | WorkflowStepScalarWhereWithAggregatesInput[]
    OR?: WorkflowStepScalarWhereWithAggregatesInput[]
    NOT?: WorkflowStepScalarWhereWithAggregatesInput | WorkflowStepScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowStep"> | string
    workflowRuleId?: StringWithAggregatesFilter<"WorkflowStep"> | string
    stepOrder?: IntWithAggregatesFilter<"WorkflowStep"> | number
    officeId?: StringWithAggregatesFilter<"WorkflowStep"> | string
    description?: StringNullableWithAggregatesFilter<"WorkflowStep"> | string | null
  }

  export type ApprovalActionWhereInput = {
    AND?: ApprovalActionWhereInput | ApprovalActionWhereInput[]
    OR?: ApprovalActionWhereInput[]
    NOT?: ApprovalActionWhereInput | ApprovalActionWhereInput[]
    id?: StringFilter<"ApprovalAction"> | string
    clearanceRequestId?: StringFilter<"ApprovalAction"> | string
    approverId?: StringFilter<"ApprovalAction"> | string
    status?: EnumApprovalStatusFilter<"ApprovalAction"> | $Enums.ApprovalStatus
    comment?: StringNullableFilter<"ApprovalAction"> | string | null
    actionDate?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    finalizedAt?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    actionDueBy?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
    approver?: XOR<ApproverScalarRelationFilter, ApproverWhereInput>
  }

  export type ApprovalActionOrderByWithRelationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    actionDate?: SortOrderInput | SortOrder
    finalizedAt?: SortOrderInput | SortOrder
    actionDueBy?: SortOrderInput | SortOrder
    clearanceRequest?: ClearanceRequestOrderByWithRelationInput
    approver?: ApproverOrderByWithRelationInput
  }

  export type ApprovalActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clearanceRequestId_approverId?: ApprovalActionClearanceRequestIdApproverIdCompoundUniqueInput
    AND?: ApprovalActionWhereInput | ApprovalActionWhereInput[]
    OR?: ApprovalActionWhereInput[]
    NOT?: ApprovalActionWhereInput | ApprovalActionWhereInput[]
    clearanceRequestId?: StringFilter<"ApprovalAction"> | string
    approverId?: StringFilter<"ApprovalAction"> | string
    status?: EnumApprovalStatusFilter<"ApprovalAction"> | $Enums.ApprovalStatus
    comment?: StringNullableFilter<"ApprovalAction"> | string | null
    actionDate?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    finalizedAt?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    actionDueBy?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    clearanceRequest?: XOR<ClearanceRequestScalarRelationFilter, ClearanceRequestWhereInput>
    approver?: XOR<ApproverScalarRelationFilter, ApproverWhereInput>
  }, "id" | "clearanceRequestId_approverId">

  export type ApprovalActionOrderByWithAggregationInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    actionDate?: SortOrderInput | SortOrder
    finalizedAt?: SortOrderInput | SortOrder
    actionDueBy?: SortOrderInput | SortOrder
    _count?: ApprovalActionCountOrderByAggregateInput
    _max?: ApprovalActionMaxOrderByAggregateInput
    _min?: ApprovalActionMinOrderByAggregateInput
  }

  export type ApprovalActionScalarWhereWithAggregatesInput = {
    AND?: ApprovalActionScalarWhereWithAggregatesInput | ApprovalActionScalarWhereWithAggregatesInput[]
    OR?: ApprovalActionScalarWhereWithAggregatesInput[]
    NOT?: ApprovalActionScalarWhereWithAggregatesInput | ApprovalActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApprovalAction"> | string
    clearanceRequestId?: StringWithAggregatesFilter<"ApprovalAction"> | string
    approverId?: StringWithAggregatesFilter<"ApprovalAction"> | string
    status?: EnumApprovalStatusWithAggregatesFilter<"ApprovalAction"> | $Enums.ApprovalStatus
    comment?: StringNullableWithAggregatesFilter<"ApprovalAction"> | string | null
    actionDate?: DateTimeNullableWithAggregatesFilter<"ApprovalAction"> | Date | string | null
    finalizedAt?: DateTimeNullableWithAggregatesFilter<"ApprovalAction"> | Date | string | null
    actionDueBy?: DateTimeNullableWithAggregatesFilter<"ApprovalAction"> | Date | string | null
  }

  export type ClearanceRequestWhereInput = {
    AND?: ClearanceRequestWhereInput | ClearanceRequestWhereInput[]
    OR?: ClearanceRequestWhereInput[]
    NOT?: ClearanceRequestWhereInput | ClearanceRequestWhereInput[]
    id?: StringFilter<"ClearanceRequest"> | string
    userId?: StringFilter<"ClearanceRequest"> | string
    formType?: EnumFormTypeFilter<"ClearanceRequest"> | $Enums.FormType
    programId?: StringFilter<"ClearanceRequest"> | string
    status?: EnumRequestStatusFilter<"ClearanceRequest"> | $Enums.RequestStatus
    rejectionReason?: StringNullableFilter<"ClearanceRequest"> | string | null
    resubmissionCount?: IntFilter<"ClearanceRequest"> | number
    submittedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    currentStep?: IntFilter<"ClearanceRequest"> | number
    terminationReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    idReplacementReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    teacherClearanceReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    terminationReason?: XOR<TerminationReasonNullableScalarRelationFilter, TerminationReasonWhereInput> | null
    idReplacementReason?: XOR<IdReplacementReasonNullableScalarRelationFilter, IdReplacementReasonWhereInput> | null
    teacherClearanceReason?: XOR<TeacherClearanceReasonNullableScalarRelationFilter, TeacherClearanceReasonWhereInput> | null
    approvalActions?: ApprovalActionListRelationFilter
    documents?: DocumentListRelationFilter
    notifications?: NotificationListRelationFilter
    certificate?: XOR<CertificateNullableScalarRelationFilter, CertificateWhereInput> | null
    auditLogs?: AuditLogListRelationFilter
  }

  export type ClearanceRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    resubmissionCount?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    currentStep?: SortOrder
    terminationReasonId?: SortOrderInput | SortOrder
    idReplacementReasonId?: SortOrderInput | SortOrder
    teacherClearanceReasonId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    program?: ProgramOrderByWithRelationInput
    terminationReason?: TerminationReasonOrderByWithRelationInput
    idReplacementReason?: IdReplacementReasonOrderByWithRelationInput
    teacherClearanceReason?: TeacherClearanceReasonOrderByWithRelationInput
    approvalActions?: ApprovalActionOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    certificate?: CertificateOrderByWithRelationInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type ClearanceRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClearanceRequestWhereInput | ClearanceRequestWhereInput[]
    OR?: ClearanceRequestWhereInput[]
    NOT?: ClearanceRequestWhereInput | ClearanceRequestWhereInput[]
    userId?: StringFilter<"ClearanceRequest"> | string
    formType?: EnumFormTypeFilter<"ClearanceRequest"> | $Enums.FormType
    programId?: StringFilter<"ClearanceRequest"> | string
    status?: EnumRequestStatusFilter<"ClearanceRequest"> | $Enums.RequestStatus
    rejectionReason?: StringNullableFilter<"ClearanceRequest"> | string | null
    resubmissionCount?: IntFilter<"ClearanceRequest"> | number
    submittedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    currentStep?: IntFilter<"ClearanceRequest"> | number
    terminationReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    idReplacementReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    teacherClearanceReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    program?: XOR<ProgramScalarRelationFilter, ProgramWhereInput>
    terminationReason?: XOR<TerminationReasonNullableScalarRelationFilter, TerminationReasonWhereInput> | null
    idReplacementReason?: XOR<IdReplacementReasonNullableScalarRelationFilter, IdReplacementReasonWhereInput> | null
    teacherClearanceReason?: XOR<TeacherClearanceReasonNullableScalarRelationFilter, TeacherClearanceReasonWhereInput> | null
    approvalActions?: ApprovalActionListRelationFilter
    documents?: DocumentListRelationFilter
    notifications?: NotificationListRelationFilter
    certificate?: XOR<CertificateNullableScalarRelationFilter, CertificateWhereInput> | null
    auditLogs?: AuditLogListRelationFilter
  }, "id">

  export type ClearanceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    resubmissionCount?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    currentStep?: SortOrder
    terminationReasonId?: SortOrderInput | SortOrder
    idReplacementReasonId?: SortOrderInput | SortOrder
    teacherClearanceReasonId?: SortOrderInput | SortOrder
    _count?: ClearanceRequestCountOrderByAggregateInput
    _avg?: ClearanceRequestAvgOrderByAggregateInput
    _max?: ClearanceRequestMaxOrderByAggregateInput
    _min?: ClearanceRequestMinOrderByAggregateInput
    _sum?: ClearanceRequestSumOrderByAggregateInput
  }

  export type ClearanceRequestScalarWhereWithAggregatesInput = {
    AND?: ClearanceRequestScalarWhereWithAggregatesInput | ClearanceRequestScalarWhereWithAggregatesInput[]
    OR?: ClearanceRequestScalarWhereWithAggregatesInput[]
    NOT?: ClearanceRequestScalarWhereWithAggregatesInput | ClearanceRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClearanceRequest"> | string
    userId?: StringWithAggregatesFilter<"ClearanceRequest"> | string
    formType?: EnumFormTypeWithAggregatesFilter<"ClearanceRequest"> | $Enums.FormType
    programId?: StringWithAggregatesFilter<"ClearanceRequest"> | string
    status?: EnumRequestStatusWithAggregatesFilter<"ClearanceRequest"> | $Enums.RequestStatus
    rejectionReason?: StringNullableWithAggregatesFilter<"ClearanceRequest"> | string | null
    resubmissionCount?: IntWithAggregatesFilter<"ClearanceRequest"> | number
    submittedAt?: DateTimeWithAggregatesFilter<"ClearanceRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClearanceRequest"> | Date | string
    currentStep?: IntWithAggregatesFilter<"ClearanceRequest"> | number
    terminationReasonId?: StringNullableWithAggregatesFilter<"ClearanceRequest"> | string | null
    idReplacementReasonId?: StringNullableWithAggregatesFilter<"ClearanceRequest"> | string | null
    teacherClearanceReasonId?: StringNullableWithAggregatesFilter<"ClearanceRequest"> | string | null
  }

  export type TerminationReasonCreateInput = {
    id?: string
    reason: string
    description?: string | null
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutTerminationReasonInput
  }

  export type TerminationReasonUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    reason: string
    description?: string | null
  }

  export type TerminationReasonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutTerminationReasonNestedInput
  }

  export type TerminationReasonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TerminationReasonCreateManyInput = {
    id?: string
    clearanceRequestId: string
    reason: string
    description?: string | null
  }

  export type TerminationReasonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TerminationReasonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdReplacementReasonCreateInput = {
    id?: string
    reason: string
    description?: string | null
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutIdReplacementReasonInput
  }

  export type IdReplacementReasonUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    reason: string
    description?: string | null
  }

  export type IdReplacementReasonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutIdReplacementReasonNestedInput
  }

  export type IdReplacementReasonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdReplacementReasonCreateManyInput = {
    id?: string
    clearanceRequestId: string
    reason: string
    description?: string | null
  }

  export type IdReplacementReasonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdReplacementReasonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherClearanceReasonCreateInput = {
    id?: string
    reason: string
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutTeacherClearanceReasonInput
  }

  export type TeacherClearanceReasonUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    reason: string
  }

  export type TeacherClearanceReasonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutTeacherClearanceReasonNestedInput
  }

  export type TeacherClearanceReasonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherClearanceReasonCreateManyInput = {
    id?: string
    clearanceRequestId: string
    reason: string
  }

  export type TeacherClearanceReasonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherClearanceReasonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentCreateInput = {
    id?: string
    filePath: string
    uploadedAt?: Date | string
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutDocumentsInput
    documentType: DocumentTypeCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    documentTypeId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutDocumentsNestedInput
    documentType?: DocumentTypeUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyInput = {
    id?: string
    clearanceRequestId: string
    documentTypeId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    requiredFor?: DocumentTypeCreaterequiredForInput | $Enums.FormType[]
    documents?: DocumentCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    requiredFor?: DocumentTypeCreaterequiredForInput | $Enums.FormType[]
    documents?: DocumentUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
    documents?: DocumentUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
    documents?: DocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    requiredFor?: DocumentTypeCreaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
  }

  export type CertificateCreateInput = {
    id?: string
    filePath: string
    qrCode: string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: Date | string
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutCertificateInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    filePath: string
    qrCode: string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: Date | string
  }

  export type CertificateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutCertificateNestedInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateManyInput = {
    id?: string
    clearanceRequestId: string
    filePath: string
    qrCode: string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: Date | string
  }

  export type CertificateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
    user: UserCreateNestedOneWithoutNotificationsInput
    clearanceRequest?: ClearanceRequestCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    clearanceRequest?: ClearanceRequestUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    clearanceRequest?: ClearanceRequestCreateNestedOneWithoutAuditLogsInput
    admin?: AdminCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    clearanceRequest?: ClearanceRequestUpdateOneWithoutAuditLogsNestedInput
    admin?: AdminUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateInput = {
    id?: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    user: UserCreateNestedOneWithoutStudentInput
    program: ProgramCreateNestedOneWithoutStudentsInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    userId: string
    startDate: Date | string
    programId: string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    departmentId: string
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    programId?: StringFieldUpdateOperationsInput | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateManyInput = {
    id?: string
    userId: string
    startDate: Date | string
    programId: string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    departmentId: string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    programId?: StringFieldUpdateOperationsInput | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    id?: string
    hireDate: Date | string
    position: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
    user: UserCreateNestedOneWithoutTeacherInput
    department: DepartmentCreateNestedOneWithoutTeachersInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    userId: string
    hireDate: Date | string
    position: string
    departmentId: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutTeacherNestedInput
    department?: DepartmentUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherCreateManyInput = {
    id?: string
    userId: string
    hireDate: Date | string
    position: string
    departmentId: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateInput = {
    id?: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
    user: UserCreateNestedOneWithoutAdminInput
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    userId: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id?: string
    userId: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    students?: StudentCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverCreateNestedManyWithoutDepartmentInput
    offices?: OfficeCreateNestedManyWithoutDepartmentInput
    programs?: ProgramCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverUncheckedCreateNestedManyWithoutDepartmentInput
    offices?: OfficeUncheckedCreateNestedManyWithoutDepartmentInput
    programs?: ProgramUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    students?: StudentUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUncheckedUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUncheckedUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProgramCreateInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    department: DepartmentCreateNestedOneWithoutProgramsInput
    students?: StudentCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description?: string | null
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleUncheckedCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutProgramsNestedInput
    students?: StudentUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    departmentId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUncheckedUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramCreateManyInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description?: string | null
  }

  export type ProgramUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProgramUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    departmentId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OfficeCreateInput = {
    id?: string
    name: string
    description?: string | null
    department?: DepartmentCreateNestedOneWithoutOfficesInput
    approvers?: ApproverCreateNestedManyWithoutOfficeInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutOfficeInput
  }

  export type OfficeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    departmentId?: string | null
    approvers?: ApproverUncheckedCreateNestedManyWithoutOfficeInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneWithoutOfficesNestedInput
    approvers?: ApproverUpdateManyWithoutOfficeNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvers?: ApproverUncheckedUpdateManyWithoutOfficeNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    departmentId?: string | null
  }

  export type OfficeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OfficeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApproverCreateInput = {
    id?: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    user: UserCreateNestedOneWithoutApproverInput
    office: OfficeCreateNestedOneWithoutApproversInput
    department?: DepartmentCreateNestedOneWithoutApproversInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutApproverInput
  }

  export type ApproverUncheckedCreateInput = {
    id?: string
    userId: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutApproverInput
  }

  export type ApproverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutApproverNestedInput
    office?: OfficeUpdateOneRequiredWithoutApproversNestedInput
    department?: DepartmentUpdateOneWithoutApproversNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type ApproverCreateManyInput = {
    id?: string
    userId: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
  }

  export type ApproverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
  }

  export type ApproverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowRuleCreateInput = {
    id?: string
    formType: $Enums.FormType
    description?: string | null
    program?: ProgramCreateNestedOneWithoutWorkflowRulesInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutWorkflowRuleInput
  }

  export type WorkflowRuleUncheckedCreateInput = {
    id?: string
    formType: $Enums.FormType
    programId?: string | null
    description?: string | null
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutWorkflowRuleInput
  }

  export type WorkflowRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    program?: ProgramUpdateOneWithoutWorkflowRulesNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutWorkflowRuleNestedInput
  }

  export type WorkflowRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutWorkflowRuleNestedInput
  }

  export type WorkflowRuleCreateManyInput = {
    id?: string
    formType: $Enums.FormType
    programId?: string | null
    description?: string | null
  }

  export type WorkflowRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepCreateInput = {
    id?: string
    stepOrder: number
    description?: string | null
    workflowRule: WorkflowRuleCreateNestedOneWithoutWorkflowStepsInput
    office: OfficeCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateInput = {
    id?: string
    workflowRuleId: string
    stepOrder: number
    officeId: string
    description?: string | null
  }

  export type WorkflowStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowRule?: WorkflowRuleUpdateOneRequiredWithoutWorkflowStepsNestedInput
    office?: OfficeUpdateOneRequiredWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowRuleId?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    officeId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepCreateManyInput = {
    id?: string
    workflowRuleId: string
    stepOrder: number
    officeId: string
    description?: string | null
  }

  export type WorkflowStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowRuleId?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    officeId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApprovalActionCreateInput = {
    id?: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutApprovalActionsInput
    approver: ApproverCreateNestedOneWithoutApprovalActionsInput
  }

  export type ApprovalActionUncheckedCreateInput = {
    id?: string
    clearanceRequestId: string
    approverId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type ApprovalActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutApprovalActionsNestedInput
    approver?: ApproverUpdateOneRequiredWithoutApprovalActionsNestedInput
  }

  export type ApprovalActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalActionCreateManyInput = {
    id?: string
    clearanceRequestId: string
    approverId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type ApprovalActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClearanceRequestCreateInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestCreateManyInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
  }

  export type ClearanceRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClearanceRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ClearanceRequestScalarRelationFilter = {
    is?: ClearanceRequestWhereInput
    isNot?: ClearanceRequestWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TerminationReasonCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type TerminationReasonMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type TerminationReasonMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IdReplacementReasonCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type IdReplacementReasonMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type IdReplacementReasonMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
  }

  export type TeacherClearanceReasonCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
  }

  export type TeacherClearanceReasonMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
  }

  export type TeacherClearanceReasonMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    reason?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DocumentTypeScalarRelationFilter = {
    is?: DocumentTypeWhereInput
    isNot?: DocumentTypeWhereInput
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    documentTypeId?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    documentTypeId?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    documentTypeId?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumFormTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.FormType | EnumFormTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    requiredFor?: SortOrder
  }

  export type DocumentTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DocumentTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CertificateCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    filePath?: SortOrder
    qrCode?: SortOrder
    signatures?: SortOrder
    issuedAt?: SortOrder
  }

  export type CertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    filePath?: SortOrder
    qrCode?: SortOrder
    issuedAt?: SortOrder
  }

  export type CertificateMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    filePath?: SortOrder
    qrCode?: SortOrder
    issuedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClearanceRequestNullableScalarRelationFilter = {
    is?: ClearanceRequestWhereInput | null
    isNot?: ClearanceRequestWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    emailSubject?: SortOrder
    type?: SortOrder
    status?: SortOrder
    read?: SortOrder
    sentAt?: SortOrder
    emailSentAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    emailSubject?: SortOrder
    type?: SortOrder
    status?: SortOrder
    read?: SortOrder
    sentAt?: SortOrder
    emailSentAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    emailSubject?: SortOrder
    type?: SortOrder
    status?: SortOrder
    read?: SortOrder
    sentAt?: SortOrder
    emailSentAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clearanceRequestId?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StudentNullableScalarRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type TeacherNullableScalarRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type ApproverNullableScalarRelationFilter = {
    is?: ApproverWhereInput | null
    isNot?: ApproverWhereInput | null
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ClearanceRequestListRelationFilter = {
    every?: ClearanceRequestWhereInput
    some?: ClearanceRequestWhereInput
    none?: ClearanceRequestWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClearanceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    fatherName?: SortOrder
    grandfatherName?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isFirstLogin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: SortOrder
    isLocked?: SortOrder
    lockedUntil?: SortOrder
    lockedAt?: SortOrder
    emailVerified?: SortOrder
    emailToken?: SortOrder
    emailTokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    browserFingerprint?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    fatherName?: SortOrder
    grandfatherName?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isFirstLogin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: SortOrder
    isLocked?: SortOrder
    lockedUntil?: SortOrder
    lockedAt?: SortOrder
    emailVerified?: SortOrder
    emailToken?: SortOrder
    emailTokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    browserFingerprint?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    passwordHash?: SortOrder
    firstName?: SortOrder
    fatherName?: SortOrder
    grandfatherName?: SortOrder
    email?: SortOrder
    role?: SortOrder
    status?: SortOrder
    isFirstLogin?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: SortOrder
    isLocked?: SortOrder
    lockedUntil?: SortOrder
    lockedAt?: SortOrder
    emailVerified?: SortOrder
    emailToken?: SortOrder
    emailTokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    browserFingerprint?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumAcademicStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicStatus | EnumAcademicStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicStatusFilter<$PrismaModel> | $Enums.AcademicStatus
  }

  export type ProgramScalarRelationFilter = {
    is?: ProgramWhereInput
    isNot?: ProgramWhereInput
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    programId?: SortOrder
    currentYear?: SortOrder
    semester?: SortOrder
    academicStatus?: SortOrder
    departmentId?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    currentYear?: SortOrder
    semester?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    programId?: SortOrder
    currentYear?: SortOrder
    semester?: SortOrder
    academicStatus?: SortOrder
    departmentId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    startDate?: SortOrder
    programId?: SortOrder
    currentYear?: SortOrder
    semester?: SortOrder
    academicStatus?: SortOrder
    departmentId?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    currentYear?: SortOrder
    semester?: SortOrder
  }

  export type EnumAcademicStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicStatus | EnumAcademicStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicStatusWithAggregatesFilter<$PrismaModel> | $Enums.AcademicStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcademicStatusFilter<$PrismaModel>
    _max?: NestedEnumAcademicStatusFilter<$PrismaModel>
  }

  export type EnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hireDate?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    employmentStatus?: SortOrder
    yearsOfService?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    yearsOfService?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hireDate?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    employmentStatus?: SortOrder
    yearsOfService?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hireDate?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    employmentStatus?: SortOrder
    yearsOfService?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    yearsOfService?: SortOrder
  }

  export type EnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type EnumPermissionNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel> | null
    has?: $Enums.Permission | EnumPermissionFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Permission[] | ListEnumPermissionFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type ApproverListRelationFilter = {
    every?: ApproverWhereInput
    some?: ApproverWhereInput
    none?: ApproverWhereInput
  }

  export type OfficeListRelationFilter = {
    every?: OfficeWhereInput
    some?: OfficeWhereInput
    none?: OfficeWhereInput
  }

  export type ProgramListRelationFilter = {
    every?: ProgramWhereInput
    some?: ProgramWhereInput
    none?: ProgramWhereInput
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApproverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfficeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
  }

  export type EnumProgramTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramType | EnumProgramTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramTypeFilter<$PrismaModel> | $Enums.ProgramType
  }

  export type EnumProgramCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramCategory | EnumProgramCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramCategoryFilter<$PrismaModel> | $Enums.ProgramCategory
  }

  export type WorkflowRuleListRelationFilter = {
    every?: WorkflowRuleWhereInput
    some?: WorkflowRuleWhereInput
    none?: WorkflowRuleWhereInput
  }

  export type WorkflowRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgramCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    description?: SortOrder
  }

  export type ProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    description?: SortOrder
  }

  export type ProgramMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    description?: SortOrder
  }

  export type EnumProgramTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramType | EnumProgramTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProgramType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgramTypeFilter<$PrismaModel>
    _max?: NestedEnumProgramTypeFilter<$PrismaModel>
  }

  export type EnumProgramCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramCategory | EnumProgramCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProgramCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgramCategoryFilter<$PrismaModel>
    _max?: NestedEnumProgramCategoryFilter<$PrismaModel>
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type WorkflowStepListRelationFilter = {
    every?: WorkflowStepWhereInput
    some?: WorkflowStepWhereInput
    none?: WorkflowStepWhereInput
  }

  export type WorkflowStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfficeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
  }

  export type OfficeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
  }

  export type OfficeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
  }

  export type OfficeScalarRelationFilter = {
    is?: OfficeWhereInput
    isNot?: OfficeWhereInput
  }

  export type ApprovalActionListRelationFilter = {
    every?: ApprovalActionWhereInput
    some?: ApprovalActionWhereInput
    none?: ApprovalActionWhereInput
  }

  export type ApprovalActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApproverCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    officeId?: SortOrder
    digitalSignature?: SortOrder
    yearsOfExperience?: SortOrder
    departmentId?: SortOrder
  }

  export type ApproverAvgOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
  }

  export type ApproverMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    officeId?: SortOrder
    digitalSignature?: SortOrder
    yearsOfExperience?: SortOrder
    departmentId?: SortOrder
  }

  export type ApproverMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    officeId?: SortOrder
    digitalSignature?: SortOrder
    yearsOfExperience?: SortOrder
    departmentId?: SortOrder
  }

  export type ApproverSumOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
  }

  export type EnumFormTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FormType | EnumFormTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFormTypeFilter<$PrismaModel> | $Enums.FormType
  }

  export type ProgramNullableScalarRelationFilter = {
    is?: ProgramWhereInput | null
    isNot?: ProgramWhereInput | null
  }

  export type WorkflowRuleFormTypeProgramIdCompoundUniqueInput = {
    formType: $Enums.FormType
    programId: string
  }

  export type WorkflowRuleCountOrderByAggregateInput = {
    id?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    description?: SortOrder
  }

  export type WorkflowRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    description?: SortOrder
  }

  export type WorkflowRuleMinOrderByAggregateInput = {
    id?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    description?: SortOrder
  }

  export type EnumFormTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FormType | EnumFormTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFormTypeWithAggregatesFilter<$PrismaModel> | $Enums.FormType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFormTypeFilter<$PrismaModel>
    _max?: NestedEnumFormTypeFilter<$PrismaModel>
  }

  export type WorkflowRuleScalarRelationFilter = {
    is?: WorkflowRuleWhereInput
    isNot?: WorkflowRuleWhereInput
  }

  export type WorkflowStepWorkflowRuleIdStepOrderCompoundUniqueInput = {
    workflowRuleId: string
    stepOrder: number
  }

  export type WorkflowStepCountOrderByAggregateInput = {
    id?: SortOrder
    workflowRuleId?: SortOrder
    stepOrder?: SortOrder
    officeId?: SortOrder
    description?: SortOrder
  }

  export type WorkflowStepAvgOrderByAggregateInput = {
    stepOrder?: SortOrder
  }

  export type WorkflowStepMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowRuleId?: SortOrder
    stepOrder?: SortOrder
    officeId?: SortOrder
    description?: SortOrder
  }

  export type WorkflowStepMinOrderByAggregateInput = {
    id?: SortOrder
    workflowRuleId?: SortOrder
    stepOrder?: SortOrder
    officeId?: SortOrder
    description?: SortOrder
  }

  export type WorkflowStepSumOrderByAggregateInput = {
    stepOrder?: SortOrder
  }

  export type EnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type ApproverScalarRelationFilter = {
    is?: ApproverWhereInput
    isNot?: ApproverWhereInput
  }

  export type ApprovalActionClearanceRequestIdApproverIdCompoundUniqueInput = {
    clearanceRequestId: string
    approverId: string
  }

  export type ApprovalActionCountOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    actionDate?: SortOrder
    finalizedAt?: SortOrder
    actionDueBy?: SortOrder
  }

  export type ApprovalActionMaxOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    actionDate?: SortOrder
    finalizedAt?: SortOrder
    actionDueBy?: SortOrder
  }

  export type ApprovalActionMinOrderByAggregateInput = {
    id?: SortOrder
    clearanceRequestId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    actionDate?: SortOrder
    finalizedAt?: SortOrder
    actionDueBy?: SortOrder
  }

  export type EnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type TerminationReasonNullableScalarRelationFilter = {
    is?: TerminationReasonWhereInput | null
    isNot?: TerminationReasonWhereInput | null
  }

  export type IdReplacementReasonNullableScalarRelationFilter = {
    is?: IdReplacementReasonWhereInput | null
    isNot?: IdReplacementReasonWhereInput | null
  }

  export type TeacherClearanceReasonNullableScalarRelationFilter = {
    is?: TeacherClearanceReasonWhereInput | null
    isNot?: TeacherClearanceReasonWhereInput | null
  }

  export type CertificateNullableScalarRelationFilter = {
    is?: CertificateWhereInput | null
    isNot?: CertificateWhereInput | null
  }

  export type ClearanceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    resubmissionCount?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    currentStep?: SortOrder
    terminationReasonId?: SortOrder
    idReplacementReasonId?: SortOrder
    teacherClearanceReasonId?: SortOrder
  }

  export type ClearanceRequestAvgOrderByAggregateInput = {
    resubmissionCount?: SortOrder
    currentStep?: SortOrder
  }

  export type ClearanceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    resubmissionCount?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    currentStep?: SortOrder
    terminationReasonId?: SortOrder
    idReplacementReasonId?: SortOrder
    teacherClearanceReasonId?: SortOrder
  }

  export type ClearanceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    formType?: SortOrder
    programId?: SortOrder
    status?: SortOrder
    rejectionReason?: SortOrder
    resubmissionCount?: SortOrder
    submittedAt?: SortOrder
    updatedAt?: SortOrder
    currentStep?: SortOrder
    terminationReasonId?: SortOrder
    idReplacementReasonId?: SortOrder
    teacherClearanceReasonId?: SortOrder
  }

  export type ClearanceRequestSumOrderByAggregateInput = {
    resubmissionCount?: SortOrder
    currentStep?: SortOrder
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type ClearanceRequestCreateNestedOneWithoutTerminationReasonInput = {
    create?: XOR<ClearanceRequestCreateWithoutTerminationReasonInput, ClearanceRequestUncheckedCreateWithoutTerminationReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutTerminationReasonInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClearanceRequestUpdateOneRequiredWithoutTerminationReasonNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutTerminationReasonInput, ClearanceRequestUncheckedCreateWithoutTerminationReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutTerminationReasonInput
    upsert?: ClearanceRequestUpsertWithoutTerminationReasonInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutTerminationReasonInput, ClearanceRequestUpdateWithoutTerminationReasonInput>, ClearanceRequestUncheckedUpdateWithoutTerminationReasonInput>
  }

  export type ClearanceRequestCreateNestedOneWithoutIdReplacementReasonInput = {
    create?: XOR<ClearanceRequestCreateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedCreateWithoutIdReplacementReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutIdReplacementReasonInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type ClearanceRequestUpdateOneRequiredWithoutIdReplacementReasonNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedCreateWithoutIdReplacementReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutIdReplacementReasonInput
    upsert?: ClearanceRequestUpsertWithoutIdReplacementReasonInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutIdReplacementReasonInput, ClearanceRequestUpdateWithoutIdReplacementReasonInput>, ClearanceRequestUncheckedUpdateWithoutIdReplacementReasonInput>
  }

  export type ClearanceRequestCreateNestedOneWithoutTeacherClearanceReasonInput = {
    create?: XOR<ClearanceRequestCreateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedCreateWithoutTeacherClearanceReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutTeacherClearanceReasonInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type ClearanceRequestUpdateOneRequiredWithoutTeacherClearanceReasonNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedCreateWithoutTeacherClearanceReasonInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutTeacherClearanceReasonInput
    upsert?: ClearanceRequestUpsertWithoutTeacherClearanceReasonInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutTeacherClearanceReasonInput, ClearanceRequestUpdateWithoutTeacherClearanceReasonInput>, ClearanceRequestUncheckedUpdateWithoutTeacherClearanceReasonInput>
  }

  export type ClearanceRequestCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ClearanceRequestCreateWithoutDocumentsInput, ClearanceRequestUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutDocumentsInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type DocumentTypeCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<DocumentTypeCreateWithoutDocumentsInput, DocumentTypeUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutDocumentsInput
    connect?: DocumentTypeWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClearanceRequestUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutDocumentsInput, ClearanceRequestUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutDocumentsInput
    upsert?: ClearanceRequestUpsertWithoutDocumentsInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutDocumentsInput, ClearanceRequestUpdateWithoutDocumentsInput>, ClearanceRequestUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTypeUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutDocumentsInput, DocumentTypeUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutDocumentsInput
    upsert?: DocumentTypeUpsertWithoutDocumentsInput
    connect?: DocumentTypeWhereUniqueInput
    update?: XOR<XOR<DocumentTypeUpdateToOneWithWhereWithoutDocumentsInput, DocumentTypeUpdateWithoutDocumentsInput>, DocumentTypeUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTypeCreaterequiredForInput = {
    set: $Enums.FormType[]
  }

  export type DocumentCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput> | DocumentCreateWithoutDocumentTypeInput[] | DocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTypeInput | DocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: DocumentCreateManyDocumentTypeInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput> | DocumentCreateWithoutDocumentTypeInput[] | DocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTypeInput | DocumentCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: DocumentCreateManyDocumentTypeInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentTypeUpdaterequiredForInput = {
    set?: $Enums.FormType[]
    push?: $Enums.FormType | $Enums.FormType[]
  }

  export type DocumentUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput> | DocumentCreateWithoutDocumentTypeInput[] | DocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTypeInput | DocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | DocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: DocumentCreateManyDocumentTypeInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | DocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentTypeInput | DocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput> | DocumentCreateWithoutDocumentTypeInput[] | DocumentUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutDocumentTypeInput | DocumentCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutDocumentTypeInput | DocumentUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: DocumentCreateManyDocumentTypeInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutDocumentTypeInput | DocumentUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutDocumentTypeInput | DocumentUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ClearanceRequestCreateNestedOneWithoutCertificateInput = {
    create?: XOR<ClearanceRequestCreateWithoutCertificateInput, ClearanceRequestUncheckedCreateWithoutCertificateInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutCertificateInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type ClearanceRequestUpdateOneRequiredWithoutCertificateNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutCertificateInput, ClearanceRequestUncheckedCreateWithoutCertificateInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutCertificateInput
    upsert?: ClearanceRequestUpsertWithoutCertificateInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutCertificateInput, ClearanceRequestUpdateWithoutCertificateInput>, ClearanceRequestUncheckedUpdateWithoutCertificateInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type ClearanceRequestCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ClearanceRequestCreateWithoutNotificationsInput, ClearanceRequestUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutNotificationsInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotificationStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ClearanceRequestUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutNotificationsInput, ClearanceRequestUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutNotificationsInput
    upsert?: ClearanceRequestUpsertWithoutNotificationsInput
    disconnect?: ClearanceRequestWhereInput | boolean
    delete?: ClearanceRequestWhereInput | boolean
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutNotificationsInput, ClearanceRequestUpdateWithoutNotificationsInput>, ClearanceRequestUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type ClearanceRequestCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<ClearanceRequestCreateWithoutAuditLogsInput, ClearanceRequestUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutAuditLogsInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<AdminCreateWithoutAuditLogsInput, AdminUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAuditLogsInput
    connect?: AdminWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ClearanceRequestUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutAuditLogsInput, ClearanceRequestUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutAuditLogsInput
    upsert?: ClearanceRequestUpsertWithoutAuditLogsInput
    disconnect?: ClearanceRequestWhereInput | boolean
    delete?: ClearanceRequestWhereInput | boolean
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutAuditLogsInput, ClearanceRequestUpdateWithoutAuditLogsInput>, ClearanceRequestUncheckedUpdateWithoutAuditLogsInput>
  }

  export type AdminUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<AdminCreateWithoutAuditLogsInput, AdminUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAuditLogsInput
    upsert?: AdminUpsertWithoutAuditLogsInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAuditLogsInput, AdminUpdateWithoutAuditLogsInput>, AdminUncheckedUpdateWithoutAuditLogsInput>
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutUserInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    connect?: TeacherWhereUniqueInput
  }

  export type ApproverCreateNestedOneWithoutUserInput = {
    create?: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutUserInput
    connect?: ApproverWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ClearanceRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput> | ClearanceRequestCreateWithoutUserInput[] | ClearanceRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutUserInput | ClearanceRequestCreateOrConnectWithoutUserInput[]
    createMany?: ClearanceRequestCreateManyUserInputEnvelope
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type TeacherUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    connect?: TeacherWhereUniqueInput
  }

  export type ApproverUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutUserInput
    connect?: ApproverWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ClearanceRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput> | ClearanceRequestCreateWithoutUserInput[] | ClearanceRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutUserInput | ClearanceRequestCreateOrConnectWithoutUserInput[]
    createMany?: ClearanceRequestCreateManyUserInputEnvelope
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type TeacherUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    upsert?: TeacherUpsertWithoutUserInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutUserInput, TeacherUpdateWithoutUserInput>, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type ApproverUpdateOneWithoutUserNestedInput = {
    create?: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutUserInput
    upsert?: ApproverUpsertWithoutUserInput
    disconnect?: ApproverWhereInput | boolean
    delete?: ApproverWhereInput | boolean
    connect?: ApproverWhereUniqueInput
    update?: XOR<XOR<ApproverUpdateToOneWithWhereWithoutUserInput, ApproverUpdateWithoutUserInput>, ApproverUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ClearanceRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput> | ClearanceRequestCreateWithoutUserInput[] | ClearanceRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutUserInput | ClearanceRequestCreateOrConnectWithoutUserInput[]
    upsert?: ClearanceRequestUpsertWithWhereUniqueWithoutUserInput | ClearanceRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClearanceRequestCreateManyUserInputEnvelope
    set?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    disconnect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    delete?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    update?: ClearanceRequestUpdateWithWhereUniqueWithoutUserInput | ClearanceRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClearanceRequestUpdateManyWithWhereWithoutUserInput | ClearanceRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type TeacherUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    upsert?: TeacherUpsertWithoutUserInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutUserInput, TeacherUpdateWithoutUserInput>, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type ApproverUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutUserInput
    upsert?: ApproverUpsertWithoutUserInput
    disconnect?: ApproverWhereInput | boolean
    delete?: ApproverWhereInput | boolean
    connect?: ApproverWhereUniqueInput
    update?: XOR<XOR<ApproverUpdateToOneWithWhereWithoutUserInput, ApproverUpdateWithoutUserInput>, ApproverUncheckedUpdateWithoutUserInput>
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput> | ClearanceRequestCreateWithoutUserInput[] | ClearanceRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutUserInput | ClearanceRequestCreateOrConnectWithoutUserInput[]
    upsert?: ClearanceRequestUpsertWithWhereUniqueWithoutUserInput | ClearanceRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClearanceRequestCreateManyUserInputEnvelope
    set?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    disconnect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    delete?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    update?: ClearanceRequestUpdateWithWhereUniqueWithoutUserInput | ClearanceRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClearanceRequestUpdateManyWithWhereWithoutUserInput | ClearanceRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type ProgramCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutStudentsInput
    connect?: ProgramWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutStudentsInput = {
    create?: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type EnumAcademicStatusFieldUpdateOperationsInput = {
    set?: $Enums.AcademicStatus
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type ProgramUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutStudentsInput
    upsert?: ProgramUpsertWithoutStudentsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutStudentsInput, ProgramUpdateWithoutStudentsInput>, ProgramUncheckedUpdateWithoutStudentsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentsInput
    upsert?: DepartmentUpsertWithoutStudentsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutStudentsInput, DepartmentUpdateWithoutStudentsInput>, DepartmentUncheckedUpdateWithoutStudentsInput>
  }

  export type UserCreateNestedOneWithoutTeacherInput = {
    create?: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutTeachersInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type EnumEmploymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmploymentStatus
  }

  export type UserUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInput
    upsert?: UserUpsertWithoutTeacherInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeacherInput, UserUpdateWithoutTeacherInput>, UserUncheckedUpdateWithoutTeacherInput>
  }

  export type DepartmentUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput
    upsert?: DepartmentUpsertWithoutTeachersInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeachersInput, DepartmentUpdateWithoutTeachersInput>, DepartmentUncheckedUpdateWithoutTeachersInput>
  }

  export type AdminCreatepermissionsInput = {
    set: $Enums.Permission[]
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type AuditLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AdminUpdatepermissionsInput = {
    set?: $Enums.Permission[]
    push?: $Enums.Permission | $Enums.Permission[]
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type AuditLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAdminInput | AuditLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAdminInput | AuditLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAdminInput | AuditLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput> | AuditLogCreateWithoutAdminInput[] | AuditLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAdminInput | AuditLogCreateOrConnectWithoutAdminInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAdminInput | AuditLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AuditLogCreateManyAdminInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAdminInput | AuditLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAdminInput | AuditLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TeacherCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ApproverCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput> | ApproverCreateWithoutDepartmentInput[] | ApproverUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutDepartmentInput | ApproverCreateOrConnectWithoutDepartmentInput[]
    createMany?: ApproverCreateManyDepartmentInputEnvelope
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
  }

  export type OfficeCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput> | OfficeCreateWithoutDepartmentInput[] | OfficeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: OfficeCreateOrConnectWithoutDepartmentInput | OfficeCreateOrConnectWithoutDepartmentInput[]
    createMany?: OfficeCreateManyDepartmentInputEnvelope
    connect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
  }

  export type ProgramCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput> | ProgramCreateWithoutDepartmentInput[] | ProgramUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutDepartmentInput | ProgramCreateOrConnectWithoutDepartmentInput[]
    createMany?: ProgramCreateManyDepartmentInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ApproverUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput> | ApproverCreateWithoutDepartmentInput[] | ApproverUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutDepartmentInput | ApproverCreateOrConnectWithoutDepartmentInput[]
    createMany?: ApproverCreateManyDepartmentInputEnvelope
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
  }

  export type OfficeUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput> | OfficeCreateWithoutDepartmentInput[] | OfficeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: OfficeCreateOrConnectWithoutDepartmentInput | OfficeCreateOrConnectWithoutDepartmentInput[]
    createMany?: OfficeCreateManyDepartmentInputEnvelope
    connect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
  }

  export type ProgramUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput> | ProgramCreateWithoutDepartmentInput[] | ProgramUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutDepartmentInput | ProgramCreateOrConnectWithoutDepartmentInput[]
    createMany?: ProgramCreateManyDepartmentInputEnvelope
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
  }

  export type TeacherUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ApproverUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput> | ApproverCreateWithoutDepartmentInput[] | ApproverUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutDepartmentInput | ApproverCreateOrConnectWithoutDepartmentInput[]
    upsert?: ApproverUpsertWithWhereUniqueWithoutDepartmentInput | ApproverUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: ApproverCreateManyDepartmentInputEnvelope
    set?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    disconnect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    delete?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    update?: ApproverUpdateWithWhereUniqueWithoutDepartmentInput | ApproverUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ApproverUpdateManyWithWhereWithoutDepartmentInput | ApproverUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
  }

  export type OfficeUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput> | OfficeCreateWithoutDepartmentInput[] | OfficeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: OfficeCreateOrConnectWithoutDepartmentInput | OfficeCreateOrConnectWithoutDepartmentInput[]
    upsert?: OfficeUpsertWithWhereUniqueWithoutDepartmentInput | OfficeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: OfficeCreateManyDepartmentInputEnvelope
    set?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    disconnect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    delete?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    connect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    update?: OfficeUpdateWithWhereUniqueWithoutDepartmentInput | OfficeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: OfficeUpdateManyWithWhereWithoutDepartmentInput | OfficeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: OfficeScalarWhereInput | OfficeScalarWhereInput[]
  }

  export type ProgramUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput> | ProgramCreateWithoutDepartmentInput[] | ProgramUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutDepartmentInput | ProgramCreateOrConnectWithoutDepartmentInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutDepartmentInput | ProgramUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: ProgramCreateManyDepartmentInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutDepartmentInput | ProgramUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutDepartmentInput | ProgramUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ApproverUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput> | ApproverCreateWithoutDepartmentInput[] | ApproverUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutDepartmentInput | ApproverCreateOrConnectWithoutDepartmentInput[]
    upsert?: ApproverUpsertWithWhereUniqueWithoutDepartmentInput | ApproverUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: ApproverCreateManyDepartmentInputEnvelope
    set?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    disconnect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    delete?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    update?: ApproverUpdateWithWhereUniqueWithoutDepartmentInput | ApproverUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ApproverUpdateManyWithWhereWithoutDepartmentInput | ApproverUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
  }

  export type OfficeUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput> | OfficeCreateWithoutDepartmentInput[] | OfficeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: OfficeCreateOrConnectWithoutDepartmentInput | OfficeCreateOrConnectWithoutDepartmentInput[]
    upsert?: OfficeUpsertWithWhereUniqueWithoutDepartmentInput | OfficeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: OfficeCreateManyDepartmentInputEnvelope
    set?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    disconnect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    delete?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    connect?: OfficeWhereUniqueInput | OfficeWhereUniqueInput[]
    update?: OfficeUpdateWithWhereUniqueWithoutDepartmentInput | OfficeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: OfficeUpdateManyWithWhereWithoutDepartmentInput | OfficeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: OfficeScalarWhereInput | OfficeScalarWhereInput[]
  }

  export type ProgramUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput> | ProgramCreateWithoutDepartmentInput[] | ProgramUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: ProgramCreateOrConnectWithoutDepartmentInput | ProgramCreateOrConnectWithoutDepartmentInput[]
    upsert?: ProgramUpsertWithWhereUniqueWithoutDepartmentInput | ProgramUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: ProgramCreateManyDepartmentInputEnvelope
    set?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    disconnect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    delete?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    connect?: ProgramWhereUniqueInput | ProgramWhereUniqueInput[]
    update?: ProgramUpdateWithWhereUniqueWithoutDepartmentInput | ProgramUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: ProgramUpdateManyWithWhereWithoutDepartmentInput | ProgramUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutProgramsInput = {
    create?: XOR<DepartmentCreateWithoutProgramsInput, DepartmentUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProgramsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutProgramInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type WorkflowRuleCreateNestedManyWithoutProgramInput = {
    create?: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput> | WorkflowRuleCreateWithoutProgramInput[] | WorkflowRuleUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutProgramInput | WorkflowRuleCreateOrConnectWithoutProgramInput[]
    createMany?: WorkflowRuleCreateManyProgramInputEnvelope
    connect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
  }

  export type ClearanceRequestCreateNestedManyWithoutProgramInput = {
    create?: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput> | ClearanceRequestCreateWithoutProgramInput[] | ClearanceRequestUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutProgramInput | ClearanceRequestCreateOrConnectWithoutProgramInput[]
    createMany?: ClearanceRequestCreateManyProgramInputEnvelope
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type WorkflowRuleUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput> | WorkflowRuleCreateWithoutProgramInput[] | WorkflowRuleUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutProgramInput | WorkflowRuleCreateOrConnectWithoutProgramInput[]
    createMany?: WorkflowRuleCreateManyProgramInputEnvelope
    connect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
  }

  export type ClearanceRequestUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput> | ClearanceRequestCreateWithoutProgramInput[] | ClearanceRequestUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutProgramInput | ClearanceRequestCreateOrConnectWithoutProgramInput[]
    createMany?: ClearanceRequestCreateManyProgramInputEnvelope
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
  }

  export type EnumProgramTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProgramType
  }

  export type EnumProgramCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ProgramCategory
  }

  export type DepartmentUpdateOneRequiredWithoutProgramsNestedInput = {
    create?: XOR<DepartmentCreateWithoutProgramsInput, DepartmentUncheckedCreateWithoutProgramsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutProgramsInput
    upsert?: DepartmentUpsertWithoutProgramsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutProgramsInput, DepartmentUpdateWithoutProgramsInput>, DepartmentUncheckedUpdateWithoutProgramsInput>
  }

  export type StudentUpdateManyWithoutProgramNestedInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProgramInput | StudentUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProgramInput | StudentUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProgramInput | StudentUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type WorkflowRuleUpdateManyWithoutProgramNestedInput = {
    create?: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput> | WorkflowRuleCreateWithoutProgramInput[] | WorkflowRuleUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutProgramInput | WorkflowRuleCreateOrConnectWithoutProgramInput[]
    upsert?: WorkflowRuleUpsertWithWhereUniqueWithoutProgramInput | WorkflowRuleUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: WorkflowRuleCreateManyProgramInputEnvelope
    set?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    disconnect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    delete?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    connect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    update?: WorkflowRuleUpdateWithWhereUniqueWithoutProgramInput | WorkflowRuleUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: WorkflowRuleUpdateManyWithWhereWithoutProgramInput | WorkflowRuleUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: WorkflowRuleScalarWhereInput | WorkflowRuleScalarWhereInput[]
  }

  export type ClearanceRequestUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput> | ClearanceRequestCreateWithoutProgramInput[] | ClearanceRequestUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutProgramInput | ClearanceRequestCreateOrConnectWithoutProgramInput[]
    upsert?: ClearanceRequestUpsertWithWhereUniqueWithoutProgramInput | ClearanceRequestUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ClearanceRequestCreateManyProgramInputEnvelope
    set?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    disconnect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    delete?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    update?: ClearanceRequestUpdateWithWhereUniqueWithoutProgramInput | ClearanceRequestUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ClearanceRequestUpdateManyWithWhereWithoutProgramInput | ClearanceRequestUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput> | StudentCreateWithoutProgramInput[] | StudentUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProgramInput | StudentCreateOrConnectWithoutProgramInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProgramInput | StudentUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: StudentCreateManyProgramInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProgramInput | StudentUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProgramInput | StudentUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type WorkflowRuleUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput> | WorkflowRuleCreateWithoutProgramInput[] | WorkflowRuleUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutProgramInput | WorkflowRuleCreateOrConnectWithoutProgramInput[]
    upsert?: WorkflowRuleUpsertWithWhereUniqueWithoutProgramInput | WorkflowRuleUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: WorkflowRuleCreateManyProgramInputEnvelope
    set?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    disconnect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    delete?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    connect?: WorkflowRuleWhereUniqueInput | WorkflowRuleWhereUniqueInput[]
    update?: WorkflowRuleUpdateWithWhereUniqueWithoutProgramInput | WorkflowRuleUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: WorkflowRuleUpdateManyWithWhereWithoutProgramInput | WorkflowRuleUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: WorkflowRuleScalarWhereInput | WorkflowRuleScalarWhereInput[]
  }

  export type ClearanceRequestUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput> | ClearanceRequestCreateWithoutProgramInput[] | ClearanceRequestUncheckedCreateWithoutProgramInput[]
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutProgramInput | ClearanceRequestCreateOrConnectWithoutProgramInput[]
    upsert?: ClearanceRequestUpsertWithWhereUniqueWithoutProgramInput | ClearanceRequestUpsertWithWhereUniqueWithoutProgramInput[]
    createMany?: ClearanceRequestCreateManyProgramInputEnvelope
    set?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    disconnect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    delete?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    connect?: ClearanceRequestWhereUniqueInput | ClearanceRequestWhereUniqueInput[]
    update?: ClearanceRequestUpdateWithWhereUniqueWithoutProgramInput | ClearanceRequestUpdateWithWhereUniqueWithoutProgramInput[]
    updateMany?: ClearanceRequestUpdateManyWithWhereWithoutProgramInput | ClearanceRequestUpdateManyWithWhereWithoutProgramInput[]
    deleteMany?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutOfficesInput = {
    create?: XOR<DepartmentCreateWithoutOfficesInput, DepartmentUncheckedCreateWithoutOfficesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutOfficesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type ApproverCreateNestedManyWithoutOfficeInput = {
    create?: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput> | ApproverCreateWithoutOfficeInput[] | ApproverUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutOfficeInput | ApproverCreateOrConnectWithoutOfficeInput[]
    createMany?: ApproverCreateManyOfficeInputEnvelope
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
  }

  export type WorkflowStepCreateNestedManyWithoutOfficeInput = {
    create?: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput> | WorkflowStepCreateWithoutOfficeInput[] | WorkflowStepUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutOfficeInput | WorkflowStepCreateOrConnectWithoutOfficeInput[]
    createMany?: WorkflowStepCreateManyOfficeInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type ApproverUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput> | ApproverCreateWithoutOfficeInput[] | ApproverUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutOfficeInput | ApproverCreateOrConnectWithoutOfficeInput[]
    createMany?: ApproverCreateManyOfficeInputEnvelope
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
  }

  export type WorkflowStepUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput> | WorkflowStepCreateWithoutOfficeInput[] | WorkflowStepUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutOfficeInput | WorkflowStepCreateOrConnectWithoutOfficeInput[]
    createMany?: WorkflowStepCreateManyOfficeInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type DepartmentUpdateOneWithoutOfficesNestedInput = {
    create?: XOR<DepartmentCreateWithoutOfficesInput, DepartmentUncheckedCreateWithoutOfficesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutOfficesInput
    upsert?: DepartmentUpsertWithoutOfficesInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutOfficesInput, DepartmentUpdateWithoutOfficesInput>, DepartmentUncheckedUpdateWithoutOfficesInput>
  }

  export type ApproverUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput> | ApproverCreateWithoutOfficeInput[] | ApproverUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutOfficeInput | ApproverCreateOrConnectWithoutOfficeInput[]
    upsert?: ApproverUpsertWithWhereUniqueWithoutOfficeInput | ApproverUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: ApproverCreateManyOfficeInputEnvelope
    set?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    disconnect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    delete?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    update?: ApproverUpdateWithWhereUniqueWithoutOfficeInput | ApproverUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: ApproverUpdateManyWithWhereWithoutOfficeInput | ApproverUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
  }

  export type WorkflowStepUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput> | WorkflowStepCreateWithoutOfficeInput[] | WorkflowStepUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutOfficeInput | WorkflowStepCreateOrConnectWithoutOfficeInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutOfficeInput | WorkflowStepUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: WorkflowStepCreateManyOfficeInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutOfficeInput | WorkflowStepUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutOfficeInput | WorkflowStepUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type ApproverUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput> | ApproverCreateWithoutOfficeInput[] | ApproverUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ApproverCreateOrConnectWithoutOfficeInput | ApproverCreateOrConnectWithoutOfficeInput[]
    upsert?: ApproverUpsertWithWhereUniqueWithoutOfficeInput | ApproverUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: ApproverCreateManyOfficeInputEnvelope
    set?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    disconnect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    delete?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    connect?: ApproverWhereUniqueInput | ApproverWhereUniqueInput[]
    update?: ApproverUpdateWithWhereUniqueWithoutOfficeInput | ApproverUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: ApproverUpdateManyWithWhereWithoutOfficeInput | ApproverUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
  }

  export type WorkflowStepUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput> | WorkflowStepCreateWithoutOfficeInput[] | WorkflowStepUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutOfficeInput | WorkflowStepCreateOrConnectWithoutOfficeInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutOfficeInput | WorkflowStepUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: WorkflowStepCreateManyOfficeInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutOfficeInput | WorkflowStepUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutOfficeInput | WorkflowStepUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutApproverInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput
    connect?: UserWhereUniqueInput
  }

  export type OfficeCreateNestedOneWithoutApproversInput = {
    create?: XOR<OfficeCreateWithoutApproversInput, OfficeUncheckedCreateWithoutApproversInput>
    connectOrCreate?: OfficeCreateOrConnectWithoutApproversInput
    connect?: OfficeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutApproversInput = {
    create?: XOR<DepartmentCreateWithoutApproversInput, DepartmentUncheckedCreateWithoutApproversInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutApproversInput
    connect?: DepartmentWhereUniqueInput
  }

  export type ApprovalActionCreateNestedManyWithoutApproverInput = {
    create?: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput> | ApprovalActionCreateWithoutApproverInput[] | ApprovalActionUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutApproverInput | ApprovalActionCreateOrConnectWithoutApproverInput[]
    createMany?: ApprovalActionCreateManyApproverInputEnvelope
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
  }

  export type ApprovalActionUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput> | ApprovalActionCreateWithoutApproverInput[] | ApprovalActionUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutApproverInput | ApprovalActionCreateOrConnectWithoutApproverInput[]
    createMany?: ApprovalActionCreateManyApproverInputEnvelope
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutApproverNestedInput = {
    create?: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
    connectOrCreate?: UserCreateOrConnectWithoutApproverInput
    upsert?: UserUpsertWithoutApproverInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApproverInput, UserUpdateWithoutApproverInput>, UserUncheckedUpdateWithoutApproverInput>
  }

  export type OfficeUpdateOneRequiredWithoutApproversNestedInput = {
    create?: XOR<OfficeCreateWithoutApproversInput, OfficeUncheckedCreateWithoutApproversInput>
    connectOrCreate?: OfficeCreateOrConnectWithoutApproversInput
    upsert?: OfficeUpsertWithoutApproversInput
    connect?: OfficeWhereUniqueInput
    update?: XOR<XOR<OfficeUpdateToOneWithWhereWithoutApproversInput, OfficeUpdateWithoutApproversInput>, OfficeUncheckedUpdateWithoutApproversInput>
  }

  export type DepartmentUpdateOneWithoutApproversNestedInput = {
    create?: XOR<DepartmentCreateWithoutApproversInput, DepartmentUncheckedCreateWithoutApproversInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutApproversInput
    upsert?: DepartmentUpsertWithoutApproversInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutApproversInput, DepartmentUpdateWithoutApproversInput>, DepartmentUncheckedUpdateWithoutApproversInput>
  }

  export type ApprovalActionUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput> | ApprovalActionCreateWithoutApproverInput[] | ApprovalActionUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutApproverInput | ApprovalActionCreateOrConnectWithoutApproverInput[]
    upsert?: ApprovalActionUpsertWithWhereUniqueWithoutApproverInput | ApprovalActionUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ApprovalActionCreateManyApproverInputEnvelope
    set?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    disconnect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    delete?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    update?: ApprovalActionUpdateWithWhereUniqueWithoutApproverInput | ApprovalActionUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ApprovalActionUpdateManyWithWhereWithoutApproverInput | ApprovalActionUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
  }

  export type ApprovalActionUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput> | ApprovalActionCreateWithoutApproverInput[] | ApprovalActionUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutApproverInput | ApprovalActionCreateOrConnectWithoutApproverInput[]
    upsert?: ApprovalActionUpsertWithWhereUniqueWithoutApproverInput | ApprovalActionUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: ApprovalActionCreateManyApproverInputEnvelope
    set?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    disconnect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    delete?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    update?: ApprovalActionUpdateWithWhereUniqueWithoutApproverInput | ApprovalActionUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: ApprovalActionUpdateManyWithWhereWithoutApproverInput | ApprovalActionUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
  }

  export type ProgramCreateNestedOneWithoutWorkflowRulesInput = {
    create?: XOR<ProgramCreateWithoutWorkflowRulesInput, ProgramUncheckedCreateWithoutWorkflowRulesInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutWorkflowRulesInput
    connect?: ProgramWhereUniqueInput
  }

  export type WorkflowStepCreateNestedManyWithoutWorkflowRuleInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput> | WorkflowStepCreateWithoutWorkflowRuleInput[] | WorkflowStepUncheckedCreateWithoutWorkflowRuleInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRuleInput | WorkflowStepCreateOrConnectWithoutWorkflowRuleInput[]
    createMany?: WorkflowStepCreateManyWorkflowRuleInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type WorkflowStepUncheckedCreateNestedManyWithoutWorkflowRuleInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput> | WorkflowStepCreateWithoutWorkflowRuleInput[] | WorkflowStepUncheckedCreateWithoutWorkflowRuleInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRuleInput | WorkflowStepCreateOrConnectWithoutWorkflowRuleInput[]
    createMany?: WorkflowStepCreateManyWorkflowRuleInputEnvelope
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
  }

  export type EnumFormTypeFieldUpdateOperationsInput = {
    set?: $Enums.FormType
  }

  export type ProgramUpdateOneWithoutWorkflowRulesNestedInput = {
    create?: XOR<ProgramCreateWithoutWorkflowRulesInput, ProgramUncheckedCreateWithoutWorkflowRulesInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutWorkflowRulesInput
    upsert?: ProgramUpsertWithoutWorkflowRulesInput
    disconnect?: ProgramWhereInput | boolean
    delete?: ProgramWhereInput | boolean
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutWorkflowRulesInput, ProgramUpdateWithoutWorkflowRulesInput>, ProgramUncheckedUpdateWithoutWorkflowRulesInput>
  }

  export type WorkflowStepUpdateManyWithoutWorkflowRuleNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput> | WorkflowStepCreateWithoutWorkflowRuleInput[] | WorkflowStepUncheckedCreateWithoutWorkflowRuleInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRuleInput | WorkflowStepCreateOrConnectWithoutWorkflowRuleInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutWorkflowRuleInput | WorkflowStepUpsertWithWhereUniqueWithoutWorkflowRuleInput[]
    createMany?: WorkflowStepCreateManyWorkflowRuleInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutWorkflowRuleInput | WorkflowStepUpdateWithWhereUniqueWithoutWorkflowRuleInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutWorkflowRuleInput | WorkflowStepUpdateManyWithWhereWithoutWorkflowRuleInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type WorkflowStepUncheckedUpdateManyWithoutWorkflowRuleNestedInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput> | WorkflowStepCreateWithoutWorkflowRuleInput[] | WorkflowStepUncheckedCreateWithoutWorkflowRuleInput[]
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRuleInput | WorkflowStepCreateOrConnectWithoutWorkflowRuleInput[]
    upsert?: WorkflowStepUpsertWithWhereUniqueWithoutWorkflowRuleInput | WorkflowStepUpsertWithWhereUniqueWithoutWorkflowRuleInput[]
    createMany?: WorkflowStepCreateManyWorkflowRuleInputEnvelope
    set?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    disconnect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    delete?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    connect?: WorkflowStepWhereUniqueInput | WorkflowStepWhereUniqueInput[]
    update?: WorkflowStepUpdateWithWhereUniqueWithoutWorkflowRuleInput | WorkflowStepUpdateWithWhereUniqueWithoutWorkflowRuleInput[]
    updateMany?: WorkflowStepUpdateManyWithWhereWithoutWorkflowRuleInput | WorkflowStepUpdateManyWithWhereWithoutWorkflowRuleInput[]
    deleteMany?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
  }

  export type WorkflowRuleCreateNestedOneWithoutWorkflowStepsInput = {
    create?: XOR<WorkflowRuleCreateWithoutWorkflowStepsInput, WorkflowRuleUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutWorkflowStepsInput
    connect?: WorkflowRuleWhereUniqueInput
  }

  export type OfficeCreateNestedOneWithoutWorkflowStepsInput = {
    create?: XOR<OfficeCreateWithoutWorkflowStepsInput, OfficeUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: OfficeCreateOrConnectWithoutWorkflowStepsInput
    connect?: OfficeWhereUniqueInput
  }

  export type WorkflowRuleUpdateOneRequiredWithoutWorkflowStepsNestedInput = {
    create?: XOR<WorkflowRuleCreateWithoutWorkflowStepsInput, WorkflowRuleUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: WorkflowRuleCreateOrConnectWithoutWorkflowStepsInput
    upsert?: WorkflowRuleUpsertWithoutWorkflowStepsInput
    connect?: WorkflowRuleWhereUniqueInput
    update?: XOR<XOR<WorkflowRuleUpdateToOneWithWhereWithoutWorkflowStepsInput, WorkflowRuleUpdateWithoutWorkflowStepsInput>, WorkflowRuleUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type OfficeUpdateOneRequiredWithoutWorkflowStepsNestedInput = {
    create?: XOR<OfficeCreateWithoutWorkflowStepsInput, OfficeUncheckedCreateWithoutWorkflowStepsInput>
    connectOrCreate?: OfficeCreateOrConnectWithoutWorkflowStepsInput
    upsert?: OfficeUpsertWithoutWorkflowStepsInput
    connect?: OfficeWhereUniqueInput
    update?: XOR<XOR<OfficeUpdateToOneWithWhereWithoutWorkflowStepsInput, OfficeUpdateWithoutWorkflowStepsInput>, OfficeUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type ClearanceRequestCreateNestedOneWithoutApprovalActionsInput = {
    create?: XOR<ClearanceRequestCreateWithoutApprovalActionsInput, ClearanceRequestUncheckedCreateWithoutApprovalActionsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutApprovalActionsInput
    connect?: ClearanceRequestWhereUniqueInput
  }

  export type ApproverCreateNestedOneWithoutApprovalActionsInput = {
    create?: XOR<ApproverCreateWithoutApprovalActionsInput, ApproverUncheckedCreateWithoutApprovalActionsInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutApprovalActionsInput
    connect?: ApproverWhereUniqueInput
  }

  export type EnumApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalStatus
  }

  export type ClearanceRequestUpdateOneRequiredWithoutApprovalActionsNestedInput = {
    create?: XOR<ClearanceRequestCreateWithoutApprovalActionsInput, ClearanceRequestUncheckedCreateWithoutApprovalActionsInput>
    connectOrCreate?: ClearanceRequestCreateOrConnectWithoutApprovalActionsInput
    upsert?: ClearanceRequestUpsertWithoutApprovalActionsInput
    connect?: ClearanceRequestWhereUniqueInput
    update?: XOR<XOR<ClearanceRequestUpdateToOneWithWhereWithoutApprovalActionsInput, ClearanceRequestUpdateWithoutApprovalActionsInput>, ClearanceRequestUncheckedUpdateWithoutApprovalActionsInput>
  }

  export type ApproverUpdateOneRequiredWithoutApprovalActionsNestedInput = {
    create?: XOR<ApproverCreateWithoutApprovalActionsInput, ApproverUncheckedCreateWithoutApprovalActionsInput>
    connectOrCreate?: ApproverCreateOrConnectWithoutApprovalActionsInput
    upsert?: ApproverUpsertWithoutApprovalActionsInput
    connect?: ApproverWhereUniqueInput
    update?: XOR<XOR<ApproverUpdateToOneWithWhereWithoutApprovalActionsInput, ApproverUpdateWithoutApprovalActionsInput>, ApproverUncheckedUpdateWithoutApprovalActionsInput>
  }

  export type UserCreateNestedOneWithoutClearanceRequestsInput = {
    create?: XOR<UserCreateWithoutClearanceRequestsInput, UserUncheckedCreateWithoutClearanceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClearanceRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type ProgramCreateNestedOneWithoutClearanceRequestsInput = {
    create?: XOR<ProgramCreateWithoutClearanceRequestsInput, ProgramUncheckedCreateWithoutClearanceRequestsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutClearanceRequestsInput
    connect?: ProgramWhereUniqueInput
  }

  export type TerminationReasonCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TerminationReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: TerminationReasonWhereUniqueInput
  }

  export type IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: IdReplacementReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: IdReplacementReasonWhereUniqueInput
  }

  export type TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TeacherClearanceReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: TeacherClearanceReasonWhereUniqueInput
  }

  export type ApprovalActionCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput> | ApprovalActionCreateWithoutClearanceRequestInput[] | ApprovalActionUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutClearanceRequestInput | ApprovalActionCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: ApprovalActionCreateManyClearanceRequestInputEnvelope
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput> | DocumentCreateWithoutClearanceRequestInput[] | DocumentUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClearanceRequestInput | DocumentCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: DocumentCreateManyClearanceRequestInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput> | NotificationCreateWithoutClearanceRequestInput[] | NotificationUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClearanceRequestInput | NotificationCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: NotificationCreateManyClearanceRequestInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type CertificateCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutClearanceRequestInput
    connect?: CertificateWhereUniqueInput
  }

  export type AuditLogCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput> | AuditLogCreateWithoutClearanceRequestInput[] | AuditLogUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutClearanceRequestInput | AuditLogCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: AuditLogCreateManyClearanceRequestInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TerminationReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: TerminationReasonWhereUniqueInput
  }

  export type IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: IdReplacementReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: IdReplacementReasonWhereUniqueInput
  }

  export type TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TeacherClearanceReasonCreateOrConnectWithoutClearanceRequestInput
    connect?: TeacherClearanceReasonWhereUniqueInput
  }

  export type ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput> | ApprovalActionCreateWithoutClearanceRequestInput[] | ApprovalActionUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutClearanceRequestInput | ApprovalActionCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: ApprovalActionCreateManyClearanceRequestInputEnvelope
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput> | DocumentCreateWithoutClearanceRequestInput[] | DocumentUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClearanceRequestInput | DocumentCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: DocumentCreateManyClearanceRequestInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput> | NotificationCreateWithoutClearanceRequestInput[] | NotificationUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClearanceRequestInput | NotificationCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: NotificationCreateManyClearanceRequestInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput = {
    create?: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutClearanceRequestInput
    connect?: CertificateWhereUniqueInput
  }

  export type AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput = {
    create?: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput> | AuditLogCreateWithoutClearanceRequestInput[] | AuditLogUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutClearanceRequestInput | AuditLogCreateOrConnectWithoutClearanceRequestInput[]
    createMany?: AuditLogCreateManyClearanceRequestInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type UserUpdateOneRequiredWithoutClearanceRequestsNestedInput = {
    create?: XOR<UserCreateWithoutClearanceRequestsInput, UserUncheckedCreateWithoutClearanceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClearanceRequestsInput
    upsert?: UserUpsertWithoutClearanceRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClearanceRequestsInput, UserUpdateWithoutClearanceRequestsInput>, UserUncheckedUpdateWithoutClearanceRequestsInput>
  }

  export type ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput = {
    create?: XOR<ProgramCreateWithoutClearanceRequestsInput, ProgramUncheckedCreateWithoutClearanceRequestsInput>
    connectOrCreate?: ProgramCreateOrConnectWithoutClearanceRequestsInput
    upsert?: ProgramUpsertWithoutClearanceRequestsInput
    connect?: ProgramWhereUniqueInput
    update?: XOR<XOR<ProgramUpdateToOneWithWhereWithoutClearanceRequestsInput, ProgramUpdateWithoutClearanceRequestsInput>, ProgramUncheckedUpdateWithoutClearanceRequestsInput>
  }

  export type TerminationReasonUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TerminationReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: TerminationReasonUpsertWithoutClearanceRequestInput
    disconnect?: TerminationReasonWhereInput | boolean
    delete?: TerminationReasonWhereInput | boolean
    connect?: TerminationReasonWhereUniqueInput
    update?: XOR<XOR<TerminationReasonUpdateToOneWithWhereWithoutClearanceRequestInput, TerminationReasonUpdateWithoutClearanceRequestInput>, TerminationReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: IdReplacementReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: IdReplacementReasonUpsertWithoutClearanceRequestInput
    disconnect?: IdReplacementReasonWhereInput | boolean
    delete?: IdReplacementReasonWhereInput | boolean
    connect?: IdReplacementReasonWhereUniqueInput
    update?: XOR<XOR<IdReplacementReasonUpdateToOneWithWhereWithoutClearanceRequestInput, IdReplacementReasonUpdateWithoutClearanceRequestInput>, IdReplacementReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TeacherClearanceReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: TeacherClearanceReasonUpsertWithoutClearanceRequestInput
    disconnect?: TeacherClearanceReasonWhereInput | boolean
    delete?: TeacherClearanceReasonWhereInput | boolean
    connect?: TeacherClearanceReasonWhereUniqueInput
    update?: XOR<XOR<TeacherClearanceReasonUpdateToOneWithWhereWithoutClearanceRequestInput, TeacherClearanceReasonUpdateWithoutClearanceRequestInput>, TeacherClearanceReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type ApprovalActionUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput> | ApprovalActionCreateWithoutClearanceRequestInput[] | ApprovalActionUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutClearanceRequestInput | ApprovalActionCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: ApprovalActionUpsertWithWhereUniqueWithoutClearanceRequestInput | ApprovalActionUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: ApprovalActionCreateManyClearanceRequestInputEnvelope
    set?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    disconnect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    delete?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    update?: ApprovalActionUpdateWithWhereUniqueWithoutClearanceRequestInput | ApprovalActionUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: ApprovalActionUpdateManyWithWhereWithoutClearanceRequestInput | ApprovalActionUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput> | DocumentCreateWithoutClearanceRequestInput[] | DocumentUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClearanceRequestInput | DocumentCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutClearanceRequestInput | DocumentUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: DocumentCreateManyClearanceRequestInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutClearanceRequestInput | DocumentUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutClearanceRequestInput | DocumentUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput> | NotificationCreateWithoutClearanceRequestInput[] | NotificationUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClearanceRequestInput | NotificationCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClearanceRequestInput | NotificationUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: NotificationCreateManyClearanceRequestInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClearanceRequestInput | NotificationUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClearanceRequestInput | NotificationUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CertificateUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutClearanceRequestInput
    upsert?: CertificateUpsertWithoutClearanceRequestInput
    disconnect?: CertificateWhereInput | boolean
    delete?: CertificateWhereInput | boolean
    connect?: CertificateWhereUniqueInput
    update?: XOR<XOR<CertificateUpdateToOneWithWhereWithoutClearanceRequestInput, CertificateUpdateWithoutClearanceRequestInput>, CertificateUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type AuditLogUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput> | AuditLogCreateWithoutClearanceRequestInput[] | AuditLogUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutClearanceRequestInput | AuditLogCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutClearanceRequestInput | AuditLogUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: AuditLogCreateManyClearanceRequestInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutClearanceRequestInput | AuditLogUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutClearanceRequestInput | AuditLogUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TerminationReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: TerminationReasonUpsertWithoutClearanceRequestInput
    disconnect?: TerminationReasonWhereInput | boolean
    delete?: TerminationReasonWhereInput | boolean
    connect?: TerminationReasonWhereUniqueInput
    update?: XOR<XOR<TerminationReasonUpdateToOneWithWhereWithoutClearanceRequestInput, TerminationReasonUpdateWithoutClearanceRequestInput>, TerminationReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: IdReplacementReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: IdReplacementReasonUpsertWithoutClearanceRequestInput
    disconnect?: IdReplacementReasonWhereInput | boolean
    delete?: IdReplacementReasonWhereInput | boolean
    connect?: IdReplacementReasonWhereUniqueInput
    update?: XOR<XOR<IdReplacementReasonUpdateToOneWithWhereWithoutClearanceRequestInput, IdReplacementReasonUpdateWithoutClearanceRequestInput>, IdReplacementReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: TeacherClearanceReasonCreateOrConnectWithoutClearanceRequestInput
    upsert?: TeacherClearanceReasonUpsertWithoutClearanceRequestInput
    disconnect?: TeacherClearanceReasonWhereInput | boolean
    delete?: TeacherClearanceReasonWhereInput | boolean
    connect?: TeacherClearanceReasonWhereUniqueInput
    update?: XOR<XOR<TeacherClearanceReasonUpdateToOneWithWhereWithoutClearanceRequestInput, TeacherClearanceReasonUpdateWithoutClearanceRequestInput>, TeacherClearanceReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput> | ApprovalActionCreateWithoutClearanceRequestInput[] | ApprovalActionUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: ApprovalActionCreateOrConnectWithoutClearanceRequestInput | ApprovalActionCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: ApprovalActionUpsertWithWhereUniqueWithoutClearanceRequestInput | ApprovalActionUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: ApprovalActionCreateManyClearanceRequestInputEnvelope
    set?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    disconnect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    delete?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    connect?: ApprovalActionWhereUniqueInput | ApprovalActionWhereUniqueInput[]
    update?: ApprovalActionUpdateWithWhereUniqueWithoutClearanceRequestInput | ApprovalActionUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: ApprovalActionUpdateManyWithWhereWithoutClearanceRequestInput | ApprovalActionUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput> | DocumentCreateWithoutClearanceRequestInput[] | DocumentUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClearanceRequestInput | DocumentCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutClearanceRequestInput | DocumentUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: DocumentCreateManyClearanceRequestInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutClearanceRequestInput | DocumentUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutClearanceRequestInput | DocumentUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput> | NotificationCreateWithoutClearanceRequestInput[] | NotificationUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClearanceRequestInput | NotificationCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClearanceRequestInput | NotificationUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: NotificationCreateManyClearanceRequestInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClearanceRequestInput | NotificationUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClearanceRequestInput | NotificationUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput = {
    create?: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutClearanceRequestInput
    upsert?: CertificateUpsertWithoutClearanceRequestInput
    disconnect?: CertificateWhereInput | boolean
    delete?: CertificateWhereInput | boolean
    connect?: CertificateWhereUniqueInput
    update?: XOR<XOR<CertificateUpdateToOneWithWhereWithoutClearanceRequestInput, CertificateUpdateWithoutClearanceRequestInput>, CertificateUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput = {
    create?: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput> | AuditLogCreateWithoutClearanceRequestInput[] | AuditLogUncheckedCreateWithoutClearanceRequestInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutClearanceRequestInput | AuditLogCreateOrConnectWithoutClearanceRequestInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutClearanceRequestInput | AuditLogUpsertWithWhereUniqueWithoutClearanceRequestInput[]
    createMany?: AuditLogCreateManyClearanceRequestInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutClearanceRequestInput | AuditLogUpdateWithWhereUniqueWithoutClearanceRequestInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutClearanceRequestInput | AuditLogUpdateManyWithWhereWithoutClearanceRequestInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAcademicStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicStatus | EnumAcademicStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicStatusFilter<$PrismaModel> | $Enums.AcademicStatus
  }

  export type NestedEnumAcademicStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AcademicStatus | EnumAcademicStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AcademicStatus[] | ListEnumAcademicStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAcademicStatusWithAggregatesFilter<$PrismaModel> | $Enums.AcademicStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAcademicStatusFilter<$PrismaModel>
    _max?: NestedEnumAcademicStatusFilter<$PrismaModel>
  }

  export type NestedEnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumProgramTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramType | EnumProgramTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramTypeFilter<$PrismaModel> | $Enums.ProgramType
  }

  export type NestedEnumProgramCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramCategory | EnumProgramCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramCategoryFilter<$PrismaModel> | $Enums.ProgramCategory
  }

  export type NestedEnumProgramTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramType | EnumProgramTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramType[] | ListEnumProgramTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProgramType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgramTypeFilter<$PrismaModel>
    _max?: NestedEnumProgramTypeFilter<$PrismaModel>
  }

  export type NestedEnumProgramCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgramCategory | EnumProgramCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProgramCategory[] | ListEnumProgramCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProgramCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProgramCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgramCategoryFilter<$PrismaModel>
    _max?: NestedEnumProgramCategoryFilter<$PrismaModel>
  }

  export type NestedEnumFormTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FormType | EnumFormTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFormTypeFilter<$PrismaModel> | $Enums.FormType
  }

  export type NestedEnumFormTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FormType | EnumFormTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FormType[] | ListEnumFormTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFormTypeWithAggregatesFilter<$PrismaModel> | $Enums.FormType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFormTypeFilter<$PrismaModel>
    _max?: NestedEnumFormTypeFilter<$PrismaModel>
  }

  export type NestedEnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.RequestStatus[] | ListEnumRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type ClearanceRequestCreateWithoutTerminationReasonInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutTerminationReasonInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutTerminationReasonInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutTerminationReasonInput, ClearanceRequestUncheckedCreateWithoutTerminationReasonInput>
  }

  export type ClearanceRequestUpsertWithoutTerminationReasonInput = {
    update: XOR<ClearanceRequestUpdateWithoutTerminationReasonInput, ClearanceRequestUncheckedUpdateWithoutTerminationReasonInput>
    create: XOR<ClearanceRequestCreateWithoutTerminationReasonInput, ClearanceRequestUncheckedCreateWithoutTerminationReasonInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutTerminationReasonInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutTerminationReasonInput, ClearanceRequestUncheckedUpdateWithoutTerminationReasonInput>
  }

  export type ClearanceRequestUpdateWithoutTerminationReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutTerminationReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestCreateWithoutIdReplacementReasonInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutIdReplacementReasonInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutIdReplacementReasonInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedCreateWithoutIdReplacementReasonInput>
  }

  export type ClearanceRequestUpsertWithoutIdReplacementReasonInput = {
    update: XOR<ClearanceRequestUpdateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedUpdateWithoutIdReplacementReasonInput>
    create: XOR<ClearanceRequestCreateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedCreateWithoutIdReplacementReasonInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutIdReplacementReasonInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutIdReplacementReasonInput, ClearanceRequestUncheckedUpdateWithoutIdReplacementReasonInput>
  }

  export type ClearanceRequestUpdateWithoutIdReplacementReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutIdReplacementReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestCreateWithoutTeacherClearanceReasonInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutTeacherClearanceReasonInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutTeacherClearanceReasonInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedCreateWithoutTeacherClearanceReasonInput>
  }

  export type ClearanceRequestUpsertWithoutTeacherClearanceReasonInput = {
    update: XOR<ClearanceRequestUpdateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedUpdateWithoutTeacherClearanceReasonInput>
    create: XOR<ClearanceRequestCreateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedCreateWithoutTeacherClearanceReasonInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutTeacherClearanceReasonInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutTeacherClearanceReasonInput, ClearanceRequestUncheckedUpdateWithoutTeacherClearanceReasonInput>
  }

  export type ClearanceRequestUpdateWithoutTeacherClearanceReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutTeacherClearanceReasonInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestCreateWithoutDocumentsInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutDocumentsInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutDocumentsInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutDocumentsInput, ClearanceRequestUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentTypeCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    requiredFor?: DocumentTypeCreaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentTypeUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    requiredFor?: DocumentTypeCreaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentTypeCreateOrConnectWithoutDocumentsInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutDocumentsInput, DocumentTypeUncheckedCreateWithoutDocumentsInput>
  }

  export type ClearanceRequestUpsertWithoutDocumentsInput = {
    update: XOR<ClearanceRequestUpdateWithoutDocumentsInput, ClearanceRequestUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ClearanceRequestCreateWithoutDocumentsInput, ClearanceRequestUncheckedCreateWithoutDocumentsInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutDocumentsInput, ClearanceRequestUncheckedUpdateWithoutDocumentsInput>
  }

  export type ClearanceRequestUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type DocumentTypeUpsertWithoutDocumentsInput = {
    update: XOR<DocumentTypeUpdateWithoutDocumentsInput, DocumentTypeUncheckedUpdateWithoutDocumentsInput>
    create: XOR<DocumentTypeCreateWithoutDocumentsInput, DocumentTypeUncheckedCreateWithoutDocumentsInput>
    where?: DocumentTypeWhereInput
  }

  export type DocumentTypeUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: DocumentTypeWhereInput
    data: XOR<DocumentTypeUpdateWithoutDocumentsInput, DocumentTypeUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentTypeUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentTypeUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiredFor?: DocumentTypeUpdaterequiredForInput | $Enums.FormType[]
  }

  export type DocumentCreateWithoutDocumentTypeInput = {
    id?: string
    filePath: string
    uploadedAt?: Date | string
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutDocumentTypeInput = {
    id?: string
    clearanceRequestId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutDocumentTypeInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type DocumentCreateManyDocumentTypeInputEnvelope = {
    data: DocumentCreateManyDocumentTypeInput | DocumentCreateManyDocumentTypeInput[]
    skipDuplicates?: boolean
  }

  export type DocumentUpsertWithWhereUniqueWithoutDocumentTypeInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutDocumentTypeInput, DocumentUncheckedUpdateWithoutDocumentTypeInput>
    create: XOR<DocumentCreateWithoutDocumentTypeInput, DocumentUncheckedCreateWithoutDocumentTypeInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutDocumentTypeInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutDocumentTypeInput, DocumentUncheckedUpdateWithoutDocumentTypeInput>
  }

  export type DocumentUpdateManyWithWhereWithoutDocumentTypeInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutDocumentTypeInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    clearanceRequestId?: StringFilter<"Document"> | string
    documentTypeId?: StringFilter<"Document"> | string
    filePath?: StringFilter<"Document"> | string
    uploadedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type ClearanceRequestCreateWithoutCertificateInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutCertificateInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutCertificateInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutCertificateInput, ClearanceRequestUncheckedCreateWithoutCertificateInput>
  }

  export type ClearanceRequestUpsertWithoutCertificateInput = {
    update: XOR<ClearanceRequestUpdateWithoutCertificateInput, ClearanceRequestUncheckedUpdateWithoutCertificateInput>
    create: XOR<ClearanceRequestCreateWithoutCertificateInput, ClearanceRequestUncheckedCreateWithoutCertificateInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutCertificateInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutCertificateInput, ClearanceRequestUncheckedUpdateWithoutCertificateInput>
  }

  export type ClearanceRequestUpdateWithoutCertificateInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutCertificateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type ClearanceRequestCreateWithoutNotificationsInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutNotificationsInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutNotificationsInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutNotificationsInput, ClearanceRequestUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClearanceRequestUpsertWithoutNotificationsInput = {
    update: XOR<ClearanceRequestUpdateWithoutNotificationsInput, ClearanceRequestUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ClearanceRequestCreateWithoutNotificationsInput, ClearanceRequestUncheckedCreateWithoutNotificationsInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutNotificationsInput, ClearanceRequestUncheckedUpdateWithoutNotificationsInput>
  }

  export type ClearanceRequestUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type ClearanceRequestCreateWithoutAuditLogsInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutAuditLogsInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutAuditLogsInput, ClearanceRequestUncheckedCreateWithoutAuditLogsInput>
  }

  export type AdminCreateWithoutAuditLogsInput = {
    id?: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    userId: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
  }

  export type AdminCreateOrConnectWithoutAuditLogsInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutAuditLogsInput, AdminUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClearanceRequestUpsertWithoutAuditLogsInput = {
    update: XOR<ClearanceRequestUpdateWithoutAuditLogsInput, ClearanceRequestUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<ClearanceRequestCreateWithoutAuditLogsInput, ClearanceRequestUncheckedCreateWithoutAuditLogsInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutAuditLogsInput, ClearanceRequestUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ClearanceRequestUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
  }

  export type AdminUpsertWithoutAuditLogsInput = {
    update: XOR<AdminUpdateWithoutAuditLogsInput, AdminUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<AdminCreateWithoutAuditLogsInput, AdminUncheckedCreateWithoutAuditLogsInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutAuditLogsInput, AdminUncheckedUpdateWithoutAuditLogsInput>
  }

  export type AdminUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
  }

  export type StudentCreateWithoutUserInput = {
    id?: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    program: ProgramCreateNestedOneWithoutStudentsInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: string
    startDate: Date | string
    programId: string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    departmentId: string
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type TeacherCreateWithoutUserInput = {
    id?: string
    hireDate: Date | string
    position: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
    department: DepartmentCreateNestedOneWithoutTeachersInput
  }

  export type TeacherUncheckedCreateWithoutUserInput = {
    id?: string
    hireDate: Date | string
    position: string
    departmentId: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
  }

  export type TeacherCreateOrConnectWithoutUserInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
  }

  export type ApproverCreateWithoutUserInput = {
    id?: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    office: OfficeCreateNestedOneWithoutApproversInput
    department?: DepartmentCreateNestedOneWithoutApproversInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutApproverInput
  }

  export type ApproverUncheckedCreateWithoutUserInput = {
    id?: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutApproverInput
  }

  export type ApproverCreateOrConnectWithoutUserInput = {
    where: ApproverWhereUniqueInput
    create: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
  }

  export type AdminCreateWithoutUserInput = {
    id?: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: string
    permissions?: AdminCreatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
    clearanceRequest?: ClearanceRequestCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    clearanceRequestId?: string | null
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClearanceRequestCreateWithoutUserInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutUserInput = {
    id?: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutUserInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput>
  }

  export type ClearanceRequestCreateManyUserInputEnvelope = {
    data: ClearanceRequestCreateManyUserInput | ClearanceRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    clearanceRequest?: ClearanceRequestCreateNestedOneWithoutAuditLogsInput
    admin?: AdminCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    clearanceRequestId?: string | null
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    programId?: StringFieldUpdateOperationsInput | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUpsertWithoutUserInput = {
    update: XOR<TeacherUpdateWithoutUserInput, TeacherUncheckedUpdateWithoutUserInput>
    create: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutUserInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutUserInput, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type TeacherUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
    department?: DepartmentUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeacherUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type ApproverUpsertWithoutUserInput = {
    update: XOR<ApproverUpdateWithoutUserInput, ApproverUncheckedUpdateWithoutUserInput>
    create: XOR<ApproverCreateWithoutUserInput, ApproverUncheckedCreateWithoutUserInput>
    where?: ApproverWhereInput
  }

  export type ApproverUpdateToOneWithWhereWithoutUserInput = {
    where?: ApproverWhereInput
    data: XOR<ApproverUpdateWithoutUserInput, ApproverUncheckedUpdateWithoutUserInput>
  }

  export type ApproverUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    office?: OfficeUpdateOneRequiredWithoutApproversNestedInput
    department?: DepartmentUpdateOneWithoutApproversNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: AdminUpdatepermissionsInput | $Enums.Permission[]
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    clearanceRequestId?: StringNullableFilter<"Notification"> | string | null
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    emailSubject?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    read?: BoolFilter<"Notification"> | boolean
    sentAt?: DateTimeFilter<"Notification"> | Date | string
    emailSentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type ClearanceRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: ClearanceRequestWhereUniqueInput
    update: XOR<ClearanceRequestUpdateWithoutUserInput, ClearanceRequestUncheckedUpdateWithoutUserInput>
    create: XOR<ClearanceRequestCreateWithoutUserInput, ClearanceRequestUncheckedCreateWithoutUserInput>
  }

  export type ClearanceRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: ClearanceRequestWhereUniqueInput
    data: XOR<ClearanceRequestUpdateWithoutUserInput, ClearanceRequestUncheckedUpdateWithoutUserInput>
  }

  export type ClearanceRequestUpdateManyWithWhereWithoutUserInput = {
    where: ClearanceRequestScalarWhereInput
    data: XOR<ClearanceRequestUpdateManyMutationInput, ClearanceRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type ClearanceRequestScalarWhereInput = {
    AND?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
    OR?: ClearanceRequestScalarWhereInput[]
    NOT?: ClearanceRequestScalarWhereInput | ClearanceRequestScalarWhereInput[]
    id?: StringFilter<"ClearanceRequest"> | string
    userId?: StringFilter<"ClearanceRequest"> | string
    formType?: EnumFormTypeFilter<"ClearanceRequest"> | $Enums.FormType
    programId?: StringFilter<"ClearanceRequest"> | string
    status?: EnumRequestStatusFilter<"ClearanceRequest"> | $Enums.RequestStatus
    rejectionReason?: StringNullableFilter<"ClearanceRequest"> | string | null
    resubmissionCount?: IntFilter<"ClearanceRequest"> | number
    submittedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"ClearanceRequest"> | Date | string
    currentStep?: IntFilter<"ClearanceRequest"> | number
    terminationReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    idReplacementReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
    teacherClearanceReasonId?: StringNullableFilter<"ClearanceRequest"> | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    clearanceRequestId?: StringNullableFilter<"AuditLog"> | string | null
    adminId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringFilter<"AuditLog"> | string
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutStudentInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type ProgramCreateWithoutStudentsInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    department: DepartmentCreateNestedOneWithoutProgramsInput
    workflowRules?: WorkflowRuleCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description?: string | null
    workflowRules?: WorkflowRuleUncheckedCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutStudentsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
  }

  export type DepartmentCreateWithoutStudentsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverCreateNestedManyWithoutDepartmentInput
    offices?: OfficeCreateNestedManyWithoutDepartmentInput
    programs?: ProgramCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverUncheckedCreateNestedManyWithoutDepartmentInput
    offices?: OfficeUncheckedCreateNestedManyWithoutDepartmentInput
    programs?: ProgramUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutStudentsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProgramUpsertWithoutStudentsInput = {
    update: XOR<ProgramUpdateWithoutStudentsInput, ProgramUncheckedUpdateWithoutStudentsInput>
    create: XOR<ProgramCreateWithoutStudentsInput, ProgramUncheckedCreateWithoutStudentsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutStudentsInput, ProgramUncheckedUpdateWithoutStudentsInput>
  }

  export type ProgramUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutProgramsNestedInput
    workflowRules?: WorkflowRuleUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    departmentId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowRules?: WorkflowRuleUncheckedUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type DepartmentUpsertWithoutStudentsInput = {
    update: XOR<DepartmentUpdateWithoutStudentsInput, DepartmentUncheckedUpdateWithoutStudentsInput>
    create: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutStudentsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutStudentsInput, DepartmentUncheckedUpdateWithoutStudentsInput>
  }

  export type DepartmentUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUncheckedUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUncheckedUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserCreateWithoutTeacherInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeacherInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeacherInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
  }

  export type DepartmentCreateWithoutTeachersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    students?: StudentCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverCreateNestedManyWithoutDepartmentInput
    offices?: OfficeCreateNestedManyWithoutDepartmentInput
    programs?: ProgramCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverUncheckedCreateNestedManyWithoutDepartmentInput
    offices?: OfficeUncheckedCreateNestedManyWithoutDepartmentInput
    programs?: ProgramUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeachersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
  }

  export type UserUpsertWithoutTeacherInput = {
    update: XOR<UserUpdateWithoutTeacherInput, UserUncheckedUpdateWithoutTeacherInput>
    create: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeacherInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeacherInput, UserUncheckedUpdateWithoutTeacherInput>
  }

  export type UserUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutTeachersInput = {
    update: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeachersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
  }

  export type DepartmentUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUncheckedUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUncheckedUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserCreateWithoutAdminInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type AuditLogCreateWithoutAdminInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    clearanceRequest?: ClearanceRequestCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutAdminInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput>
  }

  export type AuditLogCreateManyAdminInputEnvelope = {
    data: AuditLogCreateManyAdminInput | AuditLogCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuditLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutAdminInput, AuditLogUncheckedUpdateWithoutAdminInput>
    create: XOR<AuditLogCreateWithoutAdminInput, AuditLogUncheckedCreateWithoutAdminInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutAdminInput, AuditLogUncheckedUpdateWithoutAdminInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutAdminInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type TeacherCreateWithoutDepartmentInput = {
    id?: string
    hireDate: Date | string
    position: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
    user: UserCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    hireDate: Date | string
    position: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
  }

  export type TeacherCreateOrConnectWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherCreateManyDepartmentInputEnvelope = {
    data: TeacherCreateManyDepartmentInput | TeacherCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutDepartmentInput = {
    id?: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    user: UserCreateNestedOneWithoutStudentInput
    program: ProgramCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    startDate: Date | string
    programId: string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
  }

  export type StudentCreateOrConnectWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentCreateManyDepartmentInputEnvelope = {
    data: StudentCreateManyDepartmentInput | StudentCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type ApproverCreateWithoutDepartmentInput = {
    id?: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    user: UserCreateNestedOneWithoutApproverInput
    office: OfficeCreateNestedOneWithoutApproversInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutApproverInput
  }

  export type ApproverUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutApproverInput
  }

  export type ApproverCreateOrConnectWithoutDepartmentInput = {
    where: ApproverWhereUniqueInput
    create: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput>
  }

  export type ApproverCreateManyDepartmentInputEnvelope = {
    data: ApproverCreateManyDepartmentInput | ApproverCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type OfficeCreateWithoutDepartmentInput = {
    id?: string
    name: string
    description?: string | null
    approvers?: ApproverCreateNestedManyWithoutOfficeInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutOfficeInput
  }

  export type OfficeUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    description?: string | null
    approvers?: ApproverUncheckedCreateNestedManyWithoutOfficeInput
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficeCreateOrConnectWithoutDepartmentInput = {
    where: OfficeWhereUniqueInput
    create: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput>
  }

  export type OfficeCreateManyDepartmentInputEnvelope = {
    data: OfficeCreateManyDepartmentInput | OfficeCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type ProgramCreateWithoutDepartmentInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    students?: StudentCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleUncheckedCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutDepartmentInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput>
  }

  export type ProgramCreateManyDepartmentInputEnvelope = {
    data: ProgramCreateManyDepartmentInput | ProgramCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeacherUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    id?: StringFilter<"Teacher"> | string
    userId?: StringFilter<"Teacher"> | string
    hireDate?: DateTimeFilter<"Teacher"> | Date | string
    position?: StringFilter<"Teacher"> | string
    departmentId?: StringFilter<"Teacher"> | string
    employmentStatus?: EnumEmploymentStatusFilter<"Teacher"> | $Enums.EmploymentStatus
    yearsOfService?: IntFilter<"Teacher"> | number
  }

  export type StudentUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
  }

  export type StudentUpdateManyWithWhereWithoutDepartmentInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    userId?: StringFilter<"Student"> | string
    startDate?: DateTimeFilter<"Student"> | Date | string
    programId?: StringFilter<"Student"> | string
    currentYear?: IntFilter<"Student"> | number
    semester?: IntFilter<"Student"> | number
    academicStatus?: EnumAcademicStatusFilter<"Student"> | $Enums.AcademicStatus
    departmentId?: StringFilter<"Student"> | string
  }

  export type ApproverUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: ApproverWhereUniqueInput
    update: XOR<ApproverUpdateWithoutDepartmentInput, ApproverUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ApproverCreateWithoutDepartmentInput, ApproverUncheckedCreateWithoutDepartmentInput>
  }

  export type ApproverUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: ApproverWhereUniqueInput
    data: XOR<ApproverUpdateWithoutDepartmentInput, ApproverUncheckedUpdateWithoutDepartmentInput>
  }

  export type ApproverUpdateManyWithWhereWithoutDepartmentInput = {
    where: ApproverScalarWhereInput
    data: XOR<ApproverUpdateManyMutationInput, ApproverUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type ApproverScalarWhereInput = {
    AND?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
    OR?: ApproverScalarWhereInput[]
    NOT?: ApproverScalarWhereInput | ApproverScalarWhereInput[]
    id?: StringFilter<"Approver"> | string
    userId?: StringFilter<"Approver"> | string
    officeId?: StringFilter<"Approver"> | string
    digitalSignature?: StringNullableFilter<"Approver"> | string | null
    yearsOfExperience?: IntFilter<"Approver"> | number
    departmentId?: StringNullableFilter<"Approver"> | string | null
  }

  export type OfficeUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: OfficeWhereUniqueInput
    update: XOR<OfficeUpdateWithoutDepartmentInput, OfficeUncheckedUpdateWithoutDepartmentInput>
    create: XOR<OfficeCreateWithoutDepartmentInput, OfficeUncheckedCreateWithoutDepartmentInput>
  }

  export type OfficeUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: OfficeWhereUniqueInput
    data: XOR<OfficeUpdateWithoutDepartmentInput, OfficeUncheckedUpdateWithoutDepartmentInput>
  }

  export type OfficeUpdateManyWithWhereWithoutDepartmentInput = {
    where: OfficeScalarWhereInput
    data: XOR<OfficeUpdateManyMutationInput, OfficeUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type OfficeScalarWhereInput = {
    AND?: OfficeScalarWhereInput | OfficeScalarWhereInput[]
    OR?: OfficeScalarWhereInput[]
    NOT?: OfficeScalarWhereInput | OfficeScalarWhereInput[]
    id?: StringFilter<"Office"> | string
    name?: StringFilter<"Office"> | string
    description?: StringNullableFilter<"Office"> | string | null
    departmentId?: StringNullableFilter<"Office"> | string | null
  }

  export type ProgramUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: ProgramWhereUniqueInput
    update: XOR<ProgramUpdateWithoutDepartmentInput, ProgramUncheckedUpdateWithoutDepartmentInput>
    create: XOR<ProgramCreateWithoutDepartmentInput, ProgramUncheckedCreateWithoutDepartmentInput>
  }

  export type ProgramUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: ProgramWhereUniqueInput
    data: XOR<ProgramUpdateWithoutDepartmentInput, ProgramUncheckedUpdateWithoutDepartmentInput>
  }

  export type ProgramUpdateManyWithWhereWithoutDepartmentInput = {
    where: ProgramScalarWhereInput
    data: XOR<ProgramUpdateManyMutationInput, ProgramUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type ProgramScalarWhereInput = {
    AND?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    OR?: ProgramScalarWhereInput[]
    NOT?: ProgramScalarWhereInput | ProgramScalarWhereInput[]
    id?: StringFilter<"Program"> | string
    name?: StringFilter<"Program"> | string
    type?: EnumProgramTypeFilter<"Program"> | $Enums.ProgramType
    category?: EnumProgramCategoryFilter<"Program"> | $Enums.ProgramCategory
    departmentId?: StringFilter<"Program"> | string
    description?: StringNullableFilter<"Program"> | string | null
  }

  export type DepartmentCreateWithoutProgramsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    students?: StudentCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverCreateNestedManyWithoutDepartmentInput
    offices?: OfficeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutProgramsInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverUncheckedCreateNestedManyWithoutDepartmentInput
    offices?: OfficeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutProgramsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutProgramsInput, DepartmentUncheckedCreateWithoutProgramsInput>
  }

  export type StudentCreateWithoutProgramInput = {
    id?: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    user: UserCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutProgramInput = {
    id?: string
    userId: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    departmentId: string
  }

  export type StudentCreateOrConnectWithoutProgramInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput>
  }

  export type StudentCreateManyProgramInputEnvelope = {
    data: StudentCreateManyProgramInput | StudentCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowRuleCreateWithoutProgramInput = {
    id?: string
    formType: $Enums.FormType
    description?: string | null
    workflowSteps?: WorkflowStepCreateNestedManyWithoutWorkflowRuleInput
  }

  export type WorkflowRuleUncheckedCreateWithoutProgramInput = {
    id?: string
    formType: $Enums.FormType
    description?: string | null
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutWorkflowRuleInput
  }

  export type WorkflowRuleCreateOrConnectWithoutProgramInput = {
    where: WorkflowRuleWhereUniqueInput
    create: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput>
  }

  export type WorkflowRuleCreateManyProgramInputEnvelope = {
    data: WorkflowRuleCreateManyProgramInput | WorkflowRuleCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type ClearanceRequestCreateWithoutProgramInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutProgramInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutProgramInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput>
  }

  export type ClearanceRequestCreateManyProgramInputEnvelope = {
    data: ClearanceRequestCreateManyProgramInput | ClearanceRequestCreateManyProgramInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutProgramsInput = {
    update: XOR<DepartmentUpdateWithoutProgramsInput, DepartmentUncheckedUpdateWithoutProgramsInput>
    create: XOR<DepartmentCreateWithoutProgramsInput, DepartmentUncheckedCreateWithoutProgramsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutProgramsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutProgramsInput, DepartmentUncheckedUpdateWithoutProgramsInput>
  }

  export type DepartmentUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    students?: StudentUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutProgramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUncheckedUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutProgramInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutProgramInput, StudentUncheckedUpdateWithoutProgramInput>
    create: XOR<StudentCreateWithoutProgramInput, StudentUncheckedCreateWithoutProgramInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutProgramInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutProgramInput, StudentUncheckedUpdateWithoutProgramInput>
  }

  export type StudentUpdateManyWithWhereWithoutProgramInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutProgramInput>
  }

  export type WorkflowRuleUpsertWithWhereUniqueWithoutProgramInput = {
    where: WorkflowRuleWhereUniqueInput
    update: XOR<WorkflowRuleUpdateWithoutProgramInput, WorkflowRuleUncheckedUpdateWithoutProgramInput>
    create: XOR<WorkflowRuleCreateWithoutProgramInput, WorkflowRuleUncheckedCreateWithoutProgramInput>
  }

  export type WorkflowRuleUpdateWithWhereUniqueWithoutProgramInput = {
    where: WorkflowRuleWhereUniqueInput
    data: XOR<WorkflowRuleUpdateWithoutProgramInput, WorkflowRuleUncheckedUpdateWithoutProgramInput>
  }

  export type WorkflowRuleUpdateManyWithWhereWithoutProgramInput = {
    where: WorkflowRuleScalarWhereInput
    data: XOR<WorkflowRuleUpdateManyMutationInput, WorkflowRuleUncheckedUpdateManyWithoutProgramInput>
  }

  export type WorkflowRuleScalarWhereInput = {
    AND?: WorkflowRuleScalarWhereInput | WorkflowRuleScalarWhereInput[]
    OR?: WorkflowRuleScalarWhereInput[]
    NOT?: WorkflowRuleScalarWhereInput | WorkflowRuleScalarWhereInput[]
    id?: StringFilter<"WorkflowRule"> | string
    formType?: EnumFormTypeFilter<"WorkflowRule"> | $Enums.FormType
    programId?: StringNullableFilter<"WorkflowRule"> | string | null
    description?: StringNullableFilter<"WorkflowRule"> | string | null
  }

  export type ClearanceRequestUpsertWithWhereUniqueWithoutProgramInput = {
    where: ClearanceRequestWhereUniqueInput
    update: XOR<ClearanceRequestUpdateWithoutProgramInput, ClearanceRequestUncheckedUpdateWithoutProgramInput>
    create: XOR<ClearanceRequestCreateWithoutProgramInput, ClearanceRequestUncheckedCreateWithoutProgramInput>
  }

  export type ClearanceRequestUpdateWithWhereUniqueWithoutProgramInput = {
    where: ClearanceRequestWhereUniqueInput
    data: XOR<ClearanceRequestUpdateWithoutProgramInput, ClearanceRequestUncheckedUpdateWithoutProgramInput>
  }

  export type ClearanceRequestUpdateManyWithWhereWithoutProgramInput = {
    where: ClearanceRequestScalarWhereInput
    data: XOR<ClearanceRequestUpdateManyMutationInput, ClearanceRequestUncheckedUpdateManyWithoutProgramInput>
  }

  export type DepartmentCreateWithoutOfficesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    students?: StudentCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverCreateNestedManyWithoutDepartmentInput
    programs?: ProgramCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutOfficesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    approvers?: ApproverUncheckedCreateNestedManyWithoutDepartmentInput
    programs?: ProgramUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutOfficesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutOfficesInput, DepartmentUncheckedCreateWithoutOfficesInput>
  }

  export type ApproverCreateWithoutOfficeInput = {
    id?: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    user: UserCreateNestedOneWithoutApproverInput
    department?: DepartmentCreateNestedOneWithoutApproversInput
    approvalActions?: ApprovalActionCreateNestedManyWithoutApproverInput
  }

  export type ApproverUncheckedCreateWithoutOfficeInput = {
    id?: string
    userId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
    approvalActions?: ApprovalActionUncheckedCreateNestedManyWithoutApproverInput
  }

  export type ApproverCreateOrConnectWithoutOfficeInput = {
    where: ApproverWhereUniqueInput
    create: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput>
  }

  export type ApproverCreateManyOfficeInputEnvelope = {
    data: ApproverCreateManyOfficeInput | ApproverCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowStepCreateWithoutOfficeInput = {
    id?: string
    stepOrder: number
    description?: string | null
    workflowRule: WorkflowRuleCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateWithoutOfficeInput = {
    id?: string
    workflowRuleId: string
    stepOrder: number
    description?: string | null
  }

  export type WorkflowStepCreateOrConnectWithoutOfficeInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput>
  }

  export type WorkflowStepCreateManyOfficeInputEnvelope = {
    data: WorkflowStepCreateManyOfficeInput | WorkflowStepCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutOfficesInput = {
    update: XOR<DepartmentUpdateWithoutOfficesInput, DepartmentUncheckedUpdateWithoutOfficesInput>
    create: XOR<DepartmentCreateWithoutOfficesInput, DepartmentUncheckedCreateWithoutOfficesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutOfficesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutOfficesInput, DepartmentUncheckedUpdateWithoutOfficesInput>
  }

  export type DepartmentUpdateWithoutOfficesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    students?: StudentUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutOfficesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    approvers?: ApproverUncheckedUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type ApproverUpsertWithWhereUniqueWithoutOfficeInput = {
    where: ApproverWhereUniqueInput
    update: XOR<ApproverUpdateWithoutOfficeInput, ApproverUncheckedUpdateWithoutOfficeInput>
    create: XOR<ApproverCreateWithoutOfficeInput, ApproverUncheckedCreateWithoutOfficeInput>
  }

  export type ApproverUpdateWithWhereUniqueWithoutOfficeInput = {
    where: ApproverWhereUniqueInput
    data: XOR<ApproverUpdateWithoutOfficeInput, ApproverUncheckedUpdateWithoutOfficeInput>
  }

  export type ApproverUpdateManyWithWhereWithoutOfficeInput = {
    where: ApproverScalarWhereInput
    data: XOR<ApproverUpdateManyMutationInput, ApproverUncheckedUpdateManyWithoutOfficeInput>
  }

  export type WorkflowStepUpsertWithWhereUniqueWithoutOfficeInput = {
    where: WorkflowStepWhereUniqueInput
    update: XOR<WorkflowStepUpdateWithoutOfficeInput, WorkflowStepUncheckedUpdateWithoutOfficeInput>
    create: XOR<WorkflowStepCreateWithoutOfficeInput, WorkflowStepUncheckedCreateWithoutOfficeInput>
  }

  export type WorkflowStepUpdateWithWhereUniqueWithoutOfficeInput = {
    where: WorkflowStepWhereUniqueInput
    data: XOR<WorkflowStepUpdateWithoutOfficeInput, WorkflowStepUncheckedUpdateWithoutOfficeInput>
  }

  export type WorkflowStepUpdateManyWithWhereWithoutOfficeInput = {
    where: WorkflowStepScalarWhereInput
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyWithoutOfficeInput>
  }

  export type WorkflowStepScalarWhereInput = {
    AND?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
    OR?: WorkflowStepScalarWhereInput[]
    NOT?: WorkflowStepScalarWhereInput | WorkflowStepScalarWhereInput[]
    id?: StringFilter<"WorkflowStep"> | string
    workflowRuleId?: StringFilter<"WorkflowStep"> | string
    stepOrder?: IntFilter<"WorkflowStep"> | number
    officeId?: StringFilter<"WorkflowStep"> | string
    description?: StringNullableFilter<"WorkflowStep"> | string | null
  }

  export type UserCreateWithoutApproverInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApproverInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApproverInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
  }

  export type OfficeCreateWithoutApproversInput = {
    id?: string
    name: string
    description?: string | null
    department?: DepartmentCreateNestedOneWithoutOfficesInput
    workflowSteps?: WorkflowStepCreateNestedManyWithoutOfficeInput
  }

  export type OfficeUncheckedCreateWithoutApproversInput = {
    id?: string
    name: string
    description?: string | null
    departmentId?: string | null
    workflowSteps?: WorkflowStepUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficeCreateOrConnectWithoutApproversInput = {
    where: OfficeWhereUniqueInput
    create: XOR<OfficeCreateWithoutApproversInput, OfficeUncheckedCreateWithoutApproversInput>
  }

  export type DepartmentCreateWithoutApproversInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    students?: StudentCreateNestedManyWithoutDepartmentInput
    offices?: OfficeCreateNestedManyWithoutDepartmentInput
    programs?: ProgramCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutApproversInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
    offices?: OfficeUncheckedCreateNestedManyWithoutDepartmentInput
    programs?: ProgramUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutApproversInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutApproversInput, DepartmentUncheckedCreateWithoutApproversInput>
  }

  export type ApprovalActionCreateWithoutApproverInput = {
    id?: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
    clearanceRequest: ClearanceRequestCreateNestedOneWithoutApprovalActionsInput
  }

  export type ApprovalActionUncheckedCreateWithoutApproverInput = {
    id?: string
    clearanceRequestId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type ApprovalActionCreateOrConnectWithoutApproverInput = {
    where: ApprovalActionWhereUniqueInput
    create: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput>
  }

  export type ApprovalActionCreateManyApproverInputEnvelope = {
    data: ApprovalActionCreateManyApproverInput | ApprovalActionCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutApproverInput = {
    update: XOR<UserUpdateWithoutApproverInput, UserUncheckedUpdateWithoutApproverInput>
    create: XOR<UserCreateWithoutApproverInput, UserUncheckedCreateWithoutApproverInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApproverInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApproverInput, UserUncheckedUpdateWithoutApproverInput>
  }

  export type UserUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OfficeUpsertWithoutApproversInput = {
    update: XOR<OfficeUpdateWithoutApproversInput, OfficeUncheckedUpdateWithoutApproversInput>
    create: XOR<OfficeCreateWithoutApproversInput, OfficeUncheckedCreateWithoutApproversInput>
    where?: OfficeWhereInput
  }

  export type OfficeUpdateToOneWithWhereWithoutApproversInput = {
    where?: OfficeWhereInput
    data: XOR<OfficeUpdateWithoutApproversInput, OfficeUncheckedUpdateWithoutApproversInput>
  }

  export type OfficeUpdateWithoutApproversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneWithoutOfficesNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeUncheckedUpdateWithoutApproversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type DepartmentUpsertWithoutApproversInput = {
    update: XOR<DepartmentUpdateWithoutApproversInput, DepartmentUncheckedUpdateWithoutApproversInput>
    create: XOR<DepartmentCreateWithoutApproversInput, DepartmentUncheckedCreateWithoutApproversInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutApproversInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutApproversInput, DepartmentUncheckedUpdateWithoutApproversInput>
  }

  export type DepartmentUpdateWithoutApproversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    students?: StudentUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutApproversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
    offices?: OfficeUncheckedUpdateManyWithoutDepartmentNestedInput
    programs?: ProgramUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type ApprovalActionUpsertWithWhereUniqueWithoutApproverInput = {
    where: ApprovalActionWhereUniqueInput
    update: XOR<ApprovalActionUpdateWithoutApproverInput, ApprovalActionUncheckedUpdateWithoutApproverInput>
    create: XOR<ApprovalActionCreateWithoutApproverInput, ApprovalActionUncheckedCreateWithoutApproverInput>
  }

  export type ApprovalActionUpdateWithWhereUniqueWithoutApproverInput = {
    where: ApprovalActionWhereUniqueInput
    data: XOR<ApprovalActionUpdateWithoutApproverInput, ApprovalActionUncheckedUpdateWithoutApproverInput>
  }

  export type ApprovalActionUpdateManyWithWhereWithoutApproverInput = {
    where: ApprovalActionScalarWhereInput
    data: XOR<ApprovalActionUpdateManyMutationInput, ApprovalActionUncheckedUpdateManyWithoutApproverInput>
  }

  export type ApprovalActionScalarWhereInput = {
    AND?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
    OR?: ApprovalActionScalarWhereInput[]
    NOT?: ApprovalActionScalarWhereInput | ApprovalActionScalarWhereInput[]
    id?: StringFilter<"ApprovalAction"> | string
    clearanceRequestId?: StringFilter<"ApprovalAction"> | string
    approverId?: StringFilter<"ApprovalAction"> | string
    status?: EnumApprovalStatusFilter<"ApprovalAction"> | $Enums.ApprovalStatus
    comment?: StringNullableFilter<"ApprovalAction"> | string | null
    actionDate?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    finalizedAt?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
    actionDueBy?: DateTimeNullableFilter<"ApprovalAction"> | Date | string | null
  }

  export type ProgramCreateWithoutWorkflowRulesInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    department: DepartmentCreateNestedOneWithoutProgramsInput
    students?: StudentCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutWorkflowRulesInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description?: string | null
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
    clearanceRequests?: ClearanceRequestUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutWorkflowRulesInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutWorkflowRulesInput, ProgramUncheckedCreateWithoutWorkflowRulesInput>
  }

  export type WorkflowStepCreateWithoutWorkflowRuleInput = {
    id?: string
    stepOrder: number
    description?: string | null
    office: OfficeCreateNestedOneWithoutWorkflowStepsInput
  }

  export type WorkflowStepUncheckedCreateWithoutWorkflowRuleInput = {
    id?: string
    stepOrder: number
    officeId: string
    description?: string | null
  }

  export type WorkflowStepCreateOrConnectWithoutWorkflowRuleInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput>
  }

  export type WorkflowStepCreateManyWorkflowRuleInputEnvelope = {
    data: WorkflowStepCreateManyWorkflowRuleInput | WorkflowStepCreateManyWorkflowRuleInput[]
    skipDuplicates?: boolean
  }

  export type ProgramUpsertWithoutWorkflowRulesInput = {
    update: XOR<ProgramUpdateWithoutWorkflowRulesInput, ProgramUncheckedUpdateWithoutWorkflowRulesInput>
    create: XOR<ProgramCreateWithoutWorkflowRulesInput, ProgramUncheckedCreateWithoutWorkflowRulesInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutWorkflowRulesInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutWorkflowRulesInput, ProgramUncheckedUpdateWithoutWorkflowRulesInput>
  }

  export type ProgramUpdateWithoutWorkflowRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutProgramsNestedInput
    students?: StudentUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutWorkflowRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    departmentId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WorkflowStepUpsertWithWhereUniqueWithoutWorkflowRuleInput = {
    where: WorkflowStepWhereUniqueInput
    update: XOR<WorkflowStepUpdateWithoutWorkflowRuleInput, WorkflowStepUncheckedUpdateWithoutWorkflowRuleInput>
    create: XOR<WorkflowStepCreateWithoutWorkflowRuleInput, WorkflowStepUncheckedCreateWithoutWorkflowRuleInput>
  }

  export type WorkflowStepUpdateWithWhereUniqueWithoutWorkflowRuleInput = {
    where: WorkflowStepWhereUniqueInput
    data: XOR<WorkflowStepUpdateWithoutWorkflowRuleInput, WorkflowStepUncheckedUpdateWithoutWorkflowRuleInput>
  }

  export type WorkflowStepUpdateManyWithWhereWithoutWorkflowRuleInput = {
    where: WorkflowStepScalarWhereInput
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyWithoutWorkflowRuleInput>
  }

  export type WorkflowRuleCreateWithoutWorkflowStepsInput = {
    id?: string
    formType: $Enums.FormType
    description?: string | null
    program?: ProgramCreateNestedOneWithoutWorkflowRulesInput
  }

  export type WorkflowRuleUncheckedCreateWithoutWorkflowStepsInput = {
    id?: string
    formType: $Enums.FormType
    programId?: string | null
    description?: string | null
  }

  export type WorkflowRuleCreateOrConnectWithoutWorkflowStepsInput = {
    where: WorkflowRuleWhereUniqueInput
    create: XOR<WorkflowRuleCreateWithoutWorkflowStepsInput, WorkflowRuleUncheckedCreateWithoutWorkflowStepsInput>
  }

  export type OfficeCreateWithoutWorkflowStepsInput = {
    id?: string
    name: string
    description?: string | null
    department?: DepartmentCreateNestedOneWithoutOfficesInput
    approvers?: ApproverCreateNestedManyWithoutOfficeInput
  }

  export type OfficeUncheckedCreateWithoutWorkflowStepsInput = {
    id?: string
    name: string
    description?: string | null
    departmentId?: string | null
    approvers?: ApproverUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficeCreateOrConnectWithoutWorkflowStepsInput = {
    where: OfficeWhereUniqueInput
    create: XOR<OfficeCreateWithoutWorkflowStepsInput, OfficeUncheckedCreateWithoutWorkflowStepsInput>
  }

  export type WorkflowRuleUpsertWithoutWorkflowStepsInput = {
    update: XOR<WorkflowRuleUpdateWithoutWorkflowStepsInput, WorkflowRuleUncheckedUpdateWithoutWorkflowStepsInput>
    create: XOR<WorkflowRuleCreateWithoutWorkflowStepsInput, WorkflowRuleUncheckedCreateWithoutWorkflowStepsInput>
    where?: WorkflowRuleWhereInput
  }

  export type WorkflowRuleUpdateToOneWithWhereWithoutWorkflowStepsInput = {
    where?: WorkflowRuleWhereInput
    data: XOR<WorkflowRuleUpdateWithoutWorkflowStepsInput, WorkflowRuleUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type WorkflowRuleUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    program?: ProgramUpdateOneWithoutWorkflowRulesNestedInput
  }

  export type WorkflowRuleUncheckedUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OfficeUpsertWithoutWorkflowStepsInput = {
    update: XOR<OfficeUpdateWithoutWorkflowStepsInput, OfficeUncheckedUpdateWithoutWorkflowStepsInput>
    create: XOR<OfficeCreateWithoutWorkflowStepsInput, OfficeUncheckedCreateWithoutWorkflowStepsInput>
    where?: OfficeWhereInput
  }

  export type OfficeUpdateToOneWithWhereWithoutWorkflowStepsInput = {
    where?: OfficeWhereInput
    data: XOR<OfficeUpdateWithoutWorkflowStepsInput, OfficeUncheckedUpdateWithoutWorkflowStepsInput>
  }

  export type OfficeUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneWithoutOfficesNestedInput
    approvers?: ApproverUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeUncheckedUpdateWithoutWorkflowStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvers?: ApproverUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type ClearanceRequestCreateWithoutApprovalActionsInput = {
    id?: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    user: UserCreateNestedOneWithoutClearanceRequestsInput
    program: ProgramCreateNestedOneWithoutClearanceRequestsInput
    terminationReason?: TerminationReasonCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonCreateNestedOneWithoutClearanceRequestInput
    documents?: DocumentCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestUncheckedCreateWithoutApprovalActionsInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
    terminationReason?: TerminationReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    idReplacementReason?: IdReplacementReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedCreateNestedOneWithoutClearanceRequestInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClearanceRequestInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClearanceRequestInput
    certificate?: CertificateUncheckedCreateNestedOneWithoutClearanceRequestInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutClearanceRequestInput
  }

  export type ClearanceRequestCreateOrConnectWithoutApprovalActionsInput = {
    where: ClearanceRequestWhereUniqueInput
    create: XOR<ClearanceRequestCreateWithoutApprovalActionsInput, ClearanceRequestUncheckedCreateWithoutApprovalActionsInput>
  }

  export type ApproverCreateWithoutApprovalActionsInput = {
    id?: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    user: UserCreateNestedOneWithoutApproverInput
    office: OfficeCreateNestedOneWithoutApproversInput
    department?: DepartmentCreateNestedOneWithoutApproversInput
  }

  export type ApproverUncheckedCreateWithoutApprovalActionsInput = {
    id?: string
    userId: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
  }

  export type ApproverCreateOrConnectWithoutApprovalActionsInput = {
    where: ApproverWhereUniqueInput
    create: XOR<ApproverCreateWithoutApprovalActionsInput, ApproverUncheckedCreateWithoutApprovalActionsInput>
  }

  export type ClearanceRequestUpsertWithoutApprovalActionsInput = {
    update: XOR<ClearanceRequestUpdateWithoutApprovalActionsInput, ClearanceRequestUncheckedUpdateWithoutApprovalActionsInput>
    create: XOR<ClearanceRequestCreateWithoutApprovalActionsInput, ClearanceRequestUncheckedCreateWithoutApprovalActionsInput>
    where?: ClearanceRequestWhereInput
  }

  export type ClearanceRequestUpdateToOneWithWhereWithoutApprovalActionsInput = {
    where?: ClearanceRequestWhereInput
    data: XOR<ClearanceRequestUpdateWithoutApprovalActionsInput, ClearanceRequestUncheckedUpdateWithoutApprovalActionsInput>
  }

  export type ClearanceRequestUpdateWithoutApprovalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutApprovalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ApproverUpsertWithoutApprovalActionsInput = {
    update: XOR<ApproverUpdateWithoutApprovalActionsInput, ApproverUncheckedUpdateWithoutApprovalActionsInput>
    create: XOR<ApproverCreateWithoutApprovalActionsInput, ApproverUncheckedCreateWithoutApprovalActionsInput>
    where?: ApproverWhereInput
  }

  export type ApproverUpdateToOneWithWhereWithoutApprovalActionsInput = {
    where?: ApproverWhereInput
    data: XOR<ApproverUpdateWithoutApprovalActionsInput, ApproverUncheckedUpdateWithoutApprovalActionsInput>
  }

  export type ApproverUpdateWithoutApprovalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutApproverNestedInput
    office?: OfficeUpdateOneRequiredWithoutApproversNestedInput
    department?: DepartmentUpdateOneWithoutApproversNestedInput
  }

  export type ApproverUncheckedUpdateWithoutApprovalActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutClearanceRequestsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    teacher?: TeacherCreateNestedOneWithoutUserInput
    approver?: ApproverCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClearanceRequestsInput = {
    id?: string
    username: string
    passwordHash: string
    firstName: string
    fatherName: string
    grandfatherName: string
    email?: string | null
    role: $Enums.UserRole
    status?: $Enums.UserStatus
    isFirstLogin?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: number
    isLocked?: boolean
    lockedUntil?: Date | string | null
    lockedAt?: Date | string | null
    emailVerified?: boolean
    emailToken?: string | null
    emailTokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    browserFingerprint?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    approver?: ApproverUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClearanceRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClearanceRequestsInput, UserUncheckedCreateWithoutClearanceRequestsInput>
  }

  export type ProgramCreateWithoutClearanceRequestsInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
    department: DepartmentCreateNestedOneWithoutProgramsInput
    students?: StudentCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleCreateNestedManyWithoutProgramInput
  }

  export type ProgramUncheckedCreateWithoutClearanceRequestsInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    departmentId: string
    description?: string | null
    students?: StudentUncheckedCreateNestedManyWithoutProgramInput
    workflowRules?: WorkflowRuleUncheckedCreateNestedManyWithoutProgramInput
  }

  export type ProgramCreateOrConnectWithoutClearanceRequestsInput = {
    where: ProgramWhereUniqueInput
    create: XOR<ProgramCreateWithoutClearanceRequestsInput, ProgramUncheckedCreateWithoutClearanceRequestsInput>
  }

  export type TerminationReasonCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
    description?: string | null
  }

  export type TerminationReasonUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
    description?: string | null
  }

  export type TerminationReasonCreateOrConnectWithoutClearanceRequestInput = {
    where: TerminationReasonWhereUniqueInput
    create: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
  }

  export type IdReplacementReasonCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
    description?: string | null
  }

  export type IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
    description?: string | null
  }

  export type IdReplacementReasonCreateOrConnectWithoutClearanceRequestInput = {
    where: IdReplacementReasonWhereUniqueInput
    create: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
  }

  export type TeacherClearanceReasonCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
  }

  export type TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    reason: string
  }

  export type TeacherClearanceReasonCreateOrConnectWithoutClearanceRequestInput = {
    where: TeacherClearanceReasonWhereUniqueInput
    create: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
  }

  export type ApprovalActionCreateWithoutClearanceRequestInput = {
    id?: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
    approver: ApproverCreateNestedOneWithoutApprovalActionsInput
  }

  export type ApprovalActionUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    approverId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type ApprovalActionCreateOrConnectWithoutClearanceRequestInput = {
    where: ApprovalActionWhereUniqueInput
    create: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput>
  }

  export type ApprovalActionCreateManyClearanceRequestInputEnvelope = {
    data: ApprovalActionCreateManyClearanceRequestInput | ApprovalActionCreateManyClearanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutClearanceRequestInput = {
    id?: string
    filePath: string
    uploadedAt?: Date | string
    documentType: DocumentTypeCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    documentTypeId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutClearanceRequestInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput>
  }

  export type DocumentCreateManyClearanceRequestInputEnvelope = {
    data: DocumentCreateManyClearanceRequestInput | DocumentCreateManyClearanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutClearanceRequestInput = {
    id?: string
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    userId: string
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutClearanceRequestInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput>
  }

  export type NotificationCreateManyClearanceRequestInputEnvelope = {
    data: NotificationCreateManyClearanceRequestInput | NotificationCreateManyClearanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutClearanceRequestInput = {
    id?: string
    filePath: string
    qrCode: string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: Date | string
  }

  export type CertificateUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    filePath: string
    qrCode: string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: Date | string
  }

  export type CertificateCreateOrConnectWithoutClearanceRequestInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
  }

  export type AuditLogCreateWithoutClearanceRequestInput = {
    id?: string
    action: string
    details: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    admin?: AdminCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutClearanceRequestInput = {
    id?: string
    userId: string
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutClearanceRequestInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput>
  }

  export type AuditLogCreateManyClearanceRequestInputEnvelope = {
    data: AuditLogCreateManyClearanceRequestInput | AuditLogCreateManyClearanceRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutClearanceRequestsInput = {
    update: XOR<UserUpdateWithoutClearanceRequestsInput, UserUncheckedUpdateWithoutClearanceRequestsInput>
    create: XOR<UserCreateWithoutClearanceRequestsInput, UserUncheckedCreateWithoutClearanceRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClearanceRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClearanceRequestsInput, UserUncheckedUpdateWithoutClearanceRequestsInput>
  }

  export type UserUpdateWithoutClearanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    approver?: ApproverUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClearanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    fatherName?: StringFieldUpdateOperationsInput | string
    grandfatherName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    isFirstLogin?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: IntFieldUpdateOperationsInput | number
    isLocked?: BoolFieldUpdateOperationsInput | boolean
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    approver?: ApproverUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProgramUpsertWithoutClearanceRequestsInput = {
    update: XOR<ProgramUpdateWithoutClearanceRequestsInput, ProgramUncheckedUpdateWithoutClearanceRequestsInput>
    create: XOR<ProgramCreateWithoutClearanceRequestsInput, ProgramUncheckedCreateWithoutClearanceRequestsInput>
    where?: ProgramWhereInput
  }

  export type ProgramUpdateToOneWithWhereWithoutClearanceRequestsInput = {
    where?: ProgramWhereInput
    data: XOR<ProgramUpdateWithoutClearanceRequestsInput, ProgramUncheckedUpdateWithoutClearanceRequestsInput>
  }

  export type ProgramUpdateWithoutClearanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutProgramsNestedInput
    students?: StudentUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutClearanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    departmentId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type TerminationReasonUpsertWithoutClearanceRequestInput = {
    update: XOR<TerminationReasonUpdateWithoutClearanceRequestInput, TerminationReasonUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<TerminationReasonCreateWithoutClearanceRequestInput, TerminationReasonUncheckedCreateWithoutClearanceRequestInput>
    where?: TerminationReasonWhereInput
  }

  export type TerminationReasonUpdateToOneWithWhereWithoutClearanceRequestInput = {
    where?: TerminationReasonWhereInput
    data: XOR<TerminationReasonUpdateWithoutClearanceRequestInput, TerminationReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type TerminationReasonUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TerminationReasonUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdReplacementReasonUpsertWithoutClearanceRequestInput = {
    update: XOR<IdReplacementReasonUpdateWithoutClearanceRequestInput, IdReplacementReasonUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<IdReplacementReasonCreateWithoutClearanceRequestInput, IdReplacementReasonUncheckedCreateWithoutClearanceRequestInput>
    where?: IdReplacementReasonWhereInput
  }

  export type IdReplacementReasonUpdateToOneWithWhereWithoutClearanceRequestInput = {
    where?: IdReplacementReasonWhereInput
    data: XOR<IdReplacementReasonUpdateWithoutClearanceRequestInput, IdReplacementReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type IdReplacementReasonUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IdReplacementReasonUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherClearanceReasonUpsertWithoutClearanceRequestInput = {
    update: XOR<TeacherClearanceReasonUpdateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<TeacherClearanceReasonCreateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedCreateWithoutClearanceRequestInput>
    where?: TeacherClearanceReasonWhereInput
  }

  export type TeacherClearanceReasonUpdateToOneWithWhereWithoutClearanceRequestInput = {
    where?: TeacherClearanceReasonWhereInput
    data: XOR<TeacherClearanceReasonUpdateWithoutClearanceRequestInput, TeacherClearanceReasonUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type TeacherClearanceReasonUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherClearanceReasonUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type ApprovalActionUpsertWithWhereUniqueWithoutClearanceRequestInput = {
    where: ApprovalActionWhereUniqueInput
    update: XOR<ApprovalActionUpdateWithoutClearanceRequestInput, ApprovalActionUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<ApprovalActionCreateWithoutClearanceRequestInput, ApprovalActionUncheckedCreateWithoutClearanceRequestInput>
  }

  export type ApprovalActionUpdateWithWhereUniqueWithoutClearanceRequestInput = {
    where: ApprovalActionWhereUniqueInput
    data: XOR<ApprovalActionUpdateWithoutClearanceRequestInput, ApprovalActionUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type ApprovalActionUpdateManyWithWhereWithoutClearanceRequestInput = {
    where: ApprovalActionScalarWhereInput
    data: XOR<ApprovalActionUpdateManyMutationInput, ApprovalActionUncheckedUpdateManyWithoutClearanceRequestInput>
  }

  export type DocumentUpsertWithWhereUniqueWithoutClearanceRequestInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutClearanceRequestInput, DocumentUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<DocumentCreateWithoutClearanceRequestInput, DocumentUncheckedCreateWithoutClearanceRequestInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutClearanceRequestInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutClearanceRequestInput, DocumentUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type DocumentUpdateManyWithWhereWithoutClearanceRequestInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutClearanceRequestInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutClearanceRequestInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutClearanceRequestInput, NotificationUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<NotificationCreateWithoutClearanceRequestInput, NotificationUncheckedCreateWithoutClearanceRequestInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutClearanceRequestInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutClearanceRequestInput, NotificationUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type NotificationUpdateManyWithWhereWithoutClearanceRequestInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutClearanceRequestInput>
  }

  export type CertificateUpsertWithoutClearanceRequestInput = {
    update: XOR<CertificateUpdateWithoutClearanceRequestInput, CertificateUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<CertificateCreateWithoutClearanceRequestInput, CertificateUncheckedCreateWithoutClearanceRequestInput>
    where?: CertificateWhereInput
  }

  export type CertificateUpdateToOneWithWhereWithoutClearanceRequestInput = {
    where?: CertificateWhereInput
    data: XOR<CertificateUpdateWithoutClearanceRequestInput, CertificateUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type CertificateUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    signatures?: NullableJsonNullValueInput | InputJsonValue
    issuedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutClearanceRequestInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutClearanceRequestInput, AuditLogUncheckedUpdateWithoutClearanceRequestInput>
    create: XOR<AuditLogCreateWithoutClearanceRequestInput, AuditLogUncheckedCreateWithoutClearanceRequestInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutClearanceRequestInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutClearanceRequestInput, AuditLogUncheckedUpdateWithoutClearanceRequestInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutClearanceRequestInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutClearanceRequestInput>
  }

  export type DocumentCreateManyDocumentTypeInput = {
    id?: string
    clearanceRequestId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type DocumentUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutDocumentTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    clearanceRequestId?: string | null
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type ClearanceRequestCreateManyUserInput = {
    id?: string
    formType: $Enums.FormType
    programId: string
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    clearanceRequestId?: string | null
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clearanceRequest?: ClearanceRequestUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClearanceRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    program?: ProgramUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    programId?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    clearanceRequest?: ClearanceRequestUpdateOneWithoutAuditLogsNestedInput
    admin?: AdminUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyAdminInput = {
    id?: string
    userId: string
    clearanceRequestId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type AuditLogUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    clearanceRequest?: ClearanceRequestUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCreateManyDepartmentInput = {
    id?: string
    userId: string
    hireDate: Date | string
    position: string
    employmentStatus: $Enums.EmploymentStatus
    yearsOfService?: number
  }

  export type StudentCreateManyDepartmentInput = {
    id?: string
    userId: string
    startDate: Date | string
    programId: string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
  }

  export type ApproverCreateManyDepartmentInput = {
    id?: string
    userId: string
    officeId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
  }

  export type OfficeCreateManyDepartmentInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type ProgramCreateManyDepartmentInput = {
    id?: string
    name: string
    type: $Enums.ProgramType
    category: $Enums.ProgramCategory
    description?: string | null
  }

  export type TeacherUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    position?: StringFieldUpdateOperationsInput | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    yearsOfService?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    program?: ProgramUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    programId?: StringFieldUpdateOperationsInput | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    programId?: StringFieldUpdateOperationsInput | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
  }

  export type ApproverUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutApproverNestedInput
    office?: OfficeUpdateOneRequiredWithoutApproversNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    officeId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
  }

  export type OfficeUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    approvers?: ApproverUpdateManyWithoutOfficeNestedInput
    workflowSteps?: WorkflowStepUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    approvers?: ApproverUncheckedUpdateManyWithoutOfficeNestedInput
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type OfficeUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProgramUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
    students?: StudentUncheckedUpdateManyWithoutProgramNestedInput
    workflowRules?: WorkflowRuleUncheckedUpdateManyWithoutProgramNestedInput
    clearanceRequests?: ClearanceRequestUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ProgramUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumProgramTypeFieldUpdateOperationsInput | $Enums.ProgramType
    category?: EnumProgramCategoryFieldUpdateOperationsInput | $Enums.ProgramCategory
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateManyProgramInput = {
    id?: string
    userId: string
    startDate: Date | string
    currentYear: number
    semester: number
    academicStatus?: $Enums.AcademicStatus
    departmentId: string
  }

  export type WorkflowRuleCreateManyProgramInput = {
    id?: string
    formType: $Enums.FormType
    description?: string | null
  }

  export type ClearanceRequestCreateManyProgramInput = {
    id?: string
    userId: string
    formType: $Enums.FormType
    status?: $Enums.RequestStatus
    rejectionReason?: string | null
    resubmissionCount?: number
    submittedAt?: Date | string
    updatedAt?: Date | string
    currentStep?: number
    terminationReasonId?: string | null
    idReplacementReasonId?: string | null
    teacherClearanceReasonId?: string | null
  }

  export type StudentUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentYear?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    academicStatus?: EnumAcademicStatusFieldUpdateOperationsInput | $Enums.AcademicStatus
    departmentId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowRuleUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowSteps?: WorkflowStepUpdateManyWithoutWorkflowRuleNestedInput
  }

  export type WorkflowRuleUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowSteps?: WorkflowStepUncheckedUpdateManyWithoutWorkflowRuleNestedInput
  }

  export type WorkflowRuleUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClearanceRequestUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutClearanceRequestsNestedInput
    terminationReason?: TerminationReasonUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    terminationReason?: TerminationReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    idReplacementReason?: IdReplacementReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    teacherClearanceReason?: TeacherClearanceReasonUncheckedUpdateOneWithoutClearanceRequestNestedInput
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutClearanceRequestNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClearanceRequestNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClearanceRequestNestedInput
    certificate?: CertificateUncheckedUpdateOneWithoutClearanceRequestNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutClearanceRequestNestedInput
  }

  export type ClearanceRequestUncheckedUpdateManyWithoutProgramInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    formType?: EnumFormTypeFieldUpdateOperationsInput | $Enums.FormType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    resubmissionCount?: IntFieldUpdateOperationsInput | number
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStep?: IntFieldUpdateOperationsInput | number
    terminationReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    idReplacementReasonId?: NullableStringFieldUpdateOperationsInput | string | null
    teacherClearanceReasonId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApproverCreateManyOfficeInput = {
    id?: string
    userId: string
    digitalSignature?: string | null
    yearsOfExperience?: number
    departmentId?: string | null
  }

  export type WorkflowStepCreateManyOfficeInput = {
    id?: string
    workflowRuleId: string
    stepOrder: number
    description?: string | null
  }

  export type ApproverUpdateWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutApproverNestedInput
    department?: DepartmentUpdateOneWithoutApproversNestedInput
    approvalActions?: ApprovalActionUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    approvalActions?: ApprovalActionUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type ApproverUncheckedUpdateManyWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUpdateWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    workflowRule?: WorkflowRuleUpdateOneRequiredWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowRuleId?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUncheckedUpdateManyWithoutOfficeInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowRuleId?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApprovalActionCreateManyApproverInput = {
    id?: string
    clearanceRequestId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type ApprovalActionUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clearanceRequest?: ClearanceRequestUpdateOneRequiredWithoutApprovalActionsNestedInput
  }

  export type ApprovalActionUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalActionUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    clearanceRequestId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkflowStepCreateManyWorkflowRuleInput = {
    id?: string
    stepOrder: number
    officeId: string
    description?: string | null
  }

  export type WorkflowStepUpdateWithoutWorkflowRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    office?: OfficeUpdateOneRequiredWithoutWorkflowStepsNestedInput
  }

  export type WorkflowStepUncheckedUpdateWithoutWorkflowRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    officeId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUncheckedUpdateManyWithoutWorkflowRuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepOrder?: IntFieldUpdateOperationsInput | number
    officeId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApprovalActionCreateManyClearanceRequestInput = {
    id?: string
    approverId: string
    status?: $Enums.ApprovalStatus
    comment?: string | null
    actionDate?: Date | string | null
    finalizedAt?: Date | string | null
    actionDueBy?: Date | string | null
  }

  export type DocumentCreateManyClearanceRequestInput = {
    id?: string
    documentTypeId: string
    filePath: string
    uploadedAt?: Date | string
  }

  export type NotificationCreateManyClearanceRequestInput = {
    id?: string
    userId: string
    title: string
    message: string
    emailSubject?: string | null
    type: $Enums.NotificationType
    status: $Enums.NotificationStatus
    read?: boolean
    sentAt?: Date | string
    emailSentAt?: Date | string | null
  }

  export type AuditLogCreateManyClearanceRequestInput = {
    id?: string
    userId: string
    adminId?: string | null
    action: string
    details: string
    timestamp?: Date | string
  }

  export type ApprovalActionUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approver?: ApproverUpdateOneRequiredWithoutApprovalActionsNestedInput
  }

  export type ApprovalActionUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalActionUncheckedUpdateManyWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    actionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalizedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionDueBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DocumentUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentType?: DocumentTypeUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentTypeId?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    read?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    admin?: AdminUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutClearanceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    adminId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}